
c:/Users/John/Documents/IoTClass/particle-02a-jvaldez155/MoistureSensor/target/1.5.0/argon/MoistureSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005124  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9140  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000004d0  2003dd00  000d9144  0001dd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000620  2003e1d0  2003e1d0  0002e1d0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9614  000d9614  00029614  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d963c  000d963c  0002963c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fda89  00000000  00000000  00029640  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000146ba  00000000  00000000  001270c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023035  00000000  00000000  0013b783  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c78  00000000  00000000  0015e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004f50  00000000  00000000  00161430  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ba41  00000000  00000000  00166380  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032763  00000000  00000000  001a1dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001099b3  00000000  00000000  001d4524  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e570  00000000  00000000  002dded8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fc87 	bl	d7940 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fca7 	bl	d798c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dd00 	.word	0x2003dd00
   d4048:	000d9144 	.word	0x000d9144
   d404c:	2003e1d0 	.word	0x2003e1d0
   d4050:	2003e1d0 	.word	0x2003e1d0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fa25 	bl	d64a8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9134 	.word	0x000d9134
   d4080:	000d90ec 	.word	0x000d90ec

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b854 	b.w	d4130 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f953 	bl	d4334 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b9cb 	b.w	d642c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bdaf 	b.w	d5bf8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bdb5 	b.w	d5c08 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bdb3 	b.w	d5c08 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fce0 	bl	d5a70 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d57c1 	.word	0x000d57c1

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr

000d40ca <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40ca:	4770      	bx	lr

000d40cc <_ZN10CloudClass12syncTimeDoneEv.isra.5>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d40cc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40ce:	2000      	movs	r0, #0
   d40d0:	f001 fd7a 	bl	d5bc8 <spark_sync_time_pending>
   d40d4:	b128      	cbz	r0, d40e2 <_ZN10CloudClass12syncTimeDoneEv.isra.5+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d40d6:	f001 fd67 	bl	d5ba8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d40da:	f080 0001 	eor.w	r0, r0, #1
   d40de:	b2c0      	uxtb	r0, r0
   d40e0:	bd08      	pop	{r3, pc}
   d40e2:	2001      	movs	r0, #1
    }
   d40e4:	bd08      	pop	{r3, pc}
	...

000d40e8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40e8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ea:	6984      	ldr	r4, [r0, #24]
   d40ec:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZN9TCPClientD1Ev+0x30>)
   d40ee:	6003      	str	r3, [r0, #0]
   d40f0:	4605      	mov	r5, r0
   d40f2:	b17c      	cbz	r4, d4114 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40f4:	6863      	ldr	r3, [r4, #4]
   d40f6:	3b01      	subs	r3, #1
   d40f8:	6063      	str	r3, [r4, #4]
   d40fa:	b95b      	cbnz	r3, d4114 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d40fc:	6823      	ldr	r3, [r4, #0]
   d40fe:	4620      	mov	r0, r4
   d4100:	689b      	ldr	r3, [r3, #8]
   d4102:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4104:	68a3      	ldr	r3, [r4, #8]
   d4106:	3b01      	subs	r3, #1
   d4108:	60a3      	str	r3, [r4, #8]
   d410a:	b91b      	cbnz	r3, d4114 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d410c:	6823      	ldr	r3, [r4, #0]
   d410e:	4620      	mov	r0, r4
   d4110:	68db      	ldr	r3, [r3, #12]
   d4112:	4798      	blx	r3
   d4114:	4628      	mov	r0, r5
   d4116:	bd38      	pop	{r3, r4, r5, pc}
   d4118:	000d8dcc 	.word	0x000d8dcc

000d411c <_ZN9TCPClientD0Ev>:
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
   d4120:	f7ff ffe2 	bl	d40e8 <_ZN9TCPClientD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	211c      	movs	r1, #28
   d4128:	f003 f954 	bl	d73d4 <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <setup>:
Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On");
int button;


// setup() runs once, when the device is first turned on.
void setup() {
   d4130:	b510      	push	{r4, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d4132:	f002 facf 	bl	d66d4 <_Z16_fetch_usbserialv>
   d4136:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d413a:	f002 fabf 	bl	d66bc <_ZN9USBSerial5beginEl>
  mqtt.subscribe(&onoffbutton);
   d413e:	4913      	ldr	r1, [pc, #76]	; (d418c <setup+0x5c>)
   d4140:	4813      	ldr	r0, [pc, #76]	; (d4190 <setup+0x60>)
  pinMode(A2,OUTPUT);
  pinMode(sensor,INPUT);
  Wire.begin();

  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4142:	4c14      	ldr	r4, [pc, #80]	; (d4194 <setup+0x64>)

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  mqtt.subscribe(&onoffbutton);
   d4144:	f001 f874 	bl	d5230 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
  pinMode(A2,OUTPUT);
   d4148:	2101      	movs	r1, #1
   d414a:	2011      	movs	r0, #17
   d414c:	f003 f84a 	bl	d71e4 <pinMode>
  pinMode(sensor,INPUT);
   d4150:	4b11      	ldr	r3, [pc, #68]	; (d4198 <setup+0x68>)
   d4152:	2100      	movs	r1, #0
   d4154:	8818      	ldrh	r0, [r3, #0]
   d4156:	f003 f845 	bl	d71e4 <pinMode>
  Wire.begin();
   d415a:	f003 f907 	bl	d736c <_Z19__fetch_global_Wirev>
   d415e:	f002 fb9f 	bl	d68a0 <_ZN7TwoWire5beginEv>

  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4162:	223c      	movs	r2, #60	; 0x3c
   d4164:	2102      	movs	r1, #2
   d4166:	4620      	mov	r0, r4
   d4168:	f000 fbf0 	bl	d494c <_ZN16Adafruit_SSD13065beginEhh>
  display.clearDisplay();
   d416c:	4620      	mov	r0, r4
   d416e:	f000 fd3d 	bl	d4bec <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   d4172:	4620      	mov	r0, r4
   d4174:	f000 fcbc 	bl	d4af0 <_ZN16Adafruit_SSD13067displayEv>
  reading = "moisture";
   d4178:	4908      	ldr	r1, [pc, #32]	; (d419c <setup+0x6c>)
   d417a:	4809      	ldr	r0, [pc, #36]	; (d41a0 <setup+0x70>)
   d417c:	f001 ff8e 	bl	d609c <_ZN6StringaSEPKc>
  delay(delayTime);
   d4180:	4b08      	ldr	r3, [pc, #32]	; (d41a4 <setup+0x74>)
}
   d4182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
  display.clearDisplay();
  display.display();
  reading = "moisture";
  delay(delayTime);
   d4186:	6818      	ldr	r0, [r3, #0]
   d4188:	f002 b912 	b.w	d63b0 <delay>
   d418c:	2003e30c 	.word	0x2003e30c
   d4190:	2003e200 	.word	0x2003e200
   d4194:	2003e2d8 	.word	0x2003e2d8
   d4198:	2003dd04 	.word	0x2003dd04
   d419c:	000d8320 	.word	0x000d8320
   d41a0:	2003e2fc 	.word	0x2003e2fc
   d41a4:	2003dd00 	.word	0x2003dd00

000d41a8 <_Z9checkTimev>:
      
    
  }
}

void checkTime() {
   d41a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
   d41aa:	f002 f8f0 	bl	d638e <_ZN9TimeClass3nowEv>
   d41ae:	4601      	mov	r1, r0
   d41b0:	4668      	mov	r0, sp
   d41b2:	f002 f8a9 	bl	d6308 <_ZN9TimeClass7timeStrEl>
  t=Time.timeStr();
   d41b6:	4669      	mov	r1, sp
   d41b8:	4821      	ldr	r0, [pc, #132]	; (d4240 <_Z9checkTimev+0x98>)
   d41ba:	f001 ff67 	bl	d608c <_ZN6StringaSEOS_>
   d41be:	4668      	mov	r0, sp
   d41c0:	f001 fed3 	bl	d5f6a <_ZN6StringD1Ev>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41c4:	2300      	movs	r3, #0
   d41c6:	2219      	movs	r2, #25
   d41c8:	491e      	ldr	r1, [pc, #120]	; (d4244 <_Z9checkTimev+0x9c>)
   d41ca:	481d      	ldr	r0, [pc, #116]	; (d4240 <_Z9checkTimev+0x98>)
   d41cc:	f001 ff77 	bl	d60be <_ZNK6String8getBytesEPhjj>
  t.toCharArray(currentTime,25);
  t2=t.substring(11,19);
   d41d0:	2313      	movs	r3, #19
   d41d2:	220b      	movs	r2, #11
   d41d4:	491a      	ldr	r1, [pc, #104]	; (d4240 <_Z9checkTimev+0x98>)
   d41d6:	4668      	mov	r0, sp
   d41d8:	f001 ff8a 	bl	d60f0 <_ZNK6String9substringEjj>
   d41dc:	4669      	mov	r1, sp
   d41de:	481a      	ldr	r0, [pc, #104]	; (d4248 <_Z9checkTimev+0xa0>)
   d41e0:	f001 ff54 	bl	d608c <_ZN6StringaSEOS_>
   d41e4:	4668      	mov	r0, sp
   d41e6:	f001 fec0 	bl	d5f6a <_ZN6StringD1Ev>
   d41ea:	2300      	movs	r3, #0
   d41ec:	2209      	movs	r2, #9
   d41ee:	4917      	ldr	r1, [pc, #92]	; (d424c <_Z9checkTimev+0xa4>)
   d41f0:	4815      	ldr	r0, [pc, #84]	; (d4248 <_Z9checkTimev+0xa0>)
   d41f2:	f001 ff64 	bl	d60be <_ZNK6String8getBytesEPhjj>
  t2.toCharArray(current,9);
    Time.zone(-6);    // Set Time Zone to MDT (UTC - 7)
   d41f6:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
   d41fa:	f002 f869 	bl	d62d0 <_ZN9TimeClass4zoneEf>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41fe:	f001 fae7 	bl	d57d0 <HAL_Timer_Get_Milli_Seconds>
   d4202:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4204:	f001 fcd0 	bl	d5ba8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   d4208:	b110      	cbz	r0, d4210 <_Z9checkTimev+0x68>
            return false;
        }
        return spark_sync_time(NULL);
   d420a:	2000      	movs	r0, #0
   d420c:	f001 fcd4 	bl	d5bb8 <spark_sync_time>
    unsigned long cur = millis();
    // Request time sync from Particle Device Cloud
    Particle.syncTime();
    //Wait to receive time from Particle Device Cloud
    waitUntil(Particle.syncTimeDone);
   d4210:	f7ff ff5c 	bl	d40cc <_ZN10CloudClass12syncTimeDoneEv.isra.5>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d4214:	b910      	cbnz	r0, d421c <_Z9checkTimev+0x74>
            spark_process();
   d4216:	f001 fcbf 	bl	d5b98 <spark_process>
   d421a:	e7f9      	b.n	d4210 <_Z9checkTimev+0x68>
   d421c:	f7ff ff56 	bl	d40cc <_ZN10CloudClass12syncTimeDoneEv.isra.5>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4220:	2100      	movs	r1, #0
        return spark_sync_time_last(&tm, nullptr);
   d4222:	4668      	mov	r0, sp
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4224:	9100      	str	r1, [sp, #0]
        return spark_sync_time_last(&tm, nullptr);
   d4226:	f001 fcd7 	bl	d5bd8 <spark_sync_time_last>
    // Check if synchronized successfully
    if(Particle.timeSyncedLast() >= cur){
   d422a:	4284      	cmp	r4, r0
   d422c:	d806      	bhi.n	d423c <_Z9checkTimev+0x94>
      // Print current time
      Serial.printlnf("Current time is %s",current);//Time.timeStr().c_str());
   d422e:	f002 fa51 	bl	d66d4 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4232:	4b06      	ldr	r3, [pc, #24]	; (d424c <_Z9checkTimev+0xa4>)
   d4234:	4a06      	ldr	r2, [pc, #24]	; (d4250 <_Z9checkTimev+0xa8>)
   d4236:	2101      	movs	r1, #1
   d4238:	f001 fff9 	bl	d622e <_ZN5Print11printf_implEbPKcz>
    }      
}
   d423c:	b004      	add	sp, #16
   d423e:	bd10      	pop	{r4, pc}
   d4240:	2003e370 	.word	0x2003e370
   d4244:	2003e380 	.word	0x2003e380
   d4248:	2003e1f0 	.word	0x2003e1f0
   d424c:	2003e1e4 	.word	0x2003e1e4
   d4250:	000d8329 	.word	0x000d8329

000d4254 <_Z12printDisplay6String>:
void printDisplay(String reading) {
   d4254:	b510      	push	{r4, lr}
  display.clearDisplay();
   d4256:	481f      	ldr	r0, [pc, #124]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d4258:	f000 fcc8 	bl	d4bec <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(2);
   d425c:	2102      	movs	r1, #2
   d425e:	481d      	ldr	r0, [pc, #116]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d4260:	f000 fe86 	bl	d4f70 <_ZN12Adafruit_GFX11setTextSizeEh>
  display.setTextColor(WHITE);
   d4264:	2101      	movs	r1, #1
   d4266:	481b      	ldr	r0, [pc, #108]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d4268:	f000 fe87 	bl	d4f7a <_ZN12Adafruit_GFX12setTextColorEt>
  display.setCursor(2,6);
   d426c:	2206      	movs	r2, #6
   d426e:	2102      	movs	r1, #2
   d4270:	4818      	ldr	r0, [pc, #96]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d4272:	f000 fe7a 	bl	d4f6a <_ZN12Adafruit_GFX9setCursorEss>
  display.print("Moisture =");
   d4276:	4918      	ldr	r1, [pc, #96]	; (d42d8 <_Z12printDisplay6String+0x84>)
   d4278:	4816      	ldr	r0, [pc, #88]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d427a:	f001 ff9b 	bl	d61b4 <_ZN5Print5printEPKc>
  display.setCursor(35,25);
   d427e:	2219      	movs	r2, #25
   d4280:	2123      	movs	r1, #35	; 0x23
   d4282:	4814      	ldr	r0, [pc, #80]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d4284:	f000 fe71 	bl	d4f6a <_ZN12Adafruit_GFX9setCursorEss>
  display.print(moisture);display.println("");
   d4288:	4b14      	ldr	r3, [pc, #80]	; (d42dc <_Z12printDisplay6String+0x88>)
   d428a:	681c      	ldr	r4, [r3, #0]
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d428c:	2c00      	cmp	r4, #0
   d428e:	da05      	bge.n	d429c <_Z12printDisplay6String+0x48>
            t = print('-');
   d4290:	212d      	movs	r1, #45	; 0x2d
   d4292:	4810      	ldr	r0, [pc, #64]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d4294:	f001 ff92 	bl	d61bc <_ZN5Print5printEc>
            val = -n;
   d4298:	4261      	negs	r1, r4
   d429a:	e000      	b.n	d429e <_Z12printDisplay6String+0x4a>
        } else {
            val = n;
   d429c:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d429e:	220a      	movs	r2, #10
   d42a0:	480c      	ldr	r0, [pc, #48]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d42a2:	f001 ffa4 	bl	d61ee <_ZN5Print11printNumberEmh>
   d42a6:	490e      	ldr	r1, [pc, #56]	; (d42e0 <_Z12printDisplay6String+0x8c>)
   d42a8:	480a      	ldr	r0, [pc, #40]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d42aa:	f001 ff96 	bl	d61da <_ZN5Print7printlnEPKc>
  display.setCursor(2,50);
   d42ae:	2232      	movs	r2, #50	; 0x32
   d42b0:	2102      	movs	r1, #2
   d42b2:	4808      	ldr	r0, [pc, #32]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d42b4:	f000 fe59 	bl	d4f6a <_ZN12Adafruit_GFX9setCursorEss>
  display.print("@ ");
   d42b8:	490a      	ldr	r1, [pc, #40]	; (d42e4 <_Z12printDisplay6String+0x90>)
   d42ba:	4806      	ldr	r0, [pc, #24]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d42bc:	f001 ff7a 	bl	d61b4 <_ZN5Print5printEPKc>
  display.println(current);
   d42c0:	4909      	ldr	r1, [pc, #36]	; (d42e8 <_Z12printDisplay6String+0x94>)
   d42c2:	4804      	ldr	r0, [pc, #16]	; (d42d4 <_Z12printDisplay6String+0x80>)
   d42c4:	f001 ff89 	bl	d61da <_ZN5Print7printlnEPKc>
  display.display();
   d42c8:	4802      	ldr	r0, [pc, #8]	; (d42d4 <_Z12printDisplay6String+0x80>)
}
   d42ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.setCursor(35,25);
  display.print(moisture);display.println("");
  display.setCursor(2,50);
  display.print("@ ");
  display.println(current);
  display.display();
   d42ce:	f000 bc0f 	b.w	d4af0 <_ZN16Adafruit_SSD13067displayEv>
   d42d2:	bf00      	nop
   d42d4:	2003e2d8 	.word	0x2003e2d8
   d42d8:	000d833c 	.word	0x000d833c
   d42dc:	2003e1d4 	.word	0x2003e1d4
   d42e0:	000d89ad 	.word	0x000d89ad
   d42e4:	000d8347 	.word	0x000d8347
   d42e8:	2003e1e4 	.word	0x2003e1e4

000d42ec <_Z11buttonStatev>:
}

void buttonState(){
   d42ec:	b538      	push	{r3, r4, r5, lr}
     Adafruit_MQTT_Subscribe *subscription;
    while ((subscription = mqtt.readSubscription(950))) {  // do this loop for 1 seconds
      if (subscription == &onoffbutton) {
   d42ee:	4d0d      	ldr	r5, [pc, #52]	; (d4324 <_Z11buttonStatev+0x38>)
  display.display();
}

void buttonState(){
     Adafruit_MQTT_Subscribe *subscription;
    while ((subscription = mqtt.readSubscription(950))) {  // do this loop for 1 seconds
   d42f0:	480d      	ldr	r0, [pc, #52]	; (d4328 <_Z11buttonStatev+0x3c>)
   d42f2:	f240 31b6 	movw	r1, #950	; 0x3b6
   d42f6:	f000 ffb7 	bl	d5268 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d42fa:	b190      	cbz	r0, d4322 <_Z11buttonStatev+0x36>
      if (subscription == &onoffbutton) {
   d42fc:	42a8      	cmp	r0, r5
   d42fe:	d1f7      	bne.n	d42f0 <_Z11buttonStatev+0x4>
        button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
   d4300:	1d68      	adds	r0, r5, #5
   d4302:	f003 f9ff 	bl	d7704 <atoi>
   d4306:	4c09      	ldr	r4, [pc, #36]	; (d432c <_Z11buttonStatev+0x40>)
   d4308:	6020      	str	r0, [r4, #0]
        Serial.printf("Button State is %i",button);
   d430a:	f002 f9e3 	bl	d66d4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d430e:	6823      	ldr	r3, [r4, #0]
   d4310:	4a07      	ldr	r2, [pc, #28]	; (d4330 <_Z11buttonStatev+0x44>)
   d4312:	2100      	movs	r1, #0
   d4314:	f001 ff8b 	bl	d622e <_ZN5Print11printf_implEbPKcz>
        analogWrite(A2,button);
   d4318:	6821      	ldr	r1, [r4, #0]
   d431a:	2011      	movs	r0, #17
   d431c:	f002 ffa3 	bl	d7266 <_Z11analogWritetm>
   d4320:	e7e6      	b.n	d42f0 <_Z11buttonStatev+0x4>
   d4322:	bd38      	pop	{r3, r4, r5, pc}
   d4324:	2003e30c 	.word	0x2003e30c
   d4328:	2003e200 	.word	0x2003e200
   d432c:	2003e36c 	.word	0x2003e36c
   d4330:	000d834a 	.word	0x000d834a

000d4334 <loop>:
  reading = "moisture";
  delay(delayTime);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4334:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  // The core of your code will likely live here.
  //moisture = analogRead(sensor);
  Moisture = analogRead(sensor);;
   d4338:	4c20      	ldr	r4, [pc, #128]	; (d43bc <loop+0x88>)
   d433a:	4d21      	ldr	r5, [pc, #132]	; (d43c0 <loop+0x8c>)
   d433c:	8820      	ldrh	r0, [r4, #0]
   d433e:	f002 ff7b 	bl	d7238 <analogRead>
   d4342:	6028      	str	r0, [r5, #0]
  if(mqtt.Update()){
   d4344:	481f      	ldr	r0, [pc, #124]	; (d43c4 <loop+0x90>)
   d4346:	f000 fea3 	bl	d5090 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d434a:	b118      	cbz	r0, d4354 <loop+0x20>
      M1.publish(Moisture);
   d434c:	6829      	ldr	r1, [r5, #0]
   d434e:	481e      	ldr	r0, [pc, #120]	; (d43c8 <loop+0x94>)
   d4350:	f001 f974 	bl	d563c <_ZN21Adafruit_MQTT_Publish7publishEi>
  }
      
  for(int b=0; b<120;b++){
    moisture = analogRead(sensor);
   d4354:	f8df 8078 	ldr.w	r8, [pc, #120]	; d43d0 <loop+0x9c>
  reading = "moisture";
  delay(delayTime);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4358:	2678      	movs	r6, #120	; 0x78
  if(mqtt.Update()){
      M1.publish(Moisture);
  }
      
  for(int b=0; b<120;b++){
    moisture = analogRead(sensor);
   d435a:	8820      	ldrh	r0, [r4, #0]
   d435c:	f002 ff6c 	bl	d7238 <analogRead>
   d4360:	f8c8 0000 	str.w	r0, [r8]
        button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
        Serial.printf("Button State is %i",button);
        analogWrite(A2,button);
      }
    }*/
    buttonState();
   d4364:	f7ff ffc2 	bl	d42ec <_Z11buttonStatev>
    analogRead(sensor);
   d4368:	8820      	ldrh	r0, [r4, #0]
   d436a:	f002 ff65 	bl	d7238 <analogRead>
    Serial.println(analogRead(sensor));
   d436e:	f002 f9b1 	bl	d66d4 <_Z16_fetch_usbserialv>
   d4372:	4607      	mov	r7, r0
   d4374:	8820      	ldrh	r0, [r4, #0]
   d4376:	f002 ff5f 	bl	d7238 <analogRead>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d437a:	1e05      	subs	r5, r0, #0
   d437c:	da05      	bge.n	d438a <loop+0x56>
            t = print('-');
   d437e:	212d      	movs	r1, #45	; 0x2d
   d4380:	4638      	mov	r0, r7
   d4382:	f001 ff1b 	bl	d61bc <_ZN5Print5printEc>
            val = -n;
   d4386:	4269      	negs	r1, r5
   d4388:	e000      	b.n	d438c <loop+0x58>
        } else {
            val = n;
   d438a:	4629      	mov	r1, r5
        }
        return printNumber(val, base) + t;
   d438c:	220a      	movs	r2, #10
   d438e:	4638      	mov	r0, r7
   d4390:	f001 ff2d 	bl	d61ee <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4394:	4638      	mov	r0, r7
   d4396:	f001 ff14 	bl	d61c2 <_ZN5Print7printlnEv>
    checkTime();
   d439a:	f7ff ff05 	bl	d41a8 <_Z9checkTimev>
    printDisplay(reading);
   d439e:	490b      	ldr	r1, [pc, #44]	; (d43cc <loop+0x98>)
   d43a0:	4668      	mov	r0, sp
   d43a2:	f001 fe68 	bl	d6076 <_ZN6StringC1ERKS_>
   d43a6:	4668      	mov	r0, sp
   d43a8:	f7ff ff54 	bl	d4254 <_Z12printDisplay6String>
   d43ac:	4668      	mov	r0, sp
   d43ae:	f001 fddc 	bl	d5f6a <_ZN6StringD1Ev>
  Moisture = analogRead(sensor);;
  if(mqtt.Update()){
      M1.publish(Moisture);
  }
      
  for(int b=0; b<120;b++){
   d43b2:	3e01      	subs	r6, #1
   d43b4:	d1d1      	bne.n	d435a <loop+0x26>
    checkTime();
    printDisplay(reading);
      
    
  }
}
   d43b6:	b004      	add	sp, #16
   d43b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d43bc:	2003dd04 	.word	0x2003dd04
   d43c0:	2003e2d4 	.word	0x2003e2d4
   d43c4:	2003e200 	.word	0x2003e200
   d43c8:	2003e360 	.word	0x2003e360
   d43cc:	2003e2fc 	.word	0x2003e2fc
   d43d0:	2003e1d4 	.word	0x2003e1d4

000d43d4 <_ZN16Adafruit_SSD1306D0Ev>:
   d43d4:	b510      	push	{r4, lr}
   d43d6:	2124      	movs	r1, #36	; 0x24
   d43d8:	4604      	mov	r4, r0
   d43da:	f002 fffb 	bl	d73d4 <_ZdlPvj>
   d43de:	4620      	mov	r0, r4
   d43e0:	bd10      	pop	{r4, pc}

000d43e2 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d43e2:	b510      	push	{r4, lr}
   d43e4:	21d4      	movs	r1, #212	; 0xd4
   d43e6:	4604      	mov	r4, r0
   d43e8:	f002 fff4 	bl	d73d4 <_ZdlPvj>
   d43ec:	4620      	mov	r0, r4
   d43ee:	bd10      	pop	{r4, pc}

000d43f0 <_GLOBAL__sub_I_display>:
        button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
        Serial.printf("Button State is %i",button);
        analogWrite(A2,button);
          }
        }
   d43f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#include "Adafruit_MQTT/Adafruit_MQTT.h" 
#include "Adafruit_MQTT/Adafruit_MQTT_SPARK.h" 
#include "Adafruit_MQTT/Adafruit_MQTT.h" 

#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
   d43f4:	4c30      	ldr	r4, [pc, #192]	; (d44b8 <_GLOBAL__sub_I_display+0xc8>)
   d43f6:	4d31      	ldr	r5, [pc, #196]	; (d44bc <_GLOBAL__sub_I_display+0xcc>)
#define AIO_USERNAME  "jvaldez155"
#define AIO_KEY       "aio_lYlK40eeCJC7hH9ce04e8Brky4dD"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient;   
   d43f8:	4e31      	ldr	r6, [pc, #196]	; (d44c0 <_GLOBAL__sub_I_display+0xd0>)

int delayTime=1000;
int sensor = A5;
char currentTime[25];
char current[9];
String t;
   d43fa:	4f32      	ldr	r7, [pc, #200]	; (d44c4 <_GLOBAL__sub_I_display+0xd4>)
   d43fc:	f8df 8104 	ldr.w	r8, [pc, #260]	; d4504 <_GLOBAL__sub_I_display+0x114>

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4400:	f001 f93e 	bl	d5680 <HAL_Pin_Map>
#include "Adafruit_MQTT/Adafruit_MQTT.h" 
#include "Adafruit_MQTT/Adafruit_MQTT_SPARK.h" 
#include "Adafruit_MQTT/Adafruit_MQTT.h" 

#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
   d4404:	f04f 31ff 	mov.w	r1, #4294967295
   d4408:	4620      	mov	r0, r4
   d440a:	f000 fa41 	bl	d4890 <_ZN16Adafruit_SSD1306C1Ea>
   d440e:	462a      	mov	r2, r5
   d4410:	492d      	ldr	r1, [pc, #180]	; (d44c8 <_GLOBAL__sub_I_display+0xd8>)
   d4412:	4620      	mov	r0, r4
   d4414:	f002 ffd0 	bl	d73b8 <__aeabi_atexit>
#define AIO_USERNAME  "jvaldez155"
#define AIO_KEY       "aio_lYlK40eeCJC7hH9ce04e8Brky4dD"


/************ Global State (you don't need to change this!) ***   ***************/ 
TCPClient TheClient;   
   d4418:	4630      	mov	r0, r6
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d441a:	4c2c      	ldr	r4, [pc, #176]	; (d44cc <_GLOBAL__sub_I_display+0xdc>)
   d441c:	f002 fdc0 	bl	d6fa0 <_ZN9TCPClientC1Ev>
   d4420:	462a      	mov	r2, r5
   d4422:	492b      	ldr	r1, [pc, #172]	; (d44d0 <_GLOBAL__sub_I_display+0xe0>)
   d4424:	4630      	mov	r0, r6
   d4426:	f002 ffc7 	bl	d73b8 <__aeabi_atexit>
   d442a:	4b2a      	ldr	r3, [pc, #168]	; (d44d4 <_GLOBAL__sub_I_display+0xe4>)
   d442c:	9300      	str	r3, [sp, #0]
   d442e:	f240 725b 	movw	r2, #1883	; 0x75b
   d4432:	4b29      	ldr	r3, [pc, #164]	; (d44d8 <_GLOBAL__sub_I_display+0xe8>)
   d4434:	4929      	ldr	r1, [pc, #164]	; (d44dc <_GLOBAL__sub_I_display+0xec>)
   d4436:	4620      	mov	r0, r4
   d4438:	f000 fe60 	bl	d50fc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d443c:	4b28      	ldr	r3, [pc, #160]	; (d44e0 <_GLOBAL__sub_I_display+0xf0>)

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details. 
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d443e:	4929      	ldr	r1, [pc, #164]	; (d44e4 <_GLOBAL__sub_I_display+0xf4>)
   d4440:	6023      	str	r3, [r4, #0]
   d4442:	462a      	mov	r2, r5
   d4444:	4620      	mov	r0, r4
   d4446:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
   d444a:	f002 ffb5 	bl	d73b8 <__aeabi_atexit>

/****************************** Feeds ***************************************/ 
// Setup a feed called <object> for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish M1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/<Moisture");
   d444e:	4621      	mov	r1, r4
   d4450:	2300      	movs	r3, #0
   d4452:	4a25      	ldr	r2, [pc, #148]	; (d44e8 <_GLOBAL__sub_I_display+0xf8>)
   d4454:	4825      	ldr	r0, [pc, #148]	; (d44ec <_GLOBAL__sub_I_display+0xfc>)

int delayTime=1000;
int sensor = A5;
char currentTime[25];
char current[9];
String t;
   d4456:	4e26      	ldr	r6, [pc, #152]	; (d44f0 <_GLOBAL__sub_I_display+0x100>)

/****************************** Feeds ***************************************/ 
// Setup a feed called <object> for publishing. 
// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname> 

Adafruit_MQTT_Publish M1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/<Moisture");
   d4458:	f001 f8dc 	bl	d5614 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Publish T1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/<Temperture");
   d445c:	2300      	movs	r3, #0
   d445e:	4a25      	ldr	r2, [pc, #148]	; (d44f4 <_GLOBAL__sub_I_display+0x104>)
   d4460:	4825      	ldr	r0, [pc, #148]	; (d44f8 <_GLOBAL__sub_I_display+0x108>)
   d4462:	4621      	mov	r1, r4
   d4464:	f001 f8d6 	bl	d5614 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>

int delayTime=1000;
int sensor = A5;
char currentTime[25];
char current[9];
String t;
   d4468:	4639      	mov	r1, r7
   d446a:	4640      	mov	r0, r8
   d446c:	f001 fdc4 	bl	d5ff8 <_ZN6StringC1EPK19__FlashStringHelper>
   d4470:	4640      	mov	r0, r8
String t2;
   d4472:	f8df 8094 	ldr.w	r8, [pc, #148]	; d4508 <_GLOBAL__sub_I_display+0x118>

int delayTime=1000;
int sensor = A5;
char currentTime[25];
char current[9];
String t;
   d4476:	462a      	mov	r2, r5
   d4478:	4631      	mov	r1, r6
   d447a:	f002 ff9d 	bl	d73b8 <__aeabi_atexit>
String t2;
   d447e:	4639      	mov	r1, r7
   d4480:	4640      	mov	r0, r8
   d4482:	f001 fdb9 	bl	d5ff8 <_ZN6StringC1EPK19__FlashStringHelper>
   d4486:	4640      	mov	r0, r8
String reading;
   d4488:	f8df 8080 	ldr.w	r8, [pc, #128]	; d450c <_GLOBAL__sub_I_display+0x11c>
int delayTime=1000;
int sensor = A5;
char currentTime[25];
char current[9];
String t;
String t2;
   d448c:	462a      	mov	r2, r5
   d448e:	4631      	mov	r1, r6
   d4490:	f002 ff92 	bl	d73b8 <__aeabi_atexit>
String reading;
   d4494:	4639      	mov	r1, r7
   d4496:	4640      	mov	r0, r8
   d4498:	f001 fdae 	bl	d5ff8 <_ZN6StringC1EPK19__FlashStringHelper>
   d449c:	462a      	mov	r2, r5
   d449e:	4631      	mov	r1, r6
   d44a0:	4640      	mov	r0, r8
   d44a2:	f002 ff89 	bl	d73b8 <__aeabi_atexit>
int moisture;
int Moisture;

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On");
   d44a6:	4a15      	ldr	r2, [pc, #84]	; (d44fc <_GLOBAL__sub_I_display+0x10c>)
   d44a8:	4815      	ldr	r0, [pc, #84]	; (d4500 <_GLOBAL__sub_I_display+0x110>)
   d44aa:	2300      	movs	r3, #0
   d44ac:	4621      	mov	r1, r4
        button = atoi((char *)onoffbutton.lastread);   //convert adafruit string to int
        Serial.printf("Button State is %i",button);
        analogWrite(A2,button);
          }
        }
   d44ae:	b002      	add	sp, #8
   d44b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
String t2;
String reading;
int moisture;
int Moisture;

Adafruit_MQTT_Subscribe onoffbutton = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/LED_On");
   d44b4:	f001 b8c4 	b.w	d5640 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   d44b8:	2003e2d8 	.word	0x2003e2d8
   d44bc:	2003e1d0 	.word	0x2003e1d0
   d44c0:	2003e344 	.word	0x2003e344
   d44c4:	000d89ad 	.word	0x000d89ad
   d44c8:	000d40c9 	.word	0x000d40c9
   d44cc:	2003e200 	.word	0x2003e200
   d44d0:	000d40e9 	.word	0x000d40e9
   d44d4:	000d8378 	.word	0x000d8378
   d44d8:	000d835d 	.word	0x000d835d
   d44dc:	000d8368 	.word	0x000d8368
   d44e0:	000d8960 	.word	0x000d8960
   d44e4:	000d40cb 	.word	0x000d40cb
   d44e8:	000d8399 	.word	0x000d8399
   d44ec:	2003e360 	.word	0x2003e360
   d44f0:	000d5f6b 	.word	0x000d5f6b
   d44f4:	000d83b4 	.word	0x000d83b4
   d44f8:	2003e1d8 	.word	0x2003e1d8
   d44fc:	000d83d1 	.word	0x000d83d1
   d4500:	2003e30c 	.word	0x2003e30c
   d4504:	2003e370 	.word	0x2003e370
   d4508:	2003e1f0 	.word	0x2003e1f0
   d450c:	2003e2fc 	.word	0x2003e2fc

000d4510 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4510:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4512:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4514:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4518:	2c02      	cmp	r4, #2
   d451a:	d008      	beq.n	d452e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d451c:	2c03      	cmp	r4, #3
   d451e:	d00f      	beq.n	d4540 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4520:	2c01      	cmp	r4, #1
   d4522:	d170      	bne.n	d4606 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4524:	8904      	ldrh	r4, [r0, #8]
   d4526:	3c01      	subs	r4, #1
   d4528:	1aa2      	subs	r2, r4, r2
   d452a:	b212      	sxth	r2, r2
      break;
   d452c:	e00c      	b.n	d4548 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d452e:	8944      	ldrh	r4, [r0, #10]
   d4530:	3c01      	subs	r4, #1
   d4532:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4534:	8904      	ldrh	r4, [r0, #8]
   d4536:	1ae4      	subs	r4, r4, r3
   d4538:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d453a:	b212      	sxth	r2, r2
      x -= (w-1);
   d453c:	b209      	sxth	r1, r1
      break;
   d453e:	e062      	b.n	d4606 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4540:	8944      	ldrh	r4, [r0, #10]
   d4542:	1ae4      	subs	r4, r4, r3
   d4544:	1a61      	subs	r1, r4, r1
   d4546:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4548:	2a00      	cmp	r2, #0
   d454a:	db5b      	blt.n	d4604 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d454c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4550:	4294      	cmp	r4, r2
   d4552:	f340 8090 	ble.w	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4556:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4558:	bfbe      	ittt	lt
   d455a:	185b      	addlt	r3, r3, r1
   d455c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d455e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4560:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4564:	18cc      	adds	r4, r1, r3
   d4566:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4568:	bfc4      	itt	gt
   d456a:	1a43      	subgt	r3, r0, r1
   d456c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d456e:	2b00      	cmp	r3, #0
   d4570:	f340 8081 	ble.w	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4574:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4576:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4578:	4f3f      	ldr	r7, [pc, #252]	; (d4678 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d457a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d457e:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4582:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4584:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4588:	d017      	beq.n	d45ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d458a:	f1c1 0108 	rsb	r1, r1, #8
   d458e:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4590:	493a      	ldr	r1, [pc, #232]	; (d467c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4592:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4594:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4596:	bf3f      	itttt	cc
   d4598:	ebc3 0e00 	rsbcc	lr, r3, r0
   d459c:	21ff      	movcc	r1, #255	; 0xff
   d459e:	fa41 f10e 	asrcc.w	r1, r1, lr
   d45a2:	400e      	andcc	r6, r1
   d45a4:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d45a6:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d45a8:	bf0c      	ite	eq
   d45aa:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d45ac:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d45ae:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d45b0:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d45b2:	d360      	bcc.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d45b4:	1a18      	subs	r0, r3, r0
   d45b6:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d45b8:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d45ba:	2b07      	cmp	r3, #7
   d45bc:	d917      	bls.n	d45ee <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d45be:	2d01      	cmp	r5, #1
   d45c0:	bf0c      	ite	eq
   d45c2:	20ff      	moveq	r0, #255	; 0xff
   d45c4:	2000      	movne	r0, #0
   d45c6:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d45ca:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d45cc:	3a08      	subs	r2, #8
   d45ce:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d45d0:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d45d2:	f801 0c80 	strb.w	r0, [r1, #-128]
   d45d6:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d45da:	d8f7      	bhi.n	d45cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d45dc:	f1a3 0208 	sub.w	r2, r3, #8
   d45e0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d45e4:	3201      	adds	r2, #1
   d45e6:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d45ea:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d45ee:	2b00      	cmp	r3, #0
   d45f0:	d041      	beq.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d45f2:	4a23      	ldr	r2, [pc, #140]	; (d4680 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d45f4:	5cd2      	ldrb	r2, [r2, r3]
   d45f6:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d45f8:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d45fa:	bf0c      	ite	eq
   d45fc:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d45fe:	4393      	bicne	r3, r2
   d4600:	7023      	strb	r3, [r4, #0]
   d4602:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4606:	2a00      	cmp	r2, #0
   d4608:	db35      	blt.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d460a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d460e:	4294      	cmp	r4, r2
   d4610:	dd31      	ble.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4612:	2900      	cmp	r1, #0
    w += x;
   d4614:	bfbc      	itt	lt
   d4616:	18c9      	addlt	r1, r1, r3
   d4618:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d461a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d461e:	bfb8      	it	lt
   d4620:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4622:	18ce      	adds	r6, r1, r3
   d4624:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4626:	bfc4      	itt	gt
   d4628:	1a63      	subgt	r3, r4, r1
   d462a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d462c:	2b00      	cmp	r3, #0
   d462e:	dd22      	ble.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4630:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4632:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4636:	4810      	ldr	r0, [pc, #64]	; (d4678 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4638:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d463c:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d463e:	2001      	movs	r0, #1
   d4640:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4644:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4646:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4648:	d109      	bne.n	d465e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d464a:	3b01      	subs	r3, #1
   d464c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d464e:	1c5c      	adds	r4, r3, #1
   d4650:	d011      	beq.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4652:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4656:	4310      	orrs	r0, r2
   d4658:	f801 0c01 	strb.w	r0, [r1, #-1]
   d465c:	e7f5      	b.n	d464a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d465e:	43d2      	mvns	r2, r2
   d4660:	b2d2      	uxtb	r2, r2
   d4662:	3b01      	subs	r3, #1
   d4664:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4666:	1c58      	adds	r0, r3, #1
   d4668:	d005      	beq.n	d4676 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d466a:	f811 0b01 	ldrb.w	r0, [r1], #1
   d466e:	4010      	ands	r0, r2
   d4670:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4674:	e7f5      	b.n	d4662 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4676:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4678:	2003dd18 	.word	0x2003dd18
   d467c:	2003dd10 	.word	0x2003dd10
   d4680:	2003dd08 	.word	0x2003dd08

000d4684 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4684:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4686:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4688:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d468c:	2c02      	cmp	r4, #2
   d468e:	d008      	beq.n	d46a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4690:	2c03      	cmp	r4, #3
   d4692:	d00f      	beq.n	d46b4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4694:	2c01      	cmp	r4, #1
   d4696:	d112      	bne.n	d46be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4698:	8904      	ldrh	r4, [r0, #8]
   d469a:	1ae4      	subs	r4, r4, r3
   d469c:	1aa2      	subs	r2, r4, r2
   d469e:	b212      	sxth	r2, r2
      break;
   d46a0:	e06d      	b.n	d477e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d46a2:	8904      	ldrh	r4, [r0, #8]
   d46a4:	3c01      	subs	r4, #1
   d46a6:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d46a8:	8944      	ldrh	r4, [r0, #10]
   d46aa:	1ae4      	subs	r4, r4, r3
   d46ac:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d46ae:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d46b0:	b212      	sxth	r2, r2
      break;
   d46b2:	e004      	b.n	d46be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d46b4:	8944      	ldrh	r4, [r0, #10]
   d46b6:	3c01      	subs	r4, #1
   d46b8:	1a61      	subs	r1, r4, r1
   d46ba:	b209      	sxth	r1, r1
      break;
   d46bc:	e05f      	b.n	d477e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d46be:	2900      	cmp	r1, #0
   d46c0:	db5c      	blt.n	d477c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d46c2:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d46c6:	428c      	cmp	r4, r1
   d46c8:	f340 8091 	ble.w	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d46cc:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d46ce:	bfbc      	itt	lt
   d46d0:	18d2      	addlt	r2, r2, r3
   d46d2:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d46d4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d46d8:	bfb8      	it	lt
   d46da:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d46dc:	18d4      	adds	r4, r2, r3
   d46de:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d46e0:	bfc4      	itt	gt
   d46e2:	1a83      	subgt	r3, r0, r2
   d46e4:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d46e6:	2b00      	cmp	r3, #0
   d46e8:	f340 8081 	ble.w	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d46ec:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d46ee:	4e40      	ldr	r6, [pc, #256]	; (d47f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d46f0:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d46f2:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d46f4:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d46f8:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d46fc:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4700:	d017      	beq.n	d4732 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4702:	f1c4 0408 	rsb	r4, r4, #8
   d4706:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4708:	4c3a      	ldr	r4, [pc, #232]	; (d47f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d470a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d470c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d470e:	bf3f      	itttt	cc
   d4710:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4714:	24ff      	movcc	r4, #255	; 0xff
   d4716:	fa44 f40e 	asrcc.w	r4, r4, lr
   d471a:	4027      	andcc	r7, r4
   d471c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d471e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4720:	bf0c      	ite	eq
   d4722:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4724:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4726:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4728:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d472a:	d360      	bcc.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d472c:	1a10      	subs	r0, r2, r0
   d472e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4730:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4732:	2a07      	cmp	r2, #7
   d4734:	d917      	bls.n	d4766 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4736:	2d01      	cmp	r5, #1
   d4738:	bf0c      	ite	eq
   d473a:	24ff      	moveq	r4, #255	; 0xff
   d473c:	2400      	movne	r4, #0
   d473e:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4742:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4744:	3908      	subs	r1, #8
   d4746:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4748:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d474a:	f800 4c80 	strb.w	r4, [r0, #-128]
   d474e:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4752:	d8f7      	bhi.n	d4744 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4754:	f1a2 0108 	sub.w	r1, r2, #8
   d4758:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d475c:	3101      	adds	r1, #1
   d475e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4762:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4766:	2a00      	cmp	r2, #0
   d4768:	d041      	beq.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d476a:	4923      	ldr	r1, [pc, #140]	; (d47f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d476c:	5c89      	ldrb	r1, [r1, r2]
   d476e:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4770:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4772:	bf0c      	ite	eq
   d4774:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4776:	438a      	bicne	r2, r1
   d4778:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d477a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d477c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d477e:	2900      	cmp	r1, #0
   d4780:	db35      	blt.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4782:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4786:	428c      	cmp	r4, r1
   d4788:	dd31      	ble.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d478a:	2a00      	cmp	r2, #0
    w += x;
   d478c:	bfbc      	itt	lt
   d478e:	18d2      	addlt	r2, r2, r3
   d4790:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4792:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4796:	bfb8      	it	lt
   d4798:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d479a:	18d6      	adds	r6, r2, r3
   d479c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d479e:	bfc4      	itt	gt
   d47a0:	1aa3      	subgt	r3, r4, r2
   d47a2:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d47a4:	2b00      	cmp	r3, #0
   d47a6:	dd22      	ble.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d47a8:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d47aa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d47ae:	4810      	ldr	r0, [pc, #64]	; (d47f0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d47b0:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d47b4:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d47b6:	2201      	movs	r2, #1
   d47b8:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d47bc:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d47be:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d47c0:	d109      	bne.n	d47d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d47c2:	1e5a      	subs	r2, r3, #1
   d47c4:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d47c6:	1c5c      	adds	r4, r3, #1
   d47c8:	d011      	beq.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d47ca:	f810 2b01 	ldrb.w	r2, [r0], #1
   d47ce:	430a      	orrs	r2, r1
   d47d0:	f800 2c01 	strb.w	r2, [r0, #-1]
   d47d4:	e7f5      	b.n	d47c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d47d6:	43c9      	mvns	r1, r1
   d47d8:	b2c9      	uxtb	r1, r1
   d47da:	1e5a      	subs	r2, r3, #1
   d47dc:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d47de:	1c5a      	adds	r2, r3, #1
   d47e0:	d005      	beq.n	d47ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d47e2:	f810 2b01 	ldrb.w	r2, [r0], #1
   d47e6:	400a      	ands	r2, r1
   d47e8:	f800 2c01 	strb.w	r2, [r0, #-1]
   d47ec:	e7f5      	b.n	d47da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d47ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47f0:	2003dd18 	.word	0x2003dd18
   d47f4:	2003dd10 	.word	0x2003dd10
   d47f8:	2003dd08 	.word	0x2003dd08

000d47fc <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d47fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d47fe:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4800:	4606      	mov	r6, r0
   d4802:	4614      	mov	r4, r2
   d4804:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4806:	db3f      	blt.n	d4888 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4808:	f000 fbbc 	bl	d4f84 <_ZN12Adafruit_GFX5widthEv>
   d480c:	4285      	cmp	r5, r0
   d480e:	da3b      	bge.n	d4888 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4810:	2c00      	cmp	r4, #0
   d4812:	db39      	blt.n	d4888 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4814:	4630      	mov	r0, r6
   d4816:	f000 fbb8 	bl	d4f8a <_ZN12Adafruit_GFX6heightEv>
   d481a:	4284      	cmp	r4, r0
   d481c:	da34      	bge.n	d4888 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d481e:	4630      	mov	r0, r6
   d4820:	f000 fbae 	bl	d4f80 <_ZN12Adafruit_GFX11getRotationEv>
   d4824:	2802      	cmp	r0, #2
   d4826:	d127      	bne.n	d4878 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4828:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d482a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d482c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d482e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4830:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d4832:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4834:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4836:	b204      	sxth	r4, r0
   d4838:	e006      	b.n	d4848 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d483a:	2801      	cmp	r0, #1
   d483c:	d104      	bne.n	d4848 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d483e:	8933      	ldrh	r3, [r6, #8]
   d4840:	3b01      	subs	r3, #1
   d4842:	1b1b      	subs	r3, r3, r4
   d4844:	462c      	mov	r4, r5
   d4846:	b21d      	sxth	r5, r3
   d4848:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d484a:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d484c:	fb94 f0f0 	sdiv	r0, r4, r0
   d4850:	b200      	sxth	r0, r0
   d4852:	4b0e      	ldr	r3, [pc, #56]	; (d488c <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4854:	f004 0207 	and.w	r2, r4, #7
   d4858:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d485c:	d104      	bne.n	d4868 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d485e:	4097      	lsls	r7, r2
   d4860:	5c5a      	ldrb	r2, [r3, r1]
   d4862:	4317      	orrs	r7, r2
   d4864:	545f      	strb	r7, [r3, r1]
   d4866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4868:	5c58      	ldrb	r0, [r3, r1]
   d486a:	2701      	movs	r7, #1
   d486c:	fa07 f202 	lsl.w	r2, r7, r2
   d4870:	ea20 0202 	bic.w	r2, r0, r2
   d4874:	545a      	strb	r2, [r3, r1]
   d4876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4878:	2803      	cmp	r0, #3
   d487a:	d1de      	bne.n	d483a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d487c:	8973      	ldrh	r3, [r6, #10]
   d487e:	3b01      	subs	r3, #1
   d4880:	1b5b      	subs	r3, r3, r5
   d4882:	4625      	mov	r5, r4
   d4884:	b21c      	sxth	r4, r3
   d4886:	e7df      	b.n	d4848 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d4888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d488a:	bf00      	nop
   d488c:	2003dd18 	.word	0x2003dd18

000d4890 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4890:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4892:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d4894:	4604      	mov	r4, r0
   d4896:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d4898:	2180      	movs	r1, #128	; 0x80
   d489a:	f000 fa87 	bl	d4dac <_ZN12Adafruit_GFXC1Ess>
   d489e:	4b06      	ldr	r3, [pc, #24]	; (d48b8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d48a0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d48a2:	23ff      	movs	r3, #255	; 0xff
   d48a4:	7763      	strb	r3, [r4, #29]
   d48a6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d48aa:	77e3      	strb	r3, [r4, #31]
   d48ac:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d48ae:	f884 5020 	strb.w	r5, [r4, #32]
}
   d48b2:	4620      	mov	r0, r4
   d48b4:	bd38      	pop	{r3, r4, r5, pc}
   d48b6:	bf00      	nop
   d48b8:	000d83f4 	.word	0x000d83f4

000d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d48bc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d48be:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d48c2:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d48c4:	4604      	mov	r4, r0
   d48c6:	460d      	mov	r5, r1
  if (sid != -1)
   d48c8:	d028      	beq.n	d491c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d48ca:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d48ce:	2101      	movs	r1, #1
   d48d0:	b280      	uxth	r0, r0
   d48d2:	f002 fc98 	bl	d7206 <digitalWrite>
    digitalWrite(dc, LOW);
   d48d6:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d48da:	2100      	movs	r1, #0
   d48dc:	b280      	uxth	r0, r0
   d48de:	f002 fc92 	bl	d7206 <digitalWrite>
    digitalWrite(cs, LOW);
   d48e2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d48e6:	2100      	movs	r1, #0
   d48e8:	b280      	uxth	r0, r0
   d48ea:	f002 fc8c 	bl	d7206 <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d48ee:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d48f2:	b12b      	cbz	r3, d4900 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    (void)SPI.transfer(d);
   d48f4:	f002 fd00 	bl	d72f8 <_ZN8particle7globals11instanceSpiEv>
   d48f8:	4629      	mov	r1, r5
   d48fa:	f001 fab7 	bl	d5e6c <_ZN8SPIClass8transferEh>
   d48fe:	e005      	b.n	d490c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4900:	462b      	mov	r3, r5
   d4902:	2201      	movs	r2, #1
   d4904:	7fa1      	ldrb	r1, [r4, #30]
   d4906:	7f60      	ldrb	r0, [r4, #29]
   d4908:	f002 fcd3 	bl	d72b2 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d490c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4910:	2101      	movs	r1, #1
   d4912:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4918:	f002 bc75 	b.w	d7206 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d491c:	f002 fd26 	bl	d736c <_Z19__fetch_global_Wirev>
   d4920:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4924:	f001 ffc6 	bl	d68b4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4928:	f002 fd20 	bl	d736c <_Z19__fetch_global_Wirev>
   d492c:	6803      	ldr	r3, [r0, #0]
   d492e:	2100      	movs	r1, #0
   d4930:	689b      	ldr	r3, [r3, #8]
   d4932:	4798      	blx	r3
    Wire.write(c);
   d4934:	f002 fd1a 	bl	d736c <_Z19__fetch_global_Wirev>
   d4938:	6803      	ldr	r3, [r0, #0]
   d493a:	4629      	mov	r1, r5
   d493c:	689b      	ldr	r3, [r3, #8]
   d493e:	4798      	blx	r3
    Wire.endTransmission();
   d4940:	f002 fd14 	bl	d736c <_Z19__fetch_global_Wirev>
  }
}
   d4944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4948:	f001 bfbb 	b.w	d68c2 <_ZN7TwoWire15endTransmissionEv>

000d494c <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d494c:	b538      	push	{r3, r4, r5, lr}
   d494e:	4604      	mov	r4, r0
   d4950:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4952:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4954:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4958:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d495a:	3301      	adds	r3, #1
   d495c:	d037      	beq.n	d49ce <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d495e:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4962:	2101      	movs	r1, #1
   d4964:	b280      	uxth	r0, r0
   d4966:	f002 fc3d 	bl	d71e4 <pinMode>
    pinMode(cs, OUTPUT);
   d496a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d496e:	2101      	movs	r1, #1
   d4970:	b280      	uxth	r0, r0
   d4972:	f002 fc37 	bl	d71e4 <pinMode>
    if (!hwSPI){
   d4976:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d497a:	b95b      	cbnz	r3, d4994 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d497c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4980:	2101      	movs	r1, #1
   d4982:	b280      	uxth	r0, r0
   d4984:	f002 fc2e 	bl	d71e4 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4988:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d498c:	2101      	movs	r1, #1
   d498e:	b280      	uxth	r0, r0
   d4990:	f002 fc28 	bl	d71e4 <pinMode>
    	}
    if (hwSPI){
   d4994:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4998:	b1eb      	cbz	r3, d49d6 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d499a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d499e:	2101      	movs	r1, #1
   d49a0:	b280      	uxth	r0, r0
   d49a2:	f002 fc30 	bl	d7206 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d49a6:	f002 fca7 	bl	d72f8 <_ZN8particle7globals11instanceSpiEv>
   d49aa:	2101      	movs	r1, #1
   d49ac:	f001 f9cf 	bl	d5d4e <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d49b0:	f002 fca2 	bl	d72f8 <_ZN8particle7globals11instanceSpiEv>
   d49b4:	2110      	movs	r1, #16
   d49b6:	f001 fa35 	bl	d5e24 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d49ba:	f002 fc9d 	bl	d72f8 <_ZN8particle7globals11instanceSpiEv>
   d49be:	2100      	movs	r1, #0
   d49c0:	f001 f9d6 	bl	d5d70 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d49c4:	f002 fc98 	bl	d72f8 <_ZN8particle7globals11instanceSpiEv>
   d49c8:	f001 f9b0 	bl	d5d2c <_ZN8SPIClass5beginEv>
   d49cc:	e003      	b.n	d49d6 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d49ce:	f002 fccd 	bl	d736c <_Z19__fetch_global_Wirev>
   d49d2:	f001 ff65 	bl	d68a0 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d49d6:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d49da:	2101      	movs	r1, #1
   d49dc:	b280      	uxth	r0, r0
   d49de:	f002 fc01 	bl	d71e4 <pinMode>
  digitalWrite(rst, HIGH);
   d49e2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d49e6:	2101      	movs	r1, #1
   d49e8:	b280      	uxth	r0, r0
   d49ea:	f002 fc0c 	bl	d7206 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d49ee:	2001      	movs	r0, #1
   d49f0:	f001 fcde 	bl	d63b0 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d49f4:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d49f8:	2100      	movs	r1, #0
   d49fa:	b280      	uxth	r0, r0
   d49fc:	f002 fc03 	bl	d7206 <digitalWrite>
  // wait 10ms
  delay(10);
   d4a00:	200a      	movs	r0, #10
   d4a02:	f001 fcd5 	bl	d63b0 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4a06:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4a0a:	2101      	movs	r1, #1
   d4a0c:	b280      	uxth	r0, r0
   d4a0e:	f002 fbfa 	bl	d7206 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4a12:	4620      	mov	r0, r4
   d4a14:	21ae      	movs	r1, #174	; 0xae
   d4a16:	f7ff ff51 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4a1a:	4620      	mov	r0, r4
   d4a1c:	21d5      	movs	r1, #213	; 0xd5
   d4a1e:	f7ff ff4d 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4a22:	4620      	mov	r0, r4
   d4a24:	2180      	movs	r1, #128	; 0x80
   d4a26:	f7ff ff49 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4a2a:	4620      	mov	r0, r4
   d4a2c:	21a8      	movs	r1, #168	; 0xa8
   d4a2e:	f7ff ff45 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4a32:	4620      	mov	r0, r4
   d4a34:	213f      	movs	r1, #63	; 0x3f
   d4a36:	f7ff ff41 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	21d3      	movs	r1, #211	; 0xd3
   d4a3e:	f7ff ff3d 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4a42:	4620      	mov	r0, r4
   d4a44:	2100      	movs	r1, #0
   d4a46:	f7ff ff39 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4a4a:	4620      	mov	r0, r4
   d4a4c:	2140      	movs	r1, #64	; 0x40
   d4a4e:	f7ff ff35 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4a52:	218d      	movs	r1, #141	; 0x8d
   d4a54:	4620      	mov	r0, r4
   d4a56:	f7ff ff31 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4a5a:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4a5c:	bf0c      	ite	eq
   d4a5e:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4a60:	2114      	movne	r1, #20
   d4a62:	4620      	mov	r0, r4
   d4a64:	f7ff ff2a 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4a68:	4620      	mov	r0, r4
   d4a6a:	2120      	movs	r1, #32
   d4a6c:	f7ff ff26 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4a70:	4620      	mov	r0, r4
   d4a72:	2100      	movs	r1, #0
   d4a74:	f7ff ff22 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4a78:	4620      	mov	r0, r4
   d4a7a:	21a1      	movs	r1, #161	; 0xa1
   d4a7c:	f7ff ff1e 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4a80:	4620      	mov	r0, r4
   d4a82:	21c8      	movs	r1, #200	; 0xc8
   d4a84:	f7ff ff1a 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4a88:	4620      	mov	r0, r4
   d4a8a:	21da      	movs	r1, #218	; 0xda
   d4a8c:	f7ff ff16 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4a90:	4620      	mov	r0, r4
   d4a92:	2112      	movs	r1, #18
   d4a94:	f7ff ff12 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4a98:	2181      	movs	r1, #129	; 0x81
   d4a9a:	4620      	mov	r0, r4
   d4a9c:	f7ff ff0e 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4aa0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4aa2:	bf0c      	ite	eq
   d4aa4:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4aa6:	21cf      	movne	r1, #207	; 0xcf
   d4aa8:	4620      	mov	r0, r4
   d4aaa:	f7ff ff07 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4aae:	21d9      	movs	r1, #217	; 0xd9
   d4ab0:	4620      	mov	r0, r4
   d4ab2:	f7ff ff03 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4ab6:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4ab8:	bf0c      	ite	eq
   d4aba:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d4abc:	21f1      	movne	r1, #241	; 0xf1
   d4abe:	4620      	mov	r0, r4
   d4ac0:	f7ff fefc 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	21db      	movs	r1, #219	; 0xdb
   d4ac8:	f7ff fef8 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d4acc:	4620      	mov	r0, r4
   d4ace:	2140      	movs	r1, #64	; 0x40
   d4ad0:	f7ff fef4 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	21a4      	movs	r1, #164	; 0xa4
   d4ad8:	f7ff fef0 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4adc:	4620      	mov	r0, r4
   d4ade:	21a6      	movs	r1, #166	; 0xa6
   d4ae0:	f7ff feec 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4ae4:	4620      	mov	r0, r4
   d4ae6:	21af      	movs	r1, #175	; 0xaf
}
   d4ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4aec:	f7ff bee6 	b.w	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d4af0 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4af4:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4af6:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4af8:	f7ff fee0 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4afc:	2100      	movs	r1, #0
   d4afe:	4620      	mov	r0, r4
   d4b00:	f7ff fedc 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4b04:	217f      	movs	r1, #127	; 0x7f
   d4b06:	4620      	mov	r0, r4
   d4b08:	f7ff fed8 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4b0c:	2122      	movs	r1, #34	; 0x22
   d4b0e:	4620      	mov	r0, r4
   d4b10:	f7ff fed4 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4b14:	2100      	movs	r1, #0
   d4b16:	4620      	mov	r0, r4
   d4b18:	f7ff fed0 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4b1c:	2107      	movs	r1, #7
   d4b1e:	4620      	mov	r0, r4
   d4b20:	f7ff fecc 	bl	d48bc <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4b24:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4b28:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4be8 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d4b2c:	3301      	adds	r3, #1
   d4b2e:	d035      	beq.n	d4b9c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4b30:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4b34:	2101      	movs	r1, #1
   d4b36:	b280      	uxth	r0, r0
   d4b38:	f002 fb65 	bl	d7206 <digitalWrite>
    digitalWrite(dc, HIGH);
   d4b3c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4b40:	2101      	movs	r1, #1
   d4b42:	b280      	uxth	r0, r0
   d4b44:	f002 fb5f 	bl	d7206 <digitalWrite>
    digitalWrite(cs, LOW);
   d4b48:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4b4c:	2100      	movs	r1, #0
   d4b4e:	b280      	uxth	r0, r0
   d4b50:	f002 fb59 	bl	d7206 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4b54:	2001      	movs	r0, #1
   d4b56:	f000 fe33 	bl	d57c0 <HAL_Delay_Microseconds>
   d4b5a:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4b5c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4b60:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4b64:	b12b      	cbz	r3, d4b72 <_ZN16Adafruit_SSD13067displayEv+0x82>
    (void)SPI.transfer(d);
   d4b66:	f002 fbc7 	bl	d72f8 <_ZN8particle7globals11instanceSpiEv>
   d4b6a:	4631      	mov	r1, r6
   d4b6c:	f001 f97e 	bl	d5e6c <_ZN8SPIClass8transferEh>
   d4b70:	e005      	b.n	d4b7e <_ZN16Adafruit_SSD13067displayEv+0x8e>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4b72:	4633      	mov	r3, r6
   d4b74:	2201      	movs	r2, #1
   d4b76:	7fa1      	ldrb	r1, [r4, #30]
   d4b78:	7f60      	ldrb	r0, [r4, #29]
   d4b7a:	f002 fb9a 	bl	d72b2 <shiftOut>
   d4b7e:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4b80:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4b84:	d1ea      	bne.n	d4b5c <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4b86:	2001      	movs	r0, #1
   d4b88:	f000 fe1a 	bl	d57c0 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4b8c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4b90:	2101      	movs	r1, #1
   d4b92:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4b94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4b98:	f002 bb35 	b.w	d7206 <digitalWrite>
   d4b9c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d4b9e:	f002 fbe5 	bl	d736c <_Z19__fetch_global_Wirev>
   d4ba2:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4ba6:	f001 fe85 	bl	d68b4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4baa:	f002 fbdf 	bl	d736c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4bae:	6803      	ldr	r3, [r0, #0]
   d4bb0:	2140      	movs	r1, #64	; 0x40
   d4bb2:	689b      	ldr	r3, [r3, #8]
   d4bb4:	4798      	blx	r3
   d4bb6:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4bb8:	f002 fbd8 	bl	d736c <_Z19__fetch_global_Wirev>
   d4bbc:	19af      	adds	r7, r5, r6
   d4bbe:	6803      	ldr	r3, [r0, #0]
   d4bc0:	b2bf      	uxth	r7, r7
   d4bc2:	689b      	ldr	r3, [r3, #8]
   d4bc4:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4bc8:	3601      	adds	r6, #1
   d4bca:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d4bcc:	2e10      	cmp	r6, #16
   d4bce:	d1f3      	bne.n	d4bb8 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d4bd0:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4bd2:	f002 fbcb 	bl	d736c <_Z19__fetch_global_Wirev>
   d4bd6:	b2ad      	uxth	r5, r5
   d4bd8:	f001 fe73 	bl	d68c2 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4bdc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4be0:	d1dd      	bne.n	d4b9e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4be6:	bf00      	nop
   d4be8:	2003dd18 	.word	0x2003dd18

000d4bec <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4bf0:	2100      	movs	r1, #0
   d4bf2:	4801      	ldr	r0, [pc, #4]	; (d4bf8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4bf4:	f002 beca 	b.w	d798c <memset>
   d4bf8:	2003dd18 	.word	0x2003dd18

000d4bfc <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4bfc:	f000 bd40 	b.w	d5680 <HAL_Pin_Map>

000d4c00 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c04:	b085      	sub	sp, #20
   d4c06:	461e      	mov	r6, r3
   d4c08:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4c0c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4c10:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4c12:	1a9a      	subs	r2, r3, r2
   d4c14:	2a00      	cmp	r2, #0
   d4c16:	bfb8      	it	lt
   d4c18:	4252      	neglt	r2, r2
   d4c1a:	9200      	str	r2, [sp, #0]
   d4c1c:	1a72      	subs	r2, r6, r1
   d4c1e:	2a00      	cmp	r2, #0
   d4c20:	bfb8      	it	lt
   d4c22:	4252      	neglt	r2, r2
   d4c24:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4c26:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4c28:	9a00      	ldr	r2, [sp, #0]
   d4c2a:	9901      	ldr	r1, [sp, #4]
   d4c2c:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4c2e:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4c30:	dd05      	ble.n	d4c3e <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d4c32:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4c34:	461e      	mov	r6, r3
   d4c36:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4c38:	4622      	mov	r2, r4
    swap(x0, y0);
   d4c3a:	462c      	mov	r4, r5
   d4c3c:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4c3e:	42b4      	cmp	r4, r6
   d4c40:	dd05      	ble.n	d4c4e <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4c42:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4c44:	461d      	mov	r5, r3
   d4c46:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4c48:	4622      	mov	r2, r4
   d4c4a:	4634      	mov	r4, r6
   d4c4c:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4c4e:	1b5a      	subs	r2, r3, r5
   d4c50:	2a00      	cmp	r2, #0
   d4c52:	bfb8      	it	lt
   d4c54:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4c56:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4c5a:	429d      	cmp	r5, r3
   d4c5c:	bfb4      	ite	lt
   d4c5e:	2301      	movlt	r3, #1
   d4c60:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4c64:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4c68:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4c6a:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4c6c:	fa0f f788 	sxth.w	r7, r8
   d4c70:	2202      	movs	r2, #2
   d4c72:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4c76:	42b4      	cmp	r4, r6
   d4c78:	dc1f      	bgt.n	d4cba <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4c7a:	9a01      	ldr	r2, [sp, #4]
   d4c7c:	9b00      	ldr	r3, [sp, #0]
   d4c7e:	4293      	cmp	r3, r2
   d4c80:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4c84:	bfc8      	it	gt
   d4c86:	4622      	movgt	r2, r4
   d4c88:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4c8c:	bfc8      	it	gt
   d4c8e:	4629      	movgt	r1, r5
   d4c90:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4c92:	bfdc      	itt	le
   d4c94:	462a      	movle	r2, r5
   d4c96:	4621      	movle	r1, r4
   d4c98:	4648      	mov	r0, r9
   d4c9a:	47d8      	blx	fp
    }
    err -= dy;
   d4c9c:	9b03      	ldr	r3, [sp, #12]
   d4c9e:	1aff      	subs	r7, r7, r3
   d4ca0:	b2bb      	uxth	r3, r7
   d4ca2:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4ca4:	2f00      	cmp	r7, #0
   d4ca6:	da05      	bge.n	d4cb4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4ca8:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4caa:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4cae:	4415      	add	r5, r2
   d4cb0:	b22d      	sxth	r5, r5
      err += dx;
   d4cb2:	b23f      	sxth	r7, r7
   d4cb4:	3401      	adds	r4, #1
   d4cb6:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4cb8:	e7dd      	b.n	d4c76 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4cba:	b005      	add	sp, #20
   d4cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4cc0 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4cc0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4cc4:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4cc8:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4cca:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4cce:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4cd0:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4cd2:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4cd4:	4691      	mov	r9, r2
   d4cd6:	460d      	mov	r5, r1
   d4cd8:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4cda:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4cdc:	6823      	ldr	r3, [r4, #0]
   d4cde:	9600      	str	r6, [sp, #0]
   d4ce0:	f10a 32ff 	add.w	r2, sl, #4294967295
   d4ce4:	444a      	add	r2, r9
   d4ce6:	69df      	ldr	r7, [r3, #28]
   d4ce8:	4629      	mov	r1, r5
   d4cea:	4643      	mov	r3, r8
   d4cec:	4620      	mov	r0, r4
   d4cee:	b212      	sxth	r2, r2
   d4cf0:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4cf2:	6823      	ldr	r3, [r4, #0]
   d4cf4:	9600      	str	r6, [sp, #0]
   d4cf6:	699f      	ldr	r7, [r3, #24]
   d4cf8:	464a      	mov	r2, r9
   d4cfa:	4653      	mov	r3, sl
   d4cfc:	4629      	mov	r1, r5
   d4cfe:	4620      	mov	r0, r4
   d4d00:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4d02:	6823      	ldr	r3, [r4, #0]
   d4d04:	960a      	str	r6, [sp, #40]	; 0x28
   d4d06:	f108 31ff 	add.w	r1, r8, #4294967295
   d4d0a:	4429      	add	r1, r5
   d4d0c:	699d      	ldr	r5, [r3, #24]
   d4d0e:	464a      	mov	r2, r9
   d4d10:	4653      	mov	r3, sl
   d4d12:	b209      	sxth	r1, r1
   d4d14:	4620      	mov	r0, r4
   d4d16:	46ac      	mov	ip, r5
}
   d4d18:	b002      	add	sp, #8
   d4d1a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4d1e:	4760      	bx	ip

000d4d20 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4d22:	3b01      	subs	r3, #1
   d4d24:	4413      	add	r3, r2
   d4d26:	6804      	ldr	r4, [r0, #0]
   d4d28:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4d2c:	9501      	str	r5, [sp, #4]
   d4d2e:	b21b      	sxth	r3, r3
   d4d30:	9300      	str	r3, [sp, #0]
   d4d32:	6964      	ldr	r4, [r4, #20]
   d4d34:	460b      	mov	r3, r1
   d4d36:	47a0      	blx	r4
}
   d4d38:	b003      	add	sp, #12
   d4d3a:	bd30      	pop	{r4, r5, pc}

000d4d3c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4d3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4d3e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4d42:	6804      	ldr	r4, [r0, #0]
   d4d44:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4d48:	3b01      	subs	r3, #1
   d4d4a:	440b      	add	r3, r1
   d4d4c:	6964      	ldr	r4, [r4, #20]
   d4d4e:	b21b      	sxth	r3, r3
   d4d50:	47a0      	blx	r4
}
   d4d52:	b003      	add	sp, #12
   d4d54:	bd30      	pop	{r4, r5, pc}

000d4d56 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4d56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4d5a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4d5e:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4d62:	4605      	mov	r5, r0
   d4d64:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4d66:	460c      	mov	r4, r1
   d4d68:	eb01 0a03 	add.w	sl, r1, r3
   d4d6c:	4554      	cmp	r4, sl
   d4d6e:	da0b      	bge.n	d4d88 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4d70:	682b      	ldr	r3, [r5, #0]
   d4d72:	f8cd 9000 	str.w	r9, [sp]
   d4d76:	699e      	ldr	r6, [r3, #24]
   d4d78:	4621      	mov	r1, r4
   d4d7a:	4643      	mov	r3, r8
   d4d7c:	463a      	mov	r2, r7
   d4d7e:	4628      	mov	r0, r5
   d4d80:	3401      	adds	r4, #1
   d4d82:	47b0      	blx	r6
   d4d84:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4d86:	e7f1      	b.n	d4d6c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4d88:	b002      	add	sp, #8
   d4d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4d8e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4d8e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4d90:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4d94:	6804      	ldr	r4, [r0, #0]
   d4d96:	9101      	str	r1, [sp, #4]
   d4d98:	9200      	str	r2, [sp, #0]
   d4d9a:	2200      	movs	r2, #0
   d4d9c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4da0:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4da2:	4611      	mov	r1, r2
   d4da4:	47a0      	blx	r4
}
   d4da6:	b002      	add	sp, #8
   d4da8:	bd10      	pop	{r4, pc}

000d4daa <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4daa:	4770      	bx	lr

000d4dac <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4dac:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4dae:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4db0:	2400      	movs	r4, #0
   d4db2:	4d08      	ldr	r5, [pc, #32]	; (d4dd4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4db4:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4db6:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4db8:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4dba:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4dbe:	2201      	movs	r2, #1
   d4dc0:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4dc2:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4dc4:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4dc6:	8204      	strh	r4, [r0, #16]
   d4dc8:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4dca:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4dcc:	82c1      	strh	r1, [r0, #22]
   d4dce:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4dd0:	7682      	strb	r2, [r0, #26]
}
   d4dd2:	bd30      	pop	{r4, r5, pc}
   d4dd4:	000d842c 	.word	0x000d842c

000d4dd8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ddc:	b08f      	sub	sp, #60	; 0x3c
   d4dde:	4605      	mov	r5, r0
   d4de0:	9106      	str	r1, [sp, #24]
   d4de2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4de6:	9107      	str	r1, [sp, #28]
   d4de8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4dec:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4dee:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4df2:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4df4:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4df8:	4281      	cmp	r1, r0
   d4dfa:	dd7c      	ble.n	d4ef6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4dfc:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4e00:	4291      	cmp	r1, r2
   d4e02:	dd78      	ble.n	d4ef6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4e04:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4e06:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4e0a:	2800      	cmp	r0, #0
   d4e0c:	dd73      	ble.n	d4ef6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4e0e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4e12:	2800      	cmp	r0, #0
   d4e14:	dd6f      	ble.n	d4ef6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4e16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4e1a:	b296      	uxth	r6, r2
   d4e1c:	930c      	str	r3, [sp, #48]	; 0x30
   d4e1e:	f106 0308 	add.w	r3, r6, #8
   d4e22:	b29b      	uxth	r3, r3
   d4e24:	9109      	str	r1, [sp, #36]	; 0x24
   d4e26:	2400      	movs	r4, #0
   d4e28:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4e2a:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4e2c:	bf1c      	itt	ne
   d4e2e:	4b33      	ldrne	r3, [pc, #204]	; (d4efc <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4e30:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4e32:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4e34:	bf16      	itet	ne
   d4e36:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4e38:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4e3c:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4e40:	9604      	str	r6, [sp, #16]
   d4e42:	fa1f f388 	uxth.w	r3, r8
   d4e46:	9303      	str	r3, [sp, #12]
   d4e48:	9a03      	ldr	r2, [sp, #12]
   d4e4a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4e4e:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4e52:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4e56:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4e58:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4e5a:	920a      	str	r2, [sp, #40]	; 0x28
   d4e5c:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4e5e:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4e62:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4e64:	f019 0f01 	tst.w	r9, #1
   d4e68:	d011      	beq.n	d4e8e <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4e6a:	f1b8 0f01 	cmp.w	r8, #1
   d4e6e:	682b      	ldr	r3, [r5, #0]
   d4e70:	d103      	bne.n	d4e7a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4e72:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4e76:	9b07      	ldr	r3, [sp, #28]
   d4e78:	e014      	b.n	d4ea4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4e7a:	9a07      	ldr	r2, [sp, #28]
   d4e7c:	9201      	str	r2, [sp, #4]
   d4e7e:	f8cd a000 	str.w	sl, [sp]
   d4e82:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4e86:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4e8a:	4653      	mov	r3, sl
   d4e8c:	e018      	b.n	d4ec0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4e8e:	9b07      	ldr	r3, [sp, #28]
   d4e90:	9a08      	ldr	r2, [sp, #32]
   d4e92:	4293      	cmp	r3, r2
   d4e94:	d017      	beq.n	d4ec6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4e96:	f1b8 0f01 	cmp.w	r8, #1
   d4e9a:	682b      	ldr	r3, [r5, #0]
   d4e9c:	d107      	bne.n	d4eae <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4e9e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4ea2:	4613      	mov	r3, r2
   d4ea4:	b23a      	sxth	r2, r7
   d4ea6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4ea8:	4628      	mov	r0, r5
   d4eaa:	47d8      	blx	fp
   d4eac:	e00b      	b.n	d4ec6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4eae:	9a08      	ldr	r2, [sp, #32]
   d4eb0:	9201      	str	r2, [sp, #4]
   d4eb2:	f8cd a000 	str.w	sl, [sp]
   d4eb6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4eba:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4ebe:	4653      	mov	r3, sl
   d4ec0:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4ec2:	4628      	mov	r0, r5
   d4ec4:	47d8      	blx	fp
   d4ec6:	9b04      	ldr	r3, [sp, #16]
   d4ec8:	9a03      	ldr	r2, [sp, #12]
   d4eca:	4413      	add	r3, r2
   d4ecc:	b29b      	uxth	r3, r3
   d4ece:	9304      	str	r3, [sp, #16]
   d4ed0:	9b05      	ldr	r3, [sp, #20]
   d4ed2:	4413      	add	r3, r2
   d4ed4:	b29b      	uxth	r3, r3
   d4ed6:	3701      	adds	r7, #1
   d4ed8:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4edc:	b2bf      	uxth	r7, r7
   d4ede:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4ee0:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4ee4:	d1be      	bne.n	d4e64 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d4ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4ee8:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d4eea:	3401      	adds	r4, #1
   d4eec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4ef0:	b264      	sxtb	r4, r4
   d4ef2:	9309      	str	r3, [sp, #36]	; 0x24
   d4ef4:	d199      	bne.n	d4e2a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d4ef6:	b00f      	add	sp, #60	; 0x3c
   d4ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4efc:	000d845c 	.word	0x000d845c

000d4f00 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4f00:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d4f02:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d4f04:	b085      	sub	sp, #20
   d4f06:	4604      	mov	r4, r0
   d4f08:	460b      	mov	r3, r1

  if (c == '\n') {
   d4f0a:	d104      	bne.n	d4f16 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d4f0c:	7e02      	ldrb	r2, [r0, #24]
   d4f0e:	8a43      	ldrh	r3, [r0, #18]
   d4f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d4f14:	e023      	b.n	d4f5e <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d4f16:	290d      	cmp	r1, #13
   d4f18:	d024      	beq.n	d4f64 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d4f1a:	7e05      	ldrb	r5, [r0, #24]
   d4f1c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d4f20:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d4f24:	9502      	str	r5, [sp, #8]
   d4f26:	8ac5      	ldrh	r5, [r0, #22]
   d4f28:	9501      	str	r5, [sp, #4]
   d4f2a:	8a85      	ldrh	r5, [r0, #20]
   d4f2c:	9500      	str	r5, [sp, #0]
   d4f2e:	f7ff ff53 	bl	d4dd8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d4f32:	7e22      	ldrb	r2, [r4, #24]
   d4f34:	8a23      	ldrh	r3, [r4, #16]
   d4f36:	b291      	uxth	r1, r2
   d4f38:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d4f3c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4f40:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d4f42:	b21b      	sxth	r3, r3
   d4f44:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d4f46:	b168      	cbz	r0, d4f64 <_ZN12Adafruit_GFX5writeEh+0x64>
   d4f48:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d4f4c:	f06f 0505 	mvn.w	r5, #5
   d4f50:	fb05 0202 	mla	r2, r5, r2, r0
   d4f54:	4293      	cmp	r3, r2
   d4f56:	dd05      	ble.n	d4f64 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d4f58:	8a63      	ldrh	r3, [r4, #18]
   d4f5a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d4f5e:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d4f60:	2300      	movs	r3, #0
   d4f62:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d4f64:	2001      	movs	r0, #1
   d4f66:	b005      	add	sp, #20
   d4f68:	bd30      	pop	{r4, r5, pc}

000d4f6a <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d4f6a:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d4f6c:	8242      	strh	r2, [r0, #18]
   d4f6e:	4770      	bx	lr

000d4f70 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d4f70:	2900      	cmp	r1, #0
   d4f72:	bf08      	it	eq
   d4f74:	2101      	moveq	r1, #1
   d4f76:	7601      	strb	r1, [r0, #24]
   d4f78:	4770      	bx	lr

000d4f7a <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d4f7a:	82c1      	strh	r1, [r0, #22]
   d4f7c:	8281      	strh	r1, [r0, #20]
   d4f7e:	4770      	bx	lr

000d4f80 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d4f80:	7e40      	ldrb	r0, [r0, #25]
   d4f82:	4770      	bx	lr

000d4f84 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d4f84:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d4f88:	4770      	bx	lr

000d4f8a <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d4f8a:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d4f8e:	4770      	bx	lr

000d4f90 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4f90:	f000 bb76 	b.w	d5680 <HAL_Pin_Map>

000d4f94 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4f94:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d4f96:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d4f9a:	6803      	ldr	r3, [r0, #0]
   d4f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f9e:	4798      	blx	r3
}
   d4fa0:	3000      	adds	r0, #0
   d4fa2:	bf18      	it	ne
   d4fa4:	2001      	movne	r0, #1
   d4fa6:	bd08      	pop	{r3, pc}

000d4fa8 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d4fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4faa:	4606      	mov	r6, r0
   d4fac:	460f      	mov	r7, r1
   d4fae:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4fb0:	b1c4      	cbz	r4, d4fe4 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4fb2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4fb6:	6803      	ldr	r3, [r0, #0]
   d4fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fba:	4798      	blx	r3
   d4fbc:	b908      	cbnz	r0, d4fc2 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d4fbe:	2000      	movs	r0, #0
   d4fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (client->connected()) {
      // send 250 bytes at most at a time, can adjust this later based on Client

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
   d4fc2:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d4fc6:	2cfa      	cmp	r4, #250	; 0xfa
   d4fc8:	6803      	ldr	r3, [r0, #0]
   d4fca:	4625      	mov	r5, r4
   d4fcc:	bfa8      	it	ge
   d4fce:	25fa      	movge	r5, #250	; 0xfa
   d4fd0:	68db      	ldr	r3, [r3, #12]
   d4fd2:	462a      	mov	r2, r5
   d4fd4:	4639      	mov	r1, r7
   d4fd6:	4798      	blx	r3
   d4fd8:	b280      	uxth	r0, r0
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4fda:	1a24      	subs	r4, r4, r0

      if (ret != sendlen) {
   d4fdc:	4285      	cmp	r5, r0

      uint16_t sendlen = min(len, 250);
      //Serial.print("Sending: "); Serial.println(sendlen);
      ret = client->write(buffer, sendlen);
      DEBUG_PRINT(F("Client sendPacket returned: ")); DEBUG_PRINTLN(ret);
      len -= ret;
   d4fde:	b2a4      	uxth	r4, r4

      if (ret != sendlen) {
   d4fe0:	d0e6      	beq.n	d4fb0 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4fe2:	e7ec      	b.n	d4fbe <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
    }
  }
  return true;
   d4fe4:	2001      	movs	r0, #1
}
   d4fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fe8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
  // Return true if connected, false if not connected.
  return client->connected();
}

uint16_t Adafruit_MQTT_SPARK::readPacket(uint8_t *buffer, uint16_t maxlen,
                                          int16_t timeout) {
   d4fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4fec:	4606      	mov	r6, r0
   d4fee:	4688      	mov	r8, r1
   d4ff0:	4691      	mov	r9, r2
   d4ff2:	461f      	mov	r7, r3
   d4ff4:	461d      	mov	r5, r3
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
   d4ff6:	2400      	movs	r4, #0
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d4ff8:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4ffc:	6803      	ldr	r3, [r0, #0]
   d4ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5000:	4798      	blx	r3
   d5002:	b1d0      	cbz	r0, d503a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d5004:	2d00      	cmp	r5, #0
   d5006:	db18      	blt.n	d503a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    //DEBUG_PRINT('.');
    while (client->available()) {
   d5008:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d500c:	6803      	ldr	r3, [r0, #0]
   d500e:	691b      	ldr	r3, [r3, #16]
   d5010:	4798      	blx	r3
   d5012:	b160      	cbz	r0, d502e <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      //DEBUG_PRINT('!');
      char c = client->read();
   d5014:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d5018:	6803      	ldr	r3, [r0, #0]
   d501a:	695b      	ldr	r3, [r3, #20]
   d501c:	4798      	blx	r3
      timeout = t;  // reset the timeout
      buffer[len] = c;
   d501e:	f808 0004 	strb.w	r0, [r8, r4]
      //DEBUG_PRINTLN((uint8_t)c, HEX);
      len++;
   d5022:	3401      	adds	r4, #1
   d5024:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d5026:	454c      	cmp	r4, r9
   d5028:	d007      	beq.n	d503a <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
  while (client->connected() && (timeout >= 0)) {
    //DEBUG_PRINT('.');
    while (client->available()) {
      //DEBUG_PRINT('!');
      char c = client->read();
      timeout = t;  // reset the timeout
   d502a:	463d      	mov	r5, r7
   d502c:	e7ec      	b.n	d5008 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d502e:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5030:	200a      	movs	r0, #10
        DEBUG_PRINT(F("Read data:\t"));
        DEBUG_PRINTBUFFER(buffer, len);
        return len;
      }
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d5032:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d5034:	f001 f9bc 	bl	d63b0 <delay>
                                          int16_t timeout) {
  /* Read data until either the connection is closed, or the idle timeout is reached. */
  uint16_t len = 0;
  int16_t t = timeout;

  while (client->connected() && (timeout >= 0)) {
   d5038:	e7de      	b.n	d4ff8 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
    }
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}
   d503a:	4620      	mov	r0, r4
   d503c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5040 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
        }
    }
    return true;
}

bool Adafruit_MQTT_SPARK::connectServer(){
   d5040:	b570      	push	{r4, r5, r6, lr}
   d5042:	4604      	mov	r4, r0
  // Grab server name from flash and copy to buffer for name resolution.
  memset(buffer, 0, sizeof(buffer));
   d5044:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d5048:	2296      	movs	r2, #150	; 0x96
   d504a:	2100      	movs	r1, #0
   d504c:	4628      	mov	r0, r5
   d504e:	f002 fc9d 	bl	d798c <memset>
  strcpy((char *)buffer, servername);
   d5052:	6861      	ldr	r1, [r4, #4]
   d5054:	4628      	mov	r0, r5
   d5056:	f002 fcd3 	bl	d7a00 <strcpy>
  DEBUG_PRINT(F("Connecting to: ")); DEBUG_PRINTLN((char *)buffer);
  // Connect and check for success (0 result).
  int r = client->connect((char *)buffer, portnum);
   d505a:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d505e:	8922      	ldrh	r2, [r4, #8]
   d5060:	6803      	ldr	r3, [r0, #0]
   d5062:	4629      	mov	r1, r5
   d5064:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d5066:	2300      	movs	r3, #0
   d5068:	47b0      	blx	r6
  DEBUG_PRINT(F("Connect result: ")); DEBUG_PRINTLN(r);
  return r != 0;
}
   d506a:	3000      	adds	r0, #0
   d506c:	bf18      	it	ne
   d506e:	2001      	movne	r0, #1
   d5070:	bd70      	pop	{r4, r5, r6, pc}

000d5072 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:

bool Adafruit_MQTT_SPARK::disconnectServer() {
   d5072:	b510      	push	{r4, lr}
   d5074:	4604      	mov	r4, r0
  // Stop connection if connected and return success (stop has no indication of
  // failure).
  if (client->connected()) {
   d5076:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d507a:	6803      	ldr	r3, [r0, #0]
   d507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d507e:	4798      	blx	r3
   d5080:	b120      	cbz	r0, d508c <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d5082:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d5086:	6803      	ldr	r3, [r0, #0]
   d5088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d508a:	4798      	blx	r3
  }
  return true;
}
   d508c:	2001      	movs	r0, #1
   d508e:	bd10      	pop	{r4, pc}

000d5090 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5090:	b570      	push	{r4, r5, r6, lr}
    // Stop if already connected.
    if (!connected())
   d5092:	6803      	ldr	r3, [r0, #0]
   d5094:	689b      	ldr	r3, [r3, #8]
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#include "Adafruit_MQTT_SPARK.h"

bool Adafruit_MQTT_SPARK::Update()
{
   d5096:	4604      	mov	r4, r0
    // Stop if already connected.
    if (!connected())
   d5098:	4798      	blx	r3
   d509a:	b9c8      	cbnz	r0, d50d0 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d509c:	4620      	mov	r0, r4
   d509e:	f000 fa60 	bl	d5562 <_ZN13Adafruit_MQTT7connectEv>
   d50a2:	2504      	movs	r5, #4
   d50a4:	b170      	cbz	r0, d50c4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d50a6:	3d01      	subs	r5, #1
   d50a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d50ac:	d00a      	beq.n	d50c4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
        { // connect will return 0 for connected
            DEBUG_PRINT(connectErrorString(ret));
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
   d50ae:	4620      	mov	r0, r4
   d50b0:	f000 f8aa 	bl	d5208 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d50b4:	f241 3088 	movw	r0, #5000	; 0x1388
   d50b8:	f001 f97a 	bl	d63b0 <delay>
    if (!connected())
    {
        DEBUG_PRINT(F("Connecting to MQTT... "));
        
        uint8_t retries = 0;
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d50bc:	4620      	mov	r0, r4
   d50be:	f000 fa50 	bl	d5562 <_ZN13Adafruit_MQTT7connectEv>
   d50c2:	e7ef      	b.n	d50a4 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d50c4:	6823      	ldr	r3, [r4, #0]
   d50c6:	4620      	mov	r0, r4
   d50c8:	689b      	ldr	r3, [r3, #8]
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d50ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            DEBUG_PRINT(F("Retrying MQTT connection in 5 seconds..."));
            disconnect();
            delay(5000);  // wait 5 seconds
        }
      
        if( connected() )
   d50ce:	4718      	bx	r3
            DEBUG_PRINT(F("Failed to connect"));
            return false;
        }
    }
    return true;
}
   d50d0:	bd70      	pop	{r4, r5, r6, pc}

000d50d2 <_GLOBAL__sub_I__ZN19Adafruit_MQTT_SPARK6UpdateEv>:
   d50d2:	f000 bad5 	b.w	d5680 <HAL_Pin_Map>

000d50d6 <_ZL11stringprintPhPKct.constprop.3>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d50d6:	b570      	push	{r4, r5, r6, lr}
   d50d8:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d50da:	4608      	mov	r0, r1
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d50dc:	460e      	mov	r6, r1
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d50de:	f002 fc97 	bl	d7a10 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d50e2:	1203      	asrs	r3, r0, #8
   d50e4:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d50e6:	7060      	strb	r0, [r4, #1]
   d50e8:	b285      	uxth	r5, r0
   d50ea:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d50ec:	462a      	mov	r2, r5
   d50ee:	4631      	mov	r1, r6
   d50f0:	4620      	mov	r0, r4
   d50f2:	f002 fcce 	bl	d7a92 <strncpy>
  return p+len;
}
   d50f6:	1960      	adds	r0, r4, r5
   d50f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d50fc <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d50fc:	b530      	push	{r4, r5, lr}
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
  username = user;
   d50fe:	6103      	str	r3, [r0, #16]
  password = pass;
   d5100:	9b03      	ldr	r3, [sp, #12]


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d5102:	4d0d      	ldr	r5, [pc, #52]	; (d5138 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x3c>)
  servername = server;
  portnum = port;
   d5104:	8102      	strh	r2, [r0, #8]
  clientid = "";
  username = user;
  password = pass;
   d5106:	6143      	str	r3, [r0, #20]
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
  clientid = "";
   d5108:	4a0c      	ldr	r2, [pc, #48]	; (d513c <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x40>)


Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
   d510a:	6005      	str	r5, [r0, #0]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d510c:	2300      	movs	r3, #0

Adafruit_MQTT::Adafruit_MQTT(const char *server,
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
   d510e:	6041      	str	r1, [r0, #4]
  portnum = port;
  clientid = "";
   d5110:	60c2      	str	r2, [r0, #12]
  username = user;
  password = pass;

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d5112:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
   d5116:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
   d511a:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
   d511e:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
   d5122:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  }

  will_topic = 0;
   d5126:	6183      	str	r3, [r0, #24]
  will_payload = 0;
   d5128:	61c3      	str	r3, [r0, #28]
  will_qos = 0;
   d512a:	f880 3020 	strb.w	r3, [r0, #32]
  will_retain = 0;
   d512e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

  packet_id_counter = 0;
   d5132:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d5136:	bd30      	pop	{r4, r5, pc}
   d5138:	000d8984 	.word	0x000d8984
   d513c:	000d89ad 	.word	0x000d89ad

000d5140 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5144:	fa0f fa83 	sxth.w	sl, r3
   d5148:	6803      	ldr	r3, [r0, #0]
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d514a:	9201      	str	r2, [sp, #4]
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d514c:	699d      	ldr	r5, [r3, #24]
   d514e:	2201      	movs	r2, #1
   d5150:	4653      	mov	r3, sl
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d5152:	4606      	mov	r6, r0
   d5154:	460c      	mov	r4, r1
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d5156:	47a8      	blx	r5
  if (rlen != 1) return 0;
   d5158:	b2c0      	uxtb	r0, r0
   d515a:	2801      	cmp	r0, #1
   d515c:	d001      	beq.n	d5162 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x22>
   d515e:	2000      	movs	r0, #0
   d5160:	e034      	b.n	d51cc <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x8c>

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;
   d5162:	1c65      	adds	r5, r4, #1
   d5164:	f104 0b05 	add.w	fp, r4, #5

  uint32_t value = 0;
  uint32_t multiplier = 1;
   d5168:	4680      	mov	r8, r0
  if (rlen != 1) return 0;

  DEBUG_PRINT(F("Packet Type:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);
  pbuff++;

  uint32_t value = 0;
   d516a:	f04f 0900 	mov.w	r9, #0
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
    rlen = readPacket(pbuff, 1, timeout);
   d516e:	6833      	ldr	r3, [r6, #0]
   d5170:	699b      	ldr	r3, [r3, #24]
   d5172:	2201      	movs	r2, #1
   d5174:	461f      	mov	r7, r3
   d5176:	4629      	mov	r1, r5
   d5178:	4653      	mov	r3, sl
   d517a:	4630      	mov	r0, r6
   d517c:	47b8      	blx	r7
    if (rlen != 1) return 0;
   d517e:	b2c0      	uxtb	r0, r0
   d5180:	2801      	cmp	r0, #1
   d5182:	d1ec      	bne.n	d515e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d5184:	f815 3b01 	ldrb.w	r3, [r5], #1
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
   d5188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    intermediate *= multiplier;
    value += intermediate;
    multiplier *= 128;
    if (multiplier > (128UL*128UL*128UL)) {
   d518c:	455d      	cmp	r5, fp
    if (rlen != 1) return 0;
    encodedByte = pbuff[0]; // save the last read val
    pbuff++; // get ready for reading the next byte
    uint32_t intermediate = encodedByte & 0x7F;
    intermediate *= multiplier;
    value += intermediate;
   d518e:	fb02 9908 	mla	r9, r2, r8, r9
    multiplier *= 128;
   d5192:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d5196:	d0e2      	beq.n	d515e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>

  uint32_t value = 0;
  uint32_t multiplier = 1;
  uint8_t encodedByte;

  do {
   d5198:	061b      	lsls	r3, r3, #24
   d519a:	d4e8      	bmi.n	d516e <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x2e>
    }
  } while (encodedByte & 0x80);

  DEBUG_PRINT(F("Packet Length:\t")); DEBUG_PRINTLN(value);
  
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d519c:	9b01      	ldr	r3, [sp, #4]
   d519e:	1b2c      	subs	r4, r5, r4
   d51a0:	1b1b      	subs	r3, r3, r4
   d51a2:	3b01      	subs	r3, #1
   d51a4:	4599      	cmp	r9, r3
   d51a6:	6833      	ldr	r3, [r6, #0]
   d51a8:	d906      	bls.n	d51b8 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x78>
      DEBUG_PRINTLN(F("Packet too big for buffer"));
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d51aa:	9a01      	ldr	r2, [sp, #4]
   d51ac:	699f      	ldr	r7, [r3, #24]
   d51ae:	3a01      	subs	r2, #1
   d51b0:	1b12      	subs	r2, r2, r4
   d51b2:	4653      	mov	r3, sl
   d51b4:	b292      	uxth	r2, r2
   d51b6:	e003      	b.n	d51c0 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x80>
  } else {
    rlen = readPacket(pbuff, value, timeout);
   d51b8:	699f      	ldr	r7, [r3, #24]
   d51ba:	fa1f f289 	uxth.w	r2, r9
   d51be:	4653      	mov	r3, sl
   d51c0:	4629      	mov	r1, r5
   d51c2:	4630      	mov	r0, r6
   d51c4:	47b8      	blx	r7
   d51c6:	b2c0      	uxtb	r0, r0
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
   d51c8:	4420      	add	r0, r4
   d51ca:	b280      	uxth	r0, r0
}
   d51cc:	b003      	add	sp, #12
   d51ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d51d4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
  username = user;
  password = pass;
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d51d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51d6:	4605      	mov	r5, r0
   d51d8:	460c      	mov	r4, r1
   d51da:	4616      	mov	r6, r2
   d51dc:	461f      	mov	r7, r3
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d51de:	463b      	mov	r3, r7
   d51e0:	2296      	movs	r2, #150	; 0x96
   d51e2:	4621      	mov	r1, r4
   d51e4:	4628      	mov	r0, r5
   d51e6:	f7ff ffab 	bl	d5140 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d51ea:	b148      	cbz	r0, d5200 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>

    //DEBUG_PRINT("Packet read size: "); DEBUG_PRINTLN(len);
    // TODO: add subscription reading & call back processing here

    if ((buffer[0] >> 4) == waitforpackettype) {
   d51ec:	7823      	ldrb	r3, [r4, #0]
   d51ee:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d51f2:	d005      	beq.n	d5200 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x2c>
      //DEBUG_PRINTLN(F("Found right packet")); 
      return len;
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
   d51f4:	f001 fa6e 	bl	d66d4 <_Z16_fetch_usbserialv>
   d51f8:	4902      	ldr	r1, [pc, #8]	; (d5204 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x30>)
   d51fa:	f000 ffee 	bl	d61da <_ZN5Print7printlnEPKc>
  return connect();
}

uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
  uint16_t len;
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d51fe:	e7ee      	b.n	d51de <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0xa>
    } else {
      ERROR_PRINTLN(F("Dropped a packet"));
    }
  }
  return 0;
}
   d5200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5202:	bf00      	nop
   d5204:	000d89ae 	.word	0x000d89ae

000d5208 <_ZN13Adafruit_MQTT10disconnectEv>:
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5208:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d520a:	23e0      	movs	r3, #224	; 0xe0
   d520c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  packet[1] = 0;
   d5210:	2300      	movs	r3, #0
   d5212:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23

bool Adafruit_MQTT::disconnect() {

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d5216:	6803      	ldr	r3, [r0, #0]
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}

bool Adafruit_MQTT::disconnect() {
   d5218:	4604      	mov	r4, r0

  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
   d521a:	695b      	ldr	r3, [r3, #20]
   d521c:	2202      	movs	r2, #2
   d521e:	f100 0122 	add.w	r1, r0, #34	; 0x22
   d5222:	4798      	blx	r3
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d5224:	6823      	ldr	r3, [r4, #0]
   d5226:	4620      	mov	r0, r4
   d5228:	691b      	ldr	r3, [r3, #16]

}
   d522a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Construct and send disconnect packet.
  uint8_t len = disconnectPacket(buffer);
  if (! sendPacket(buffer, len))
    DEBUG_PRINTLN(F("Unable to send disconnect packet"));

  return disconnectServer();
   d522e:	4718      	bx	r3

000d5230 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:

  return true;

}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d5230:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   d5234:	b530      	push	{r4, r5, lr}
   d5236:	4613      	mov	r3, r2
   d5238:	f100 04cc 	add.w	r4, r0, #204	; 0xcc
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
   d523c:	f853 5f04 	ldr.w	r5, [r3, #4]!
   d5240:	428d      	cmp	r5, r1
   d5242:	d00f      	beq.n	d5264 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
}

bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d5244:	42a3      	cmp	r3, r4
   d5246:	d1f9      	bne.n	d523c <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d5248:	2300      	movs	r3, #0
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
      if (subscriptions[i] == 0) {
   d524a:	f852 4f04 	ldr.w	r4, [r2, #4]!
   d524e:	b924      	cbnz	r4, d525a <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2a>
        DEBUG_PRINT(F("Added sub ")); DEBUG_PRINTLN(i);
        subscriptions[i] = sub;
   d5250:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d5254:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
   d5258:	e004      	b.n	d5264 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
   d525a:	3301      	adds	r3, #1
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
    }
  }
  if (i==MAXSUBSCRIPTIONS) { // add to subscriptionlist
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d525c:	2b05      	cmp	r3, #5
   d525e:	d1f4      	bne.n	d524a <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
      }
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
   d5260:	2000      	movs	r0, #0
   d5262:	bd30      	pop	{r4, r5, pc}
  uint8_t i;
  // see if we are already subscribed
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i] == sub) {
      DEBUG_PRINTLN(F("Already subscribed"));
      return true;
   d5264:	2001      	movs	r0, #1
    }
  }

  DEBUG_PRINTLN(F("no more subscription space :("));
  return false;
}
   d5266:	bd30      	pop	{r4, r5, pc}

000d5268 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d526c:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d5270:	b28b      	uxth	r3, r1
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5272:	b087      	sub	sp, #28
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d5274:	2296      	movs	r2, #150	; 0x96
   d5276:	4649      	mov	r1, r9
    }
    elapsed += (endtime - starttime);
  }
}

Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d5278:	4604      	mov	r4, r0
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d527a:	f7ff ff61 	bl	d5140 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d527e:	4606      	mov	r6, r0
   d5280:	b310      	cbz	r0, d52c8 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x60>
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5282:	f894 7025 	ldrb.w	r7, [r4, #37]	; 0x25
   d5286:	b2bb      	uxth	r3, r7
   d5288:	9301      	str	r3, [sp, #4]
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d528a:	f104 0326 	add.w	r3, r4, #38	; 0x26
   d528e:	f104 0ab8 	add.w	sl, r4, #184	; 0xb8
    return NULL;  // No data available, just quit.
  DEBUG_PRINT("Packet len: "); DEBUG_PRINTLN(len); 
  DEBUG_PRINTBUFFER(buffer, len);

  // Parse out length of packet.
  topiclen = buffer[3];
   d5292:	2500      	movs	r5, #0
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d5294:	9302      	str	r3, [sp, #8]
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
    if (subscriptions[i]) {
   d5296:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d529a:	f1bb 0f00 	cmp.w	fp, #0
   d529e:	d00e      	beq.n	d52be <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
      // Skip this subscription if its name length isn't the same as the
      // received topic name.
      if (strlen(subscriptions[i]->topic) != topiclen)
   d52a0:	f8db 1000 	ldr.w	r1, [fp]
   d52a4:	9103      	str	r1, [sp, #12]
   d52a6:	4608      	mov	r0, r1
   d52a8:	f002 fbb2 	bl	d7a10 <strlen>
   d52ac:	42b8      	cmp	r0, r7
   d52ae:	4680      	mov	r8, r0
   d52b0:	9903      	ldr	r1, [sp, #12]
   d52b2:	d104      	bne.n	d52be <_ZN13Adafruit_MQTT16readSubscriptionEs+0x56>
        continue;
      // Stop if the subscription topic matches the received topic. Be careful
      // to make comparison case insensitive.
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d52b4:	463a      	mov	r2, r7
   d52b6:	9802      	ldr	r0, [sp, #8]
   d52b8:	f002 fbb2 	bl	d7a20 <strncasecmp>
   d52bc:	b128      	cbz	r0, d52ca <_ZN13Adafruit_MQTT16readSubscriptionEs+0x62>
   d52be:	3501      	adds	r5, #1
  // Parse out length of packet.
  topiclen = buffer[3];
  DEBUG_PRINT(F("Looking for subscription len ")); DEBUG_PRINTLN(topiclen);

  // Find subscription associated with this packet.
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d52c0:	2d05      	cmp	r5, #5
   d52c2:	d1e8      	bne.n	d5296 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2e>
  uint16_t i, topiclen, datalen;

  // Check if data is available to read.
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
  if (!len)
    return NULL;  // No data available, just quit.
   d52c4:	2000      	movs	r0, #0
   d52c6:	e04a      	b.n	d535e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
   d52c8:	e049      	b.n	d535e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
  // Check if it is QoS 1, TODO: we dont support QoS 2
  if ((buffer[0] & 0x6) == 0x2) {
   d52ca:	f894 a022 	ldrb.w	sl, [r4, #34]	; 0x22
   d52ce:	f00a 0a06 	and.w	sl, sl, #6
   d52d2:	f1ba 0f02 	cmp.w	sl, #2
   d52d6:	d13f      	bne.n	d5358 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf0>
    packet_id_len = 2;
    packetid = buffer[topiclen+4];
   d52d8:	19e2      	adds	r2, r4, r7
   d52da:	f892 7026 	ldrb.w	r7, [r2, #38]	; 0x26
    packetid <<= 8;
    packetid |= buffer[topiclen+5];
   d52de:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
   d52e2:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
  }

  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d52e6:	2214      	movs	r2, #20
   d52e8:	2100      	movs	r1, #0
   d52ea:	f10b 0005 	add.w	r0, fp, #5
   d52ee:	f002 fb4d 	bl	d798c <memset>

  datalen = len - topiclen - packet_id_len - 4;
   d52f2:	9b01      	ldr	r3, [sp, #4]
   d52f4:	f5c3 407f 	rsb	r0, r3, #65280	; 0xff00
   d52f8:	30fc      	adds	r0, #252	; 0xfc
   d52fa:	4406      	add	r6, r0
   d52fc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   d5300:	ebca 0606 	rsb	r6, sl, r6
   d5304:	b2b6      	uxth	r6, r6
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5306:	2e15      	cmp	r6, #21
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5308:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d530c:	f108 0104 	add.w	r1, r8, #4
  // zero out the old data
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);

  datalen = len - topiclen - packet_id_len - 4;
  if (datalen > SUBSCRIPTIONDATALEN) {
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d5310:	bf28      	it	cs
   d5312:	2613      	movcs	r6, #19
  }
  // extract out just the data, into the subscription object itself
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d5314:	4451      	add	r1, sl
   d5316:	4632      	mov	r2, r6
   d5318:	4449      	add	r1, r9
   d531a:	3005      	adds	r0, #5
   d531c:	f002 fb1b 	bl	d7956 <memmove>
  subscriptions[i]->datalen = datalen;
   d5320:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   d5324:	835e      	strh	r6, [r3, #26]
  DEBUG_PRINT(F("Data len: ")); DEBUG_PRINTLN(datalen);
  DEBUG_PRINT(F("Data: ")); DEBUG_PRINTLN((char *)subscriptions[i]->lastread);

  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d5326:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d532a:	f003 0306 	and.w	r3, r3, #6
   d532e:	2b02      	cmp	r3, #2
   d5330:	d10f      	bne.n	d5352 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xea>
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
   d5332:	f88d 3015 	strb.w	r3, [sp, #21]
  packet[2] = packetid >> 8;
   d5336:	123b      	asrs	r3, r7, #8
   d5338:	f88d 3016 	strb.w	r3, [sp, #22]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d533c:	6823      	ldr	r3, [r4, #0]

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
  packet[1] = 2;
  packet[2] = packetid >> 8;
  packet[3] = packetid;
   d533e:	f88d 7017 	strb.w	r7, [sp, #23]
  DEBUG_PRINTBUFFER(buffer, 2);
  return 2;
}

uint8_t Adafruit_MQTT::pubackPacket(uint8_t *packet, uint16_t packetid) {
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d5342:	2240      	movs	r2, #64	; 0x40
   d5344:	f88d 2014 	strb.w	r2, [sp, #20]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
    uint8_t ackpacket[4];
    
    // Construct and send puback packet.
    uint8_t len = pubackPacket(ackpacket, packetid);
    if (!sendPacket(ackpacket, len))
   d5348:	695b      	ldr	r3, [r3, #20]
   d534a:	2204      	movs	r2, #4
   d534c:	a905      	add	r1, sp, #20
   d534e:	4620      	mov	r0, r4
   d5350:	4798      	blx	r3
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
   d5352:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   d5356:	e002      	b.n	d535e <_ZN13Adafruit_MQTT16readSubscriptionEs+0xf6>
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
  uint16_t packetid=0;
   d5358:	4607      	mov	r7, r0
      }
    }
  }
  if (i==MAXSUBSCRIPTIONS) return NULL; // matching sub not found ???

  uint8_t packet_id_len = 0;
   d535a:	4682      	mov	sl, r0
   d535c:	e7c3      	b.n	d52e6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x7e>
      DEBUG_PRINT(F("Failed"));
  }

  // return the valid matching subscription
  return subscriptions[i];
}
   d535e:	b007      	add	sp, #28
   d5360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5364 <_ZN13Adafruit_MQTT13connectPacketEPh>:
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5364:	b538      	push	{r3, r4, r5, lr}
   d5366:	4604      	mov	r4, r0
  uint8_t *p = packet;
  uint16_t len;

  // fixed header, connection messsage no flags
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d5368:	4608      	mov	r0, r1
   d536a:	2310      	movs	r3, #16
   d536c:	f800 3b02 	strb.w	r3, [r0], #2
// The current MQTT spec is 3.1.1 and available here:
//   http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718028
// However this connect packet and code follows the MQTT 3.1 spec here (some
// small differences in the protocol):
//   http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#connect
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d5370:	460d      	mov	r5, r1
  // fill in packet[1] last

#if MQTT_PROTOCOL_LEVEL == 3
    p = stringprint(p, "MQIsdp");
#elif MQTT_PROTOCOL_LEVEL == 4
    p = stringprint(p, "MQTT");
   d5372:	4929      	ldr	r1, [pc, #164]	; (d5418 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d5374:	f7ff feaf 	bl	d50d6 <_ZL11stringprintPhPKct.constprop.3>
#else
    #error "MQTT level not supported"
#endif

  p[0] = MQTT_PROTOCOL_LEVEL;
   d5378:	2304      	movs	r3, #4
   d537a:	7003      	strb	r3, [r0, #0]
  p++;

  // always clean the session
  p[0] = MQTT_CONN_CLEANSESSION;
   d537c:	2302      	movs	r3, #2
   d537e:	7043      	strb	r3, [r0, #1]

  // set the will flags if needed
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d5380:	69a3      	ldr	r3, [r4, #24]
   d5382:	b1ab      	cbz	r3, d53b0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>
   d5384:	781b      	ldrb	r3, [r3, #0]
   d5386:	b19b      	cbz	r3, d53b0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x4c>

    p[0] |= MQTT_CONN_WILLFLAG;
   d5388:	2306      	movs	r3, #6
   d538a:	7043      	strb	r3, [r0, #1]

    if(will_qos == 1)
   d538c:	f894 3020 	ldrb.w	r3, [r4, #32]
   d5390:	2b01      	cmp	r3, #1
   d5392:	d101      	bne.n	d5398 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d5394:	230e      	movs	r3, #14
   d5396:	e002      	b.n	d539e <_ZN13Adafruit_MQTT13connectPacketEPh+0x3a>
    else if(will_qos == 2)
   d5398:	2b02      	cmp	r3, #2
   d539a:	d101      	bne.n	d53a0 <_ZN13Adafruit_MQTT13connectPacketEPh+0x3c>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d539c:	231e      	movs	r3, #30
   d539e:	7043      	strb	r3, [r0, #1]

    if(will_retain == 1)
   d53a0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   d53a4:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d53a6:	bf02      	ittt	eq
   d53a8:	7843      	ldrbeq	r3, [r0, #1]
   d53aa:	f043 0320 	orreq.w	r3, r3, #32
   d53ae:	7043      	strbeq	r3, [r0, #1]

  }

  if (pgm_read_byte(username) != 0)
   d53b0:	6923      	ldr	r3, [r4, #16]
   d53b2:	781b      	ldrb	r3, [r3, #0]
   d53b4:	b11b      	cbz	r3, d53be <_ZN13Adafruit_MQTT13connectPacketEPh+0x5a>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d53b6:	7843      	ldrb	r3, [r0, #1]
   d53b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d53bc:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d53be:	6963      	ldr	r3, [r4, #20]
   d53c0:	781b      	ldrb	r3, [r3, #0]
   d53c2:	b11b      	cbz	r3, d53cc <_ZN13Adafruit_MQTT13connectPacketEPh+0x68>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d53c4:	7843      	ldrb	r3, [r0, #1]
   d53c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d53ca:	7043      	strb	r3, [r0, #1]
  p++;

  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d53cc:	2301      	movs	r3, #1
   d53ce:	7083      	strb	r3, [r0, #2]
  p++;
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d53d0:	232c      	movs	r3, #44	; 0x2c
   d53d2:	70c3      	strb	r3, [r0, #3]
  p++;

  if(MQTT_PROTOCOL_LEVEL == 3) {
    p = stringprint(p, clientid, 23);  // Limit client ID to first 23 characters.
  } else {
    if (pgm_read_byte(clientid) != 0) {
   d53d4:	68e1      	ldr	r1, [r4, #12]
   d53d6:	780b      	ldrb	r3, [r1, #0]
   d53d8:	b11b      	cbz	r3, d53e2 <_ZN13Adafruit_MQTT13connectPacketEPh+0x7e>
      p = stringprint(p, clientid);
   d53da:	3004      	adds	r0, #4
   d53dc:	f7ff fe7b 	bl	d50d6 <_ZL11stringprintPhPKct.constprop.3>
   d53e0:	e002      	b.n	d53e8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x84>
    } else {
      p[0] = 0x0;
   d53e2:	7103      	strb	r3, [r0, #4]
      p++;
      p[0] = 0x0;
   d53e4:	7143      	strb	r3, [r0, #5]
      p++;
   d53e6:	3006      	adds	r0, #6
      DEBUG_PRINTLN(F("SERVER GENERATING CLIENT ID"));
    }
  }

  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d53e8:	69a1      	ldr	r1, [r4, #24]
   d53ea:	b131      	cbz	r1, d53fa <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
   d53ec:	780b      	ldrb	r3, [r1, #0]
   d53ee:	b123      	cbz	r3, d53fa <_ZN13Adafruit_MQTT13connectPacketEPh+0x96>
    p = stringprint(p, will_topic);
   d53f0:	f7ff fe71 	bl	d50d6 <_ZL11stringprintPhPKct.constprop.3>
    p = stringprint(p, will_payload);
   d53f4:	69e1      	ldr	r1, [r4, #28]
   d53f6:	f7ff fe6e 	bl	d50d6 <_ZL11stringprintPhPKct.constprop.3>
  }

  if (pgm_read_byte(username) != 0) {
   d53fa:	6921      	ldr	r1, [r4, #16]
   d53fc:	780b      	ldrb	r3, [r1, #0]
   d53fe:	b10b      	cbz	r3, d5404 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa0>
    p = stringprint(p, username);
   d5400:	f7ff fe69 	bl	d50d6 <_ZL11stringprintPhPKct.constprop.3>
  }
  if (pgm_read_byte(password) != 0) {
   d5404:	6961      	ldr	r1, [r4, #20]
   d5406:	780b      	ldrb	r3, [r1, #0]
   d5408:	b10b      	cbz	r3, d540e <_ZN13Adafruit_MQTT13connectPacketEPh+0xaa>
    p = stringprint(p, password);
   d540a:	f7ff fe64 	bl	d50d6 <_ZL11stringprintPhPKct.constprop.3>
  }

  len = p - packet;

  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d540e:	1b40      	subs	r0, r0, r5
   d5410:	b2c0      	uxtb	r0, r0
   d5412:	1e83      	subs	r3, r0, #2
   d5414:	706b      	strb	r3, [r5, #1]
  DEBUG_PRINTLN(F("MQTT connect packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5416:	bd38      	pop	{r3, r4, r5, pc}
   d5418:	000d89cd 	.word	0x000d89cd

000d541c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d541c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5420:	4605      	mov	r5, r0
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5422:	4610      	mov	r0, r2
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d5424:	460e      	mov	r6, r1
   d5426:	4691      	mov	r9, r2
   d5428:	461f      	mov	r7, r3
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d542a:	f002 faf1 	bl	d7a10 <strlen>
}


// as per http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718040
uint16_t Adafruit_MQTT::publishPacket(uint8_t *packet, const char *topic,
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d542e:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
   d5432:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d5436:	b280      	uxth	r0, r0
  if(qos > 0) { 
   d5438:	f1b8 0f00 	cmp.w	r8, #0
   d543c:	d101      	bne.n	d5442 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>
  uint8_t *p = packet;
  uint16_t len=0;

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
   d543e:	1c83      	adds	r3, r0, #2
   d5440:	e000      	b.n	d5444 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x28>
  if(qos > 0) { 
    len += 2; // qos packet id
   d5442:	1d03      	adds	r3, r0, #4
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5444:	ea4f 0248 	mov.w	r2, r8, lsl #1
   d5448:	4630      	mov	r0, r6

  // calc length of non-header data
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
   d544a:	b29b      	uxth	r3, r3
  }
  len += bLen; // payload length

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d544c:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5450:	4423      	add	r3, r4

  // Now you can start generating the packet!
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d5452:	f800 2b01 	strb.w	r2, [r0], #1
  len += 2;               // two bytes to set the topic size
  len += strlen(topic); // topic length
  if(qos > 0) { 
    len += 2; // qos packet id
  }
  len += bLen; // payload length
   d5456:	b29b      	uxth	r3, r3
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
  p++;

  // fill in packet[1] last
  do {
    uint8_t encodedByte = len % 128;
   d5458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    len /= 128;
    // if there are more data to encode, set the top bit of this byte
    if ( len > 0 ) {
   d545c:	09db      	lsrs	r3, r3, #7
      encodedByte |= 0x80;
   d545e:	bf18      	it	ne
   d5460:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
    }
    p[0] = encodedByte;
   d5464:	f800 2b01 	strb.w	r2, [r0], #1
    p++;
  } while ( len > 0 );
   d5468:	2b00      	cmp	r3, #0
   d546a:	d1f5      	bne.n	d5458 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3c>

  // topic comes before packet identifier
  p = stringprint(p, topic);
   d546c:	4649      	mov	r1, r9
   d546e:	f7ff fe32 	bl	d50d6 <_ZL11stringprintPhPKct.constprop.3>
   d5472:	4603      	mov	r3, r0

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
   d5474:	f1b8 0f00 	cmp.w	r8, #0
   d5478:	d00c      	beq.n	d5494 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x78>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d547a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d547e:	0a12      	lsrs	r2, r2, #8
   d5480:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d5482:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d5486:	7042      	strb	r2, [r0, #1]
    p+=2;

    // increment the packet id
    packet_id_counter++;
   d5488:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d548c:	3201      	adds	r2, #1

  // add packet identifier. used for checking PUBACK in QOS > 0
  if(qos > 0) {
    p[0] = (packet_id_counter >> 8) & 0xFF;
    p[1] = packet_id_counter & 0xFF;
    p+=2;
   d548e:	3302      	adds	r3, #2

    // increment the packet id
    packet_id_counter++;
   d5490:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  }

  memmove(p, data, bLen);
   d5494:	4622      	mov	r2, r4
   d5496:	4639      	mov	r1, r7
   d5498:	4618      	mov	r0, r3
   d549a:	f002 fa5c 	bl	d7956 <memmove>
  p+= bLen;
  len = p - packet;
  DEBUG_PRINTLN(F("MQTT publish packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
   d549e:	4420      	add	r0, r4
   d54a0:	1b80      	subs	r0, r0, r6
}
   d54a2:	b280      	uxth	r0, r0
   d54a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d54a8 <_ZN13Adafruit_MQTT7publishEPKcPhth>:

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d54a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d54aa:	f89d 6018 	ldrb.w	r6, [sp, #24]
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d54ae:	f100 0522 	add.w	r5, r0, #34	; 0x22

bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
}

bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d54b2:	4604      	mov	r4, r0
  // Construct and send publish packet.
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d54b4:	e88d 0048 	stmia.w	sp, {r3, r6}
   d54b8:	4613      	mov	r3, r2
   d54ba:	460a      	mov	r2, r1
   d54bc:	4629      	mov	r1, r5
   d54be:	f7ff ffad 	bl	d541c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d54c2:	6823      	ldr	r3, [r4, #0]
   d54c4:	4602      	mov	r2, r0
   d54c6:	695b      	ldr	r3, [r3, #20]
   d54c8:	4629      	mov	r1, r5
   d54ca:	4620      	mov	r0, r4
   d54cc:	4798      	blx	r3
   d54ce:	b908      	cbnz	r0, d54d4 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2c>
    return false;
   d54d0:	2000      	movs	r0, #0
   d54d2:	e017      	b.n	d5504 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>

  // If QOS level is high enough verify the response packet.
  if (qos > 0) {
   d54d4:	b1b6      	cbz	r6, d5504 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x5c>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d54d6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d54da:	2296      	movs	r2, #150	; 0x96
   d54dc:	4629      	mov	r1, r5
   d54de:	4620      	mov	r0, r4
   d54e0:	f7ff fe2e 	bl	d5140 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    DEBUG_PRINT(F("Publish QOS1+ reply:\t"));
    DEBUG_PRINTBUFFER(buffer, len);
    if (len != 4)
   d54e4:	2804      	cmp	r0, #4
   d54e6:	d1f3      	bne.n	d54d0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
      return false;
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d54e8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d54ec:	111b      	asrs	r3, r3, #4
   d54ee:	2b04      	cmp	r3, #4
   d54f0:	d1ee      	bne.n	d54d0 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
   d54f2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    packnum <<= 8;
    packnum |= buffer[3];

    // we increment the packet_id_counter right after publishing so inc here too to match
    packnum++;
    if (packnum != packet_id_counter)
   d54f4:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d54f8:	ba5b      	rev16	r3, r3
   d54fa:	3301      	adds	r3, #1
   d54fc:	b29b      	uxth	r3, r3
   d54fe:	1ac3      	subs	r3, r0, r3
   d5500:	4258      	negs	r0, r3
   d5502:	4158      	adcs	r0, r3
      return false;
  }

  return true;
}
   d5504:	b002      	add	sp, #8
   d5506:	bd70      	pop	{r4, r5, r6, pc}

000d5508 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d5508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d550a:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d550c:	4610      	mov	r0, r2
  return disconnectServer();

}


bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d550e:	461f      	mov	r7, r3
   d5510:	460e      	mov	r6, r1
   d5512:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d5514:	f002 fa7c 	bl	d7a10 <strlen>
   d5518:	9700      	str	r7, [sp, #0]
   d551a:	b283      	uxth	r3, r0
   d551c:	4622      	mov	r2, r4
   d551e:	4631      	mov	r1, r6
   d5520:	4628      	mov	r0, r5
   d5522:	f7ff ffc1 	bl	d54a8 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d5526:	b003      	add	sp, #12
   d5528:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d552a <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d552a:	b538      	push	{r3, r4, r5, lr}
   d552c:	461d      	mov	r5, r3
  uint8_t *p = packet;
  uint16_t len;

  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d552e:	2382      	movs	r3, #130	; 0x82
   d5530:	700b      	strb	r3, [r1, #0]
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}

uint8_t Adafruit_MQTT::subscribePacket(uint8_t *packet, const char *topic,
                                       uint8_t qos) {
   d5532:	460c      	mov	r4, r1
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
  // fill in packet[1] last
  p+=2;

  // packet identifier. used for checking SUBACK
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d5534:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5538:	0a09      	lsrs	r1, r1, #8
   d553a:	70a1      	strb	r1, [r4, #2]
  p[1] = packet_id_counter & 0xFF;
   d553c:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d5540:	70e3      	strb	r3, [r4, #3]
  p+=2;

  // increment the packet id
  packet_id_counter++;
   d5542:	f8b0 10b8 	ldrh.w	r1, [r0, #184]	; 0xb8
   d5546:	3101      	adds	r1, #1
   d5548:	f8a0 10b8 	strh.w	r1, [r0, #184]	; 0xb8

  p = stringprint(p, topic);
   d554c:	4611      	mov	r1, r2
   d554e:	1d20      	adds	r0, r4, #4
   d5550:	f7ff fdc1 	bl	d50d6 <_ZL11stringprintPhPKct.constprop.3>

  p[0] = qos;
   d5554:	f800 5b01 	strb.w	r5, [r0], #1
  p++;

  len = p - packet;
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d5558:	1b00      	subs	r0, r0, r4
   d555a:	b2c0      	uxtb	r0, r0
   d555c:	1e83      	subs	r3, r0, #2
   d555e:	7063      	strb	r3, [r4, #1]
  DEBUG_PRINTLN(F("MQTT subscription packet:"));
  DEBUG_PRINTBUFFER(buffer, len);
  return len;
}
   d5560:	bd38      	pop	{r3, r4, r5, pc}

000d5562 <_ZN13Adafruit_MQTT7connectEv>:

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d5562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // Connect to the server.
  if (!connectServer())
   d5566:	6803      	ldr	r3, [r0, #0]
   d5568:	68db      	ldr	r3, [r3, #12]

  packet_id_counter = 0;

}

int8_t Adafruit_MQTT::connect() {
   d556a:	4604      	mov	r4, r0
  // Connect to the server.
  if (!connectServer())
   d556c:	4798      	blx	r3
   d556e:	b918      	cbnz	r0, d5578 <_ZN13Adafruit_MQTT7connectEv+0x16>
    return -1;
   d5570:	f04f 30ff 	mov.w	r0, #4294967295
   d5574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  // Construct and send connect packet.
  uint8_t len = connectPacket(buffer);
   d5578:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d557c:	4629      	mov	r1, r5
   d557e:	4620      	mov	r0, r4
   d5580:	f7ff fef0 	bl	d5364 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d5584:	6823      	ldr	r3, [r4, #0]
   d5586:	b282      	uxth	r2, r0
   d5588:	695b      	ldr	r3, [r3, #20]
   d558a:	4629      	mov	r1, r5
   d558c:	4620      	mov	r0, r4
   d558e:	4798      	blx	r3
   d5590:	2800      	cmp	r0, #0
   d5592:	d0ed      	beq.n	d5570 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;

  // Read connect response packet and verify it
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d5594:	f241 7370 	movw	r3, #6000	; 0x1770
   d5598:	2296      	movs	r2, #150	; 0x96
   d559a:	4629      	mov	r1, r5
   d559c:	4620      	mov	r0, r4
   d559e:	f7ff fdcf 	bl	d5140 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d55a2:	b2c0      	uxtb	r0, r0
   d55a4:	2804      	cmp	r0, #4
   d55a6:	d1e3      	bne.n	d5570 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d55a8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d55aa:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d55ae:	d1df      	bne.n	d5570 <_ZN13Adafruit_MQTT7connectEv+0xe>
    return -1;
  if (buffer[3] != 0)
   d55b0:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d55b4:	b110      	cbz	r0, d55bc <_ZN13Adafruit_MQTT7connectEv+0x5a>
    return buffer[3];
   d55b6:	b240      	sxtb	r0, r0
   d55b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d55bc:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d55c0:	f104 08cc 	add.w	r8, r4, #204	; 0xcc

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;
   d55c4:	f857 3f04 	ldr.w	r3, [r7, #4]!
   d55c8:	b1fb      	cbz	r3, d560a <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d55ca:	2603      	movs	r6, #3

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
      // Construct and send subscription packet.
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d55cc:	683a      	ldr	r2, [r7, #0]
   d55ce:	4629      	mov	r1, r5
   d55d0:	7913      	ldrb	r3, [r2, #4]
   d55d2:	6812      	ldr	r2, [r2, #0]
   d55d4:	4620      	mov	r0, r4
   d55d6:	f7ff ffa8 	bl	d552a <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d55da:	6823      	ldr	r3, [r4, #0]
   d55dc:	b282      	uxth	r2, r0
   d55de:	695b      	ldr	r3, [r3, #20]
   d55e0:	4629      	mov	r1, r5
   d55e2:	4620      	mov	r0, r4
   d55e4:	4798      	blx	r3
   d55e6:	2800      	cmp	r0, #0
   d55e8:	d0c2      	beq.n	d5570 <_ZN13Adafruit_MQTT7connectEv+0xe>
      // Check for SUBACK if using MQTT 3.1.1 or higher
      // TODO: The Server is permitted to start sending PUBLISH packets matching the
      // Subscription before the Server sends the SUBACK Packet. (will really need to use callbacks - ada)

      //Serial.println("\t**looking for suback");
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d55ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d55ee:	2209      	movs	r2, #9
   d55f0:	4629      	mov	r1, r5
   d55f2:	4620      	mov	r0, r4
   d55f4:	f7ff fdee 	bl	d51d4 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d55f8:	b938      	cbnz	r0, d560a <_ZN13Adafruit_MQTT7connectEv+0xa8>
   d55fa:	3e01      	subs	r6, #1
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    // Ignore subscriptions that aren't defined.
    if (subscriptions[i] == 0) continue;

    boolean success = false;
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d55fc:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d5600:	d1e4      	bne.n	d55cc <_ZN13Adafruit_MQTT7connectEv+0x6a>
	success = true;
	break;
      }
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
   d5602:	f06f 0001 	mvn.w	r0, #1
  }

  return 0;
}
   d5606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
  if (buffer[3] != 0)
    return buffer[3];

  // Setup subscriptions once connected.
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d560a:	4547      	cmp	r7, r8
   d560c:	d1da      	bne.n	d55c4 <_ZN13Adafruit_MQTT7connectEv+0x62>
      //Serial.println("\t**failed, retrying!");
    }
    if (! success) return -2; // failed to sub for some reason
  }

  return 0;
   d560e:	2000      	movs	r0, #0
   d5610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5614 <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d5614:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d5616:	e880 0006 	stmia.w	r0, {r1, r2}
  qos = q;
   d561a:	7203      	strb	r3, [r0, #8]
}
   d561c:	bd10      	pop	{r4, pc}

000d561e <_ZN21Adafruit_MQTT_Publish7publishEl>:
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d561e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5620:	4604      	mov	r4, r0
  char payload[12];
  ltoa(i, payload, 10);
   d5622:	220a      	movs	r2, #10
  char payload[12];
  ltoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(int32_t i) {
   d5624:	4608      	mov	r0, r1
  char payload[12];
  ltoa(i, payload, 10);
   d5626:	a901      	add	r1, sp, #4
   d5628:	f000 fc60 	bl	d5eec <ltoa>
  return mqtt->publish(topic, payload, qos);
   d562c:	7a23      	ldrb	r3, [r4, #8]
   d562e:	aa01      	add	r2, sp, #4
   d5630:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5634:	f7ff ff68 	bl	d5508 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d5638:	b004      	add	sp, #16
   d563a:	bd10      	pop	{r4, pc}

000d563c <_ZN21Adafruit_MQTT_Publish7publishEi>:
   d563c:	f7ff bfef 	b.w	d561e <_ZN21Adafruit_MQTT_Publish7publishEl>

000d5640 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d5640:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d5642:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d5644:	2300      	movs	r3, #0

// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
   d5646:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d5648:	6002      	str	r2, [r0, #0]
  qos = q;
  datalen = 0;
   d564a:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d564c:	61c3      	str	r3, [r0, #28]
  callback_buffer = 0;
   d564e:	6243      	str	r3, [r0, #36]	; 0x24
  callback_double = 0;
   d5650:	6203      	str	r3, [r0, #32]
  callback_io = 0;
   d5652:	6283      	str	r3, [r0, #40]	; 0x28
   d5654:	62c3      	str	r3, [r0, #44]	; 0x2c
  io_feed = 0;
   d5656:	6303      	str	r3, [r0, #48]	; 0x30
}
   d5658:	bd10      	pop	{r4, pc}

000d565a <_GLOBAL__sub_I__Z11printBufferPht>:
   d565a:	f000 b811 	b.w	d5680 <HAL_Pin_Map>
	...

000d5660 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <netdb_freeaddrinfo+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	689b      	ldr	r3, [r3, #8]
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	00030268 	.word	0x00030268

000d5670 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <netdb_getaddrinfo+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	68db      	ldr	r3, [r3, #12]
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	00030268 	.word	0x00030268

000d5680 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b02      	ldr	r3, [pc, #8]	; (d568c <HAL_Pin_Map+0xc>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	681b      	ldr	r3, [r3, #0]
   d5688:	9301      	str	r3, [sp, #4]
   d568a:	bd08      	pop	{r3, pc}
   d568c:	0003022c 	.word	0x0003022c

000d5690 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <HAL_Validate_Pin_Function+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	685b      	ldr	r3, [r3, #4]
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	0003022c 	.word	0x0003022c

000d56a0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <HAL_Pin_Mode+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	689b      	ldr	r3, [r3, #8]
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	0003022c 	.word	0x0003022c

000d56b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <HAL_Get_Pin_Mode+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	68db      	ldr	r3, [r3, #12]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	0003022c 	.word	0x0003022c

000d56c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <HAL_GPIO_Write+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	691b      	ldr	r3, [r3, #16]
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	0003022c 	.word	0x0003022c

000d56d0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <HAL_DAC_Write+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	0003022c 	.word	0x0003022c

000d56e0 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <HAL_ADC_Read+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	0003022c 	.word	0x0003022c

000d56f0 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <HAL_PWM_Write_Ext+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	0003022c 	.word	0x0003022c

000d5700 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <HAL_SPI_Begin+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	681b      	ldr	r3, [r3, #0]
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	00030230 	.word	0x00030230

000d5710 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <HAL_SPI_Set_Bit_Order+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	689b      	ldr	r3, [r3, #8]
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	00030230 	.word	0x00030230

000d5720 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <HAL_SPI_Set_Data_Mode+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	68db      	ldr	r3, [r3, #12]
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	00030230 	.word	0x00030230

000d5730 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <HAL_SPI_Set_Clock_Divider+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	691b      	ldr	r3, [r3, #16]
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	00030230 	.word	0x00030230

000d5740 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <HAL_SPI_Send_Receive_Data+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	695b      	ldr	r3, [r3, #20]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	00030230 	.word	0x00030230

000d5750 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <HAL_SPI_Init+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	69db      	ldr	r3, [r3, #28]
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030230 	.word	0x00030230

000d5760 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <HAL_SPI_Is_Enabled+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	6a1b      	ldr	r3, [r3, #32]
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030230 	.word	0x00030230

000d5770 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <HAL_SPI_Info+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	00030230 	.word	0x00030230

000d5780 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <HAL_SPI_Acquire+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	00030230 	.word	0x00030230

000d5790 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <HAL_SPI_Release+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030230 	.word	0x00030230

000d57a0 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <if_index_to_name+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	695b      	ldr	r3, [r3, #20]
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	0003026c 	.word	0x0003026c

000d57b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <HAL_RNG_GetRandomNumber+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	685b      	ldr	r3, [r3, #4]
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030218 	.word	0x00030218

000d57c0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <HAL_Delay_Microseconds+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	68db      	ldr	r3, [r3, #12]
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030218 	.word	0x00030218

000d57d0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	695b      	ldr	r3, [r3, #20]
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	00030218 	.word	0x00030218

000d57e0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <HAL_RTC_Get_UnixTime+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	69db      	ldr	r3, [r3, #28]
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	00030218 	.word	0x00030218

000d57f0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <HAL_RTC_Time_Is_Valid+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	00030218 	.word	0x00030218

000d5800 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <os_thread_is_current+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	689b      	ldr	r3, [r3, #8]
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	00030248 	.word	0x00030248

000d5810 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <os_thread_join+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	691b      	ldr	r3, [r3, #16]
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	00030248 	.word	0x00030248

000d5820 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <os_thread_cleanup+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	695b      	ldr	r3, [r3, #20]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	00030248 	.word	0x00030248

000d5830 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <os_mutex_recursive_create+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	00030248 	.word	0x00030248

000d5840 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <os_mutex_recursive_destroy+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	00030248 	.word	0x00030248

000d5850 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <inet_inet_ntop+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	695b      	ldr	r3, [r3, #20]
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	00030264 	.word	0x00030264

000d5860 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <inet_htonl+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	6a1b      	ldr	r3, [r3, #32]
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030264 	.word	0x00030264

000d5870 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <inet_htons+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030264 	.word	0x00030264

000d5880 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <HAL_USART_Init+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	681b      	ldr	r3, [r3, #0]
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	0003023c 	.word	0x0003023c

000d5890 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <HAL_USART_Write_Data+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	68db      	ldr	r3, [r3, #12]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	0003023c 	.word	0x0003023c

000d58a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <HAL_USART_Available_Data+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	691b      	ldr	r3, [r3, #16]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	0003023c 	.word	0x0003023c

000d58b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <HAL_USART_Read_Data+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	695b      	ldr	r3, [r3, #20]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	0003023c 	.word	0x0003023c

000d58c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <HAL_USART_Peek_Data+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	699b      	ldr	r3, [r3, #24]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	0003023c 	.word	0x0003023c

000d58d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <HAL_USART_Flush_Data+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	69db      	ldr	r3, [r3, #28]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	0003023c 	.word	0x0003023c

000d58e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <HAL_USART_Is_Enabled+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	6a1b      	ldr	r3, [r3, #32]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	0003023c 	.word	0x0003023c

000d58f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <HAL_USART_Available_Data_For_Write+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	0003023c 	.word	0x0003023c

000d5900 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <HAL_I2C_Begin+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	68db      	ldr	r3, [r3, #12]
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	00030228 	.word	0x00030228

000d5910 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <HAL_I2C_Begin_Transmission+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	699b      	ldr	r3, [r3, #24]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	00030228 	.word	0x00030228

000d5920 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <HAL_I2C_End_Transmission+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	69db      	ldr	r3, [r3, #28]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	00030228 	.word	0x00030228

000d5930 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b02      	ldr	r3, [pc, #8]	; (d593c <HAL_I2C_Write_Data+0xc>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	6a1b      	ldr	r3, [r3, #32]
   d5938:	9301      	str	r3, [sp, #4]
   d593a:	bd08      	pop	{r3, pc}
   d593c:	00030228 	.word	0x00030228

000d5940 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b02      	ldr	r3, [pc, #8]	; (d594c <HAL_I2C_Available_Data+0xc>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5948:	9301      	str	r3, [sp, #4]
   d594a:	bd08      	pop	{r3, pc}
   d594c:	00030228 	.word	0x00030228

000d5950 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5950:	b508      	push	{r3, lr}
   d5952:	4b02      	ldr	r3, [pc, #8]	; (d595c <HAL_I2C_Read_Data+0xc>)
   d5954:	681b      	ldr	r3, [r3, #0]
   d5956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5958:	9301      	str	r3, [sp, #4]
   d595a:	bd08      	pop	{r3, pc}
   d595c:	00030228 	.word	0x00030228

000d5960 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5960:	b508      	push	{r3, lr}
   d5962:	4b02      	ldr	r3, [pc, #8]	; (d596c <HAL_I2C_Peek_Data+0xc>)
   d5964:	681b      	ldr	r3, [r3, #0]
   d5966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5968:	9301      	str	r3, [sp, #4]
   d596a:	bd08      	pop	{r3, pc}
   d596c:	00030228 	.word	0x00030228

000d5970 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5970:	b508      	push	{r3, lr}
   d5972:	4b02      	ldr	r3, [pc, #8]	; (d597c <HAL_I2C_Flush_Data+0xc>)
   d5974:	681b      	ldr	r3, [r3, #0]
   d5976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5978:	9301      	str	r3, [sp, #4]
   d597a:	bd08      	pop	{r3, pc}
   d597c:	00030228 	.word	0x00030228

000d5980 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5980:	b508      	push	{r3, lr}
   d5982:	4b02      	ldr	r3, [pc, #8]	; (d598c <HAL_I2C_Is_Enabled+0xc>)
   d5984:	681b      	ldr	r3, [r3, #0]
   d5986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5988:	9301      	str	r3, [sp, #4]
   d598a:	bd08      	pop	{r3, pc}
   d598c:	00030228 	.word	0x00030228

000d5990 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5990:	b508      	push	{r3, lr}
   d5992:	4b02      	ldr	r3, [pc, #8]	; (d599c <HAL_I2C_Init+0xc>)
   d5994:	681b      	ldr	r3, [r3, #0]
   d5996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5998:	9301      	str	r3, [sp, #4]
   d599a:	bd08      	pop	{r3, pc}
   d599c:	00030228 	.word	0x00030228

000d59a0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d59a0:	b508      	push	{r3, lr}
   d59a2:	4b02      	ldr	r3, [pc, #8]	; (d59ac <sock_setsockopt+0xc>)
   d59a4:	681b      	ldr	r3, [r3, #0]
   d59a6:	699b      	ldr	r3, [r3, #24]
   d59a8:	9301      	str	r3, [sp, #4]
   d59aa:	bd08      	pop	{r3, pc}
   d59ac:	00030238 	.word	0x00030238

000d59b0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d59b0:	b508      	push	{r3, lr}
   d59b2:	4b02      	ldr	r3, [pc, #8]	; (d59bc <sock_close+0xc>)
   d59b4:	681b      	ldr	r3, [r3, #0]
   d59b6:	69db      	ldr	r3, [r3, #28]
   d59b8:	9301      	str	r3, [sp, #4]
   d59ba:	bd08      	pop	{r3, pc}
   d59bc:	00030238 	.word	0x00030238

000d59c0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d59c0:	b508      	push	{r3, lr}
   d59c2:	4b02      	ldr	r3, [pc, #8]	; (d59cc <sock_connect+0xc>)
   d59c4:	681b      	ldr	r3, [r3, #0]
   d59c6:	6a1b      	ldr	r3, [r3, #32]
   d59c8:	9301      	str	r3, [sp, #4]
   d59ca:	bd08      	pop	{r3, pc}
   d59cc:	00030238 	.word	0x00030238

000d59d0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d59d0:	b508      	push	{r3, lr}
   d59d2:	4b02      	ldr	r3, [pc, #8]	; (d59dc <sock_recv+0xc>)
   d59d4:	681b      	ldr	r3, [r3, #0]
   d59d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59d8:	9301      	str	r3, [sp, #4]
   d59da:	bd08      	pop	{r3, pc}
   d59dc:	00030238 	.word	0x00030238

000d59e0 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b02      	ldr	r3, [pc, #8]	; (d59ec <sock_send+0xc>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59e8:	9301      	str	r3, [sp, #4]
   d59ea:	bd08      	pop	{r3, pc}
   d59ec:	00030238 	.word	0x00030238

000d59f0 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d59f0:	b508      	push	{r3, lr}
   d59f2:	4b02      	ldr	r3, [pc, #8]	; (d59fc <sock_socket+0xc>)
   d59f4:	681b      	ldr	r3, [r3, #0]
   d59f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d59f8:	9301      	str	r3, [sp, #4]
   d59fa:	bd08      	pop	{r3, pc}
   d59fc:	00030238 	.word	0x00030238

000d5a00 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5a00:	b508      	push	{r3, lr}
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <HAL_USB_USART_Init+0xc>)
   d5a04:	681b      	ldr	r3, [r3, #0]
   d5a06:	681b      	ldr	r3, [r3, #0]
   d5a08:	9301      	str	r3, [sp, #4]
   d5a0a:	bd08      	pop	{r3, pc}
   d5a0c:	0003024c 	.word	0x0003024c

000d5a10 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5a10:	b508      	push	{r3, lr}
   d5a12:	4b02      	ldr	r3, [pc, #8]	; (d5a1c <HAL_USB_USART_Begin+0xc>)
   d5a14:	681b      	ldr	r3, [r3, #0]
   d5a16:	685b      	ldr	r3, [r3, #4]
   d5a18:	9301      	str	r3, [sp, #4]
   d5a1a:	bd08      	pop	{r3, pc}
   d5a1c:	0003024c 	.word	0x0003024c

000d5a20 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5a20:	b508      	push	{r3, lr}
   d5a22:	4b02      	ldr	r3, [pc, #8]	; (d5a2c <HAL_USB_USART_Available_Data+0xc>)
   d5a24:	681b      	ldr	r3, [r3, #0]
   d5a26:	691b      	ldr	r3, [r3, #16]
   d5a28:	9301      	str	r3, [sp, #4]
   d5a2a:	bd08      	pop	{r3, pc}
   d5a2c:	0003024c 	.word	0x0003024c

000d5a30 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b02      	ldr	r3, [pc, #8]	; (d5a3c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	695b      	ldr	r3, [r3, #20]
   d5a38:	9301      	str	r3, [sp, #4]
   d5a3a:	bd08      	pop	{r3, pc}
   d5a3c:	0003024c 	.word	0x0003024c

000d5a40 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a40:	b508      	push	{r3, lr}
   d5a42:	4b02      	ldr	r3, [pc, #8]	; (d5a4c <HAL_USB_USART_Receive_Data+0xc>)
   d5a44:	681b      	ldr	r3, [r3, #0]
   d5a46:	699b      	ldr	r3, [r3, #24]
   d5a48:	9301      	str	r3, [sp, #4]
   d5a4a:	bd08      	pop	{r3, pc}
   d5a4c:	0003024c 	.word	0x0003024c

000d5a50 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a50:	b508      	push	{r3, lr}
   d5a52:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <HAL_USB_USART_Send_Data+0xc>)
   d5a54:	681b      	ldr	r3, [r3, #0]
   d5a56:	69db      	ldr	r3, [r3, #28]
   d5a58:	9301      	str	r3, [sp, #4]
   d5a5a:	bd08      	pop	{r3, pc}
   d5a5c:	0003024c 	.word	0x0003024c

000d5a60 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5a60:	b508      	push	{r3, lr}
   d5a62:	4b02      	ldr	r3, [pc, #8]	; (d5a6c <HAL_USB_USART_Flush_Data+0xc>)
   d5a64:	681b      	ldr	r3, [r3, #0]
   d5a66:	6a1b      	ldr	r3, [r3, #32]
   d5a68:	9301      	str	r3, [sp, #4]
   d5a6a:	bd08      	pop	{r3, pc}
   d5a6c:	0003024c 	.word	0x0003024c

000d5a70 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5a70:	b508      	push	{r3, lr}
   d5a72:	4b02      	ldr	r3, [pc, #8]	; (d5a7c <panic_+0xc>)
   d5a74:	681b      	ldr	r3, [r3, #0]
   d5a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a78:	9301      	str	r3, [sp, #4]
   d5a7a:	bd08      	pop	{r3, pc}
   d5a7c:	00030260 	.word	0x00030260

000d5a80 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5a80:	b508      	push	{r3, lr}
   d5a82:	4b02      	ldr	r3, [pc, #8]	; (d5a8c <log_message+0xc>)
   d5a84:	681b      	ldr	r3, [r3, #0]
   d5a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5a88:	9301      	str	r3, [sp, #4]
   d5a8a:	bd08      	pop	{r3, pc}
   d5a8c:	00030260 	.word	0x00030260

000d5a90 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5a90:	b508      	push	{r3, lr}
   d5a92:	4b02      	ldr	r3, [pc, #8]	; (d5a9c <system_mode+0xc>)
   d5a94:	681b      	ldr	r3, [r3, #0]
   d5a96:	681b      	ldr	r3, [r3, #0]
   d5a98:	9301      	str	r3, [sp, #4]
   d5a9a:	bd08      	pop	{r3, pc}
   d5a9c:	00030220 	.word	0x00030220

000d5aa0 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5aa0:	b508      	push	{r3, lr}
   d5aa2:	4b02      	ldr	r3, [pc, #8]	; (d5aac <set_system_mode+0xc>)
   d5aa4:	681b      	ldr	r3, [r3, #0]
   d5aa6:	685b      	ldr	r3, [r3, #4]
   d5aa8:	9301      	str	r3, [sp, #4]
   d5aaa:	bd08      	pop	{r3, pc}
   d5aac:	00030220 	.word	0x00030220

000d5ab0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5ab0:	b508      	push	{r3, lr}
   d5ab2:	4b02      	ldr	r3, [pc, #8]	; (d5abc <system_delay_ms+0xc>)
   d5ab4:	681b      	ldr	r3, [r3, #0]
   d5ab6:	695b      	ldr	r3, [r3, #20]
   d5ab8:	9301      	str	r3, [sp, #4]
   d5aba:	bd08      	pop	{r3, pc}
   d5abc:	00030220 	.word	0x00030220

000d5ac0 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5ac0:	b508      	push	{r3, lr}
   d5ac2:	4b02      	ldr	r3, [pc, #8]	; (d5acc <system_thread_get_state+0xc>)
   d5ac4:	681b      	ldr	r3, [r3, #0]
   d5ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5ac8:	9301      	str	r3, [sp, #4]
   d5aca:	bd08      	pop	{r3, pc}
   d5acc:	00030220 	.word	0x00030220

000d5ad0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5ad0:	b508      	push	{r3, lr}
   d5ad2:	4b03      	ldr	r3, [pc, #12]	; (d5ae0 <system_ctrl_set_app_request_handler+0x10>)
   d5ad4:	681b      	ldr	r3, [r3, #0]
   d5ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5ada:	9301      	str	r3, [sp, #4]
   d5adc:	bd08      	pop	{r3, pc}
   d5ade:	0000      	.short	0x0000
   d5ae0:	00030220 	.word	0x00030220

000d5ae4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b03      	ldr	r3, [pc, #12]	; (d5af4 <system_ctrl_set_result+0x10>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5aee:	9301      	str	r3, [sp, #4]
   d5af0:	bd08      	pop	{r3, pc}
   d5af2:	0000      	.short	0x0000
   d5af4:	00030220 	.word	0x00030220

000d5af8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <network_connect+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	685b      	ldr	r3, [r3, #4]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	00030240 	.word	0x00030240

000d5b08 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <network_connecting+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	689b      	ldr	r3, [r3, #8]
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	00030240 	.word	0x00030240

000d5b18 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <network_disconnect+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	68db      	ldr	r3, [r3, #12]
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	00030240 	.word	0x00030240

000d5b28 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <network_ready+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	691b      	ldr	r3, [r3, #16]
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	00030240 	.word	0x00030240

000d5b38 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <network_on+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	695b      	ldr	r3, [r3, #20]
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	00030240 	.word	0x00030240

000d5b48 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <network_off+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	699b      	ldr	r3, [r3, #24]
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	00030240 	.word	0x00030240

000d5b58 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <network_listen+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	69db      	ldr	r3, [r3, #28]
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	00030240 	.word	0x00030240

000d5b68 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <network_listening+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	6a1b      	ldr	r3, [r3, #32]
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	00030240 	.word	0x00030240

000d5b78 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <network_set_listen_timeout+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	00030240 	.word	0x00030240

000d5b88 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <network_get_listen_timeout+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	00030240 	.word	0x00030240

000d5b98 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <spark_process+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	689b      	ldr	r3, [r3, #8]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	00030244 	.word	0x00030244

000d5ba8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <spark_cloud_flag_connected+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	695b      	ldr	r3, [r3, #20]
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	00030244 	.word	0x00030244

000d5bb8 <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <spark_sync_time+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	00030244 	.word	0x00030244

000d5bc8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <spark_sync_time_pending+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	00030244 	.word	0x00030244

000d5bd8 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <spark_sync_time_last+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	00030244 	.word	0x00030244

000d5be8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030244 	.word	0x00030244

000d5bf8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <malloc+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	681b      	ldr	r3, [r3, #0]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	0003021c 	.word	0x0003021c

000d5c08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <free+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	685b      	ldr	r3, [r3, #4]
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	0003021c 	.word	0x0003021c

000d5c18 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <realloc+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	689b      	ldr	r3, [r3, #8]
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	0003021c 	.word	0x0003021c

000d5c28 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <siprintf+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	691b      	ldr	r3, [r3, #16]
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	0003021c 	.word	0x0003021c

000d5c38 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <siscanf+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	699b      	ldr	r3, [r3, #24]
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	0003021c 	.word	0x0003021c

000d5c48 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <vsnprintf+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	0003021c 	.word	0x0003021c

000d5c58 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <_malloc_r+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	0003021c 	.word	0x0003021c

000d5c68 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <__errno+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	0003021c 	.word	0x0003021c

000d5c78 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5c78:	2200      	movs	r2, #0
   d5c7a:	4611      	mov	r1, r2
   d5c7c:	6840      	ldr	r0, [r0, #4]
   d5c7e:	f7ff bf73 	b.w	d5b68 <network_listening>

000d5c82 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5c82:	2200      	movs	r2, #0
   d5c84:	4611      	mov	r1, r2
   d5c86:	6840      	ldr	r0, [r0, #4]
   d5c88:	f7ff bf7e 	b.w	d5b88 <network_get_listen_timeout>

000d5c8c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5c8c:	2200      	movs	r2, #0
   d5c8e:	6840      	ldr	r0, [r0, #4]
   d5c90:	f7ff bf72 	b.w	d5b78 <network_set_listen_timeout>

000d5c94 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c94:	2200      	movs	r2, #0
   d5c96:	f081 0101 	eor.w	r1, r1, #1
   d5c9a:	6840      	ldr	r0, [r0, #4]
   d5c9c:	f7ff bf5c 	b.w	d5b58 <network_listen>

000d5ca0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5ca0:	2300      	movs	r3, #0
   d5ca2:	461a      	mov	r2, r3
   d5ca4:	4619      	mov	r1, r3
   d5ca6:	6840      	ldr	r0, [r0, #4]
   d5ca8:	f7ff bf4e 	b.w	d5b48 <network_off>

000d5cac <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5cac:	2300      	movs	r3, #0
   d5cae:	461a      	mov	r2, r3
   d5cb0:	4619      	mov	r1, r3
   d5cb2:	6840      	ldr	r0, [r0, #4]
   d5cb4:	f7ff bf40 	b.w	d5b38 <network_on>

000d5cb8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5cb8:	2200      	movs	r2, #0
   d5cba:	4611      	mov	r1, r2
   d5cbc:	6840      	ldr	r0, [r0, #4]
   d5cbe:	f7ff bf33 	b.w	d5b28 <network_ready>

000d5cc2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5cc2:	2200      	movs	r2, #0
   d5cc4:	4611      	mov	r1, r2
   d5cc6:	6840      	ldr	r0, [r0, #4]
   d5cc8:	f7ff bf1e 	b.w	d5b08 <network_connecting>

000d5ccc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ccc:	2200      	movs	r2, #0
   d5cce:	2102      	movs	r1, #2
   d5cd0:	6840      	ldr	r0, [r0, #4]
   d5cd2:	f7ff bf21 	b.w	d5b18 <network_disconnect>

000d5cd6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5cd6:	2300      	movs	r3, #0
   d5cd8:	461a      	mov	r2, r3
   d5cda:	6840      	ldr	r0, [r0, #4]
   d5cdc:	f7ff bf0c 	b.w	d5af8 <network_connect>

000d5ce0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ce0:	4b02      	ldr	r3, [pc, #8]	; (d5cec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5ce2:	2203      	movs	r2, #3
   d5ce4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5ce6:	4a02      	ldr	r2, [pc, #8]	; (d5cf0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5ce8:	601a      	str	r2, [r3, #0]
   d5cea:	4770      	bx	lr
   d5cec:	2003e39c 	.word	0x2003e39c
   d5cf0:	000d8b9c 	.word	0x000d8b9c

000d5cf4 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5cf4:	4770      	bx	lr

000d5cf6 <_ZN8SPIClassD0Ev>:
   d5cf6:	b510      	push	{r4, lr}
   d5cf8:	210c      	movs	r1, #12
   d5cfa:	4604      	mov	r4, r0
   d5cfc:	f001 fb6a 	bl	d73d4 <_ZdlPvj>
   d5d00:	4620      	mov	r0, r4
   d5d02:	bd10      	pop	{r4, pc}

000d5d04 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5d04:	2100      	movs	r1, #0
   d5d06:	f7ff bd3b 	b.w	d5780 <HAL_SPI_Acquire>

000d5d0a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d5d0a:	2100      	movs	r1, #0
   d5d0c:	f7ff bd40 	b.w	d5790 <HAL_SPI_Release>

000d5d10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5d10:	b510      	push	{r4, lr}
   d5d12:	4b05      	ldr	r3, [pc, #20]	; (d5d28 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5d14:	6003      	str	r3, [r0, #0]
   d5d16:	4604      	mov	r4, r0
{
    _spi = spi;
   d5d18:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d5d1a:	4608      	mov	r0, r1
   d5d1c:	f7ff fd18 	bl	d5750 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5d20:	2300      	movs	r3, #0
   d5d22:	60a3      	str	r3, [r4, #8]
}
   d5d24:	4620      	mov	r0, r4
   d5d26:	bd10      	pop	{r4, pc}
   d5d28:	000d8bd0 	.word	0x000d8bd0

000d5d2c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5d2c:	b510      	push	{r4, lr}
   d5d2e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5d30:	7900      	ldrb	r0, [r0, #4]
   d5d32:	f7ff ffe7 	bl	d5d04 <_ZN8SPIClass4lockEv.isra.0>
   d5d36:	b948      	cbnz	r0, d5d4c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5d38:	7920      	ldrb	r0, [r4, #4]
   d5d3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5d3e:	f7ff fcdf 	bl	d5700 <HAL_SPI_Begin>
        unlock();
   d5d42:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5d48:	f7ff bfdf 	b.w	d5d0a <_ZN8SPIClass6unlockEv.isra.1>
   d5d4c:	bd10      	pop	{r4, pc}

000d5d4e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5d4e:	b538      	push	{r3, r4, r5, lr}
   d5d50:	4604      	mov	r4, r0
    if (!lock())
   d5d52:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5d54:	460d      	mov	r5, r1
    if (!lock())
   d5d56:	f7ff ffd5 	bl	d5d04 <_ZN8SPIClass4lockEv.isra.0>
   d5d5a:	b940      	cbnz	r0, d5d6e <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5d5c:	7920      	ldrb	r0, [r4, #4]
   d5d5e:	4629      	mov	r1, r5
   d5d60:	f7ff fcd6 	bl	d5710 <HAL_SPI_Set_Bit_Order>
        unlock();
   d5d64:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d5d6a:	f7ff bfce 	b.w	d5d0a <_ZN8SPIClass6unlockEv.isra.1>
   d5d6e:	bd38      	pop	{r3, r4, r5, pc}

000d5d70 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5d70:	b538      	push	{r3, r4, r5, lr}
   d5d72:	4604      	mov	r4, r0
    if (!lock())
   d5d74:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5d76:	460d      	mov	r5, r1
    if (!lock())
   d5d78:	f7ff ffc4 	bl	d5d04 <_ZN8SPIClass4lockEv.isra.0>
   d5d7c:	b940      	cbnz	r0, d5d90 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5d7e:	7920      	ldrb	r0, [r4, #4]
   d5d80:	4629      	mov	r1, r5
   d5d82:	f7ff fccd 	bl	d5720 <HAL_SPI_Set_Data_Mode>
        unlock();
   d5d86:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5d8c:	f7ff bfbd 	b.w	d5d0a <_ZN8SPIClass6unlockEv.isra.1>
   d5d90:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5d94 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5d94:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d5d96:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5d98:	6018      	str	r0, [r3, #0]
   d5d9a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5d9c:	6818      	ldr	r0, [r3, #0]
   d5d9e:	4288      	cmp	r0, r1
   d5da0:	b2e5      	uxtb	r5, r4
   d5da2:	d906      	bls.n	d5db2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5da4:	3401      	adds	r4, #1
   d5da6:	2c08      	cmp	r4, #8
   d5da8:	d002      	beq.n	d5db0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5daa:	0840      	lsrs	r0, r0, #1
   d5dac:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5dae:	e7f5      	b.n	d5d9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5db0:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5db4:	5d5b      	ldrb	r3, [r3, r5]
   d5db6:	7013      	strb	r3, [r2, #0]
   d5db8:	bd30      	pop	{r4, r5, pc}
   d5dba:	bf00      	nop
   d5dbc:	000d8bd8 	.word	0x000d8bd8

000d5dc0 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5dc4:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5dc6:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5dc8:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5dca:	7900      	ldrb	r0, [r0, #4]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5dcc:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5dce:	460e      	mov	r6, r1
   d5dd0:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5dd2:	f7ff ff97 	bl	d5d04 <_ZN8SPIClass4lockEv.isra.0>
   d5dd6:	4605      	mov	r5, r0
   d5dd8:	bb00      	cbnz	r0, d5e1c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5dda:	f894 8004 	ldrb.w	r8, [r4, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5dde:	4601      	mov	r1, r0
   d5de0:	2214      	movs	r2, #20
   d5de2:	a803      	add	r0, sp, #12
   d5de4:	f001 fdd2 	bl	d798c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5de8:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5dea:	462a      	mov	r2, r5
   d5dec:	a903      	add	r1, sp, #12
   d5dee:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5df0:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5df4:	f7ff fcbc 	bl	d5770 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5df8:	ab02      	add	r3, sp, #8
   d5dfa:	f10d 0207 	add.w	r2, sp, #7
   d5dfe:	fb07 f106 	mul.w	r1, r7, r6
   d5e02:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5e04:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5e08:	f7ff ffc4 	bl	d5d94 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d5e0c:	7920      	ldrb	r0, [r4, #4]
   d5e0e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5e12:	f7ff fc8d 	bl	d5730 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5e16:	7920      	ldrb	r0, [r4, #4]
   d5e18:	f7ff ff77 	bl	d5d0a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d5e1c:	9802      	ldr	r0, [sp, #8]
   d5e1e:	b008      	add	sp, #32
   d5e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e24 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5e24:	b538      	push	{r3, r4, r5, lr}
   d5e26:	4604      	mov	r4, r0
    if (!lock())
   d5e28:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5e2a:	460d      	mov	r5, r1
    if (!lock())
   d5e2c:	f7ff ff6a 	bl	d5d04 <_ZN8SPIClass4lockEv.isra.0>
   d5e30:	b9c8      	cbnz	r0, d5e66 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d5e32:	68a1      	ldr	r1, [r4, #8]
   d5e34:	b171      	cbz	r1, d5e54 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d5e36:	4b0c      	ldr	r3, [pc, #48]	; (d5e68 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d5e38:	5cc2      	ldrb	r2, [r0, r3]
   d5e3a:	42aa      	cmp	r2, r5
   d5e3c:	d002      	beq.n	d5e44 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5e3e:	3001      	adds	r0, #1
   d5e40:	2808      	cmp	r0, #8
   d5e42:	d1f9      	bne.n	d5e38 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d5e44:	3001      	adds	r0, #1
   d5e46:	b2c0      	uxtb	r0, r0
   d5e48:	40c1      	lsrs	r1, r0
   d5e4a:	2201      	movs	r2, #1
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	f7ff ffb7 	bl	d5dc0 <_ZN8SPIClass13setClockSpeedEjj>
   d5e52:	e003      	b.n	d5e5c <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5e54:	4629      	mov	r1, r5
   d5e56:	7920      	ldrb	r0, [r4, #4]
   d5e58:	f7ff fc6a 	bl	d5730 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d5e5c:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d5e62:	f7ff bf52 	b.w	d5d0a <_ZN8SPIClass6unlockEv.isra.1>
   d5e66:	bd38      	pop	{r3, r4, r5, pc}
   d5e68:	000d8bd8 	.word	0x000d8bd8

000d5e6c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5e6c:	b538      	push	{r3, r4, r5, lr}
   d5e6e:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d5e70:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5e72:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d5e74:	f7ff ff46 	bl	d5d04 <_ZN8SPIClass4lockEv.isra.0>
   d5e78:	b940      	cbnz	r0, d5e8c <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d5e7a:	4629      	mov	r1, r5
   d5e7c:	7920      	ldrb	r0, [r4, #4]
   d5e7e:	f7ff fc5f 	bl	d5740 <HAL_SPI_Send_Receive_Data>
   d5e82:	4605      	mov	r5, r0
        unlock();
   d5e84:	7920      	ldrb	r0, [r4, #4]
   d5e86:	f7ff ff40 	bl	d5d0a <_ZN8SPIClass6unlockEv.isra.1>
   d5e8a:	e000      	b.n	d5e8e <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d5e8c:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d5e8e:	b2e8      	uxtb	r0, r5
   d5e90:	bd38      	pop	{r3, r4, r5, pc}

000d5e92 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5e92:	7900      	ldrb	r0, [r0, #4]
   d5e94:	f7ff bc64 	b.w	d5760 <HAL_SPI_Is_Enabled>

000d5e98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5e98:	b510      	push	{r4, lr}
   d5e9a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5e9c:	6800      	ldr	r0, [r0, #0]
   d5e9e:	b118      	cbz	r0, d5ea8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5ea0:	f7ff feb2 	bl	d5c08 <free>
            wakeupSource_ = nullptr;
   d5ea4:	2300      	movs	r3, #0
   d5ea6:	6023      	str	r3, [r4, #0]
   d5ea8:	bd10      	pop	{r4, pc}

000d5eaa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5eaa:	b510      	push	{r4, lr}
   d5eac:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5eae:	f7ff fff3 	bl	d5e98 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5eb2:	4620      	mov	r0, r4
   d5eb4:	bd10      	pop	{r4, pc}
	...

000d5eb8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5eb8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5eba:	4c09      	ldr	r4, [pc, #36]	; (d5ee0 <_GLOBAL__sub_I_System+0x28>)
   d5ebc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5ebe:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5ec2:	6020      	str	r0, [r4, #0]
   d5ec4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5ec6:	71a0      	strb	r0, [r4, #6]
   d5ec8:	8120      	strh	r0, [r4, #8]
   d5eca:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5ecc:	f7ff fde8 	bl	d5aa0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5ed0:	4620      	mov	r0, r4
   d5ed2:	4a04      	ldr	r2, [pc, #16]	; (d5ee4 <_GLOBAL__sub_I_System+0x2c>)
   d5ed4:	4904      	ldr	r1, [pc, #16]	; (d5ee8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5eda:	f001 ba6d 	b.w	d73b8 <__aeabi_atexit>
   d5ede:	bf00      	nop
   d5ee0:	2003e3a4 	.word	0x2003e3a4
   d5ee4:	2003e1d0 	.word	0x2003e1d0
   d5ee8:	000d5eab 	.word	0x000d5eab

000d5eec <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d5ef0:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
   d5ef2:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5ef4:	4615      	mov	r5, r2
   d5ef6:	b08c      	sub	sp, #48	; 0x30
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
   d5ef8:	bf34      	ite	cc
   d5efa:	4615      	movcc	r5, r2
   d5efc:	250a      	movcs	r5, #10
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5efe:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
   d5f00:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5f02:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5f04:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
   d5f08:	d107      	bne.n	d5f1a <ltoa+0x2e>
   d5f0a:	4298      	cmp	r0, r3
   d5f0c:	da05      	bge.n	d5f1a <ltoa+0x2e>
      {
            *head++ = '-';
   d5f0e:	232d      	movs	r3, #45	; 0x2d
   d5f10:	f101 0801 	add.w	r8, r1, #1
   d5f14:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
   d5f16:	4240      	negs	r0, r0
   d5f18:	e001      	b.n	d5f1e <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
   d5f1a:	b1b0      	cbz	r0, d5f4a <ltoa+0x5e>
   d5f1c:	46a0      	mov	r8, r4
   d5f1e:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
   d5f22:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d5f24:	462a      	mov	r2, r5
   d5f26:	4601      	mov	r1, r0
   d5f28:	a801      	add	r0, sp, #4
   d5f2a:	f001 fcf5 	bl	d7918 <ldiv>
   d5f2e:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d5f30:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
   d5f32:	2b09      	cmp	r3, #9
   d5f34:	bfcc      	ite	gt
   d5f36:	2237      	movgt	r2, #55	; 0x37
   d5f38:	2230      	movle	r2, #48	; 0x30
   d5f3a:	fa52 f383 	uxtab	r3, r2, r3
   d5f3e:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d5f42:	3701      	adds	r7, #1
   d5f44:	2800      	cmp	r0, #0
   d5f46:	d1ed      	bne.n	d5f24 <ltoa+0x38>
   d5f48:	e006      	b.n	d5f58 <ltoa+0x6c>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
   d5f4a:	2330      	movs	r3, #48	; 0x30
   d5f4c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5f50:	46a0      	mov	r8, r4
   d5f52:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
   d5f56:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5f58:	463a      	mov	r2, r7
   d5f5a:	1c71      	adds	r1, r6, #1
   d5f5c:	4640      	mov	r0, r8
   d5f5e:	f001 fcef 	bl	d7940 <memcpy>
      return str;
}
   d5f62:	4620      	mov	r0, r4
   d5f64:	b00c      	add	sp, #48	; 0x30
   d5f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5f6a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5f6a:	b510      	push	{r4, lr}
   d5f6c:	4604      	mov	r4, r0
{
	free(buffer);
   d5f6e:	6800      	ldr	r0, [r0, #0]
   d5f70:	f7ff fe4a 	bl	d5c08 <free>
}
   d5f74:	4620      	mov	r0, r4
   d5f76:	bd10      	pop	{r4, pc}

000d5f78 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5f78:	b510      	push	{r4, lr}
   d5f7a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5f7c:	6800      	ldr	r0, [r0, #0]
   d5f7e:	b108      	cbz	r0, d5f84 <_ZN6String10invalidateEv+0xc>
   d5f80:	f7ff fe42 	bl	d5c08 <free>
	buffer = NULL;
   d5f84:	2300      	movs	r3, #0
   d5f86:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5f88:	60a3      	str	r3, [r4, #8]
   d5f8a:	6063      	str	r3, [r4, #4]
   d5f8c:	bd10      	pop	{r4, pc}

000d5f8e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5f8e:	b538      	push	{r3, r4, r5, lr}
   d5f90:	4604      	mov	r4, r0
   d5f92:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f94:	6800      	ldr	r0, [r0, #0]
   d5f96:	3101      	adds	r1, #1
   d5f98:	f7ff fe3e 	bl	d5c18 <realloc>
	if (newbuffer) {
   d5f9c:	b110      	cbz	r0, d5fa4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f9e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5fa2:	2001      	movs	r0, #1
	}
	return 0;
}
   d5fa4:	bd38      	pop	{r3, r4, r5, pc}

000d5fa6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5fa6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5fa8:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5faa:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5fac:	b113      	cbz	r3, d5fb4 <_ZN6String7reserveEj+0xe>
   d5fae:	6843      	ldr	r3, [r0, #4]
   d5fb0:	428b      	cmp	r3, r1
   d5fb2:	d207      	bcs.n	d5fc4 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5fb4:	4620      	mov	r0, r4
   d5fb6:	f7ff ffea 	bl	d5f8e <_ZN6String12changeBufferEj>
   d5fba:	b120      	cbz	r0, d5fc6 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5fbc:	68a3      	ldr	r3, [r4, #8]
   d5fbe:	b90b      	cbnz	r3, d5fc4 <_ZN6String7reserveEj+0x1e>
   d5fc0:	6822      	ldr	r2, [r4, #0]
   d5fc2:	7013      	strb	r3, [r2, #0]
   d5fc4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5fc6:	bd10      	pop	{r4, pc}

000d5fc8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5fc8:	b570      	push	{r4, r5, r6, lr}
   d5fca:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5fcc:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5fce:	4604      	mov	r4, r0
   d5fd0:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5fd2:	f7ff ffe8 	bl	d5fa6 <_ZN6String7reserveEj>
   d5fd6:	b918      	cbnz	r0, d5fe0 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5fd8:	4620      	mov	r0, r4
   d5fda:	f7ff ffcd 	bl	d5f78 <_ZN6String10invalidateEv>
		return *this;
   d5fde:	e009      	b.n	d5ff4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5fe0:	462a      	mov	r2, r5
   d5fe2:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5fe4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5fe6:	6820      	ldr	r0, [r4, #0]
   d5fe8:	f001 fcaa 	bl	d7940 <memcpy>
	buffer[len] = 0;
   d5fec:	6822      	ldr	r2, [r4, #0]
   d5fee:	68a3      	ldr	r3, [r4, #8]
   d5ff0:	2100      	movs	r1, #0
   d5ff2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5ff4:	4620      	mov	r0, r4
   d5ff6:	bd70      	pop	{r4, r5, r6, pc}

000d5ff8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5ff8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ffa:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5ffc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5ffe:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6000:	6043      	str	r3, [r0, #4]
	len = 0;
   d6002:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6004:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6006:	460d      	mov	r5, r1
   d6008:	b139      	cbz	r1, d601a <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d600a:	4608      	mov	r0, r1
   d600c:	f001 fd00 	bl	d7a10 <strlen>
   d6010:	4629      	mov	r1, r5
   d6012:	4602      	mov	r2, r0
   d6014:	4620      	mov	r0, r4
   d6016:	f7ff ffd7 	bl	d5fc8 <_ZN6String4copyEPKcj>
}
   d601a:	4620      	mov	r0, r4
   d601c:	bd38      	pop	{r3, r4, r5, pc}

000d601e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d601e:	b538      	push	{r3, r4, r5, lr}
   d6020:	4605      	mov	r5, r0
	if (buffer) {
   d6022:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6024:	460c      	mov	r4, r1
	if (buffer) {
   d6026:	b160      	cbz	r0, d6042 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
   d6028:	686a      	ldr	r2, [r5, #4]
   d602a:	688b      	ldr	r3, [r1, #8]
   d602c:	429a      	cmp	r2, r3
   d602e:	d306      	bcc.n	d603e <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
   d6030:	6809      	ldr	r1, [r1, #0]
   d6032:	f001 fce5 	bl	d7a00 <strcpy>
			len = rhs.len;
   d6036:	68a3      	ldr	r3, [r4, #8]
   d6038:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d603a:	2300      	movs	r3, #0
   d603c:	e00a      	b.n	d6054 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
   d603e:	f7ff fde3 	bl	d5c08 <free>
		}
	}
	buffer = rhs.buffer;
   d6042:	6823      	ldr	r3, [r4, #0]
   d6044:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d6046:	6863      	ldr	r3, [r4, #4]
   d6048:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d604a:	68a3      	ldr	r3, [r4, #8]
   d604c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d604e:	2300      	movs	r3, #0
   d6050:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
   d6052:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
   d6054:	60a3      	str	r3, [r4, #8]
   d6056:	bd38      	pop	{r3, r4, r5, pc}

000d6058 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6058:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d605a:	b510      	push	{r4, lr}
   d605c:	460b      	mov	r3, r1
   d605e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6060:	d007      	beq.n	d6072 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6062:	6809      	ldr	r1, [r1, #0]
   d6064:	b119      	cbz	r1, d606e <_ZN6StringaSERKS_+0x16>
   d6066:	689a      	ldr	r2, [r3, #8]
   d6068:	f7ff ffae 	bl	d5fc8 <_ZN6String4copyEPKcj>
   d606c:	e001      	b.n	d6072 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d606e:	f7ff ff83 	bl	d5f78 <_ZN6String10invalidateEv>

	return *this;
}
   d6072:	4620      	mov	r0, r4
   d6074:	bd10      	pop	{r4, pc}

000d6076 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6076:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6078:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d607a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d607c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d607e:	6043      	str	r3, [r0, #4]
	len = 0;
   d6080:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6082:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6084:	f7ff ffe8 	bl	d6058 <_ZN6StringaSERKS_>
}
   d6088:	4620      	mov	r0, r4
   d608a:	bd10      	pop	{r4, pc}

000d608c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d608c:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
   d608e:	b510      	push	{r4, lr}
   d6090:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6092:	d001      	beq.n	d6098 <_ZN6StringaSEOS_+0xc>
   d6094:	f7ff ffc3 	bl	d601e <_ZN6String4moveERS_>
	return *this;
}
   d6098:	4620      	mov	r0, r4
   d609a:	bd10      	pop	{r4, pc}

000d609c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d609c:	b538      	push	{r3, r4, r5, lr}
   d609e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d60a0:	460c      	mov	r4, r1
   d60a2:	b141      	cbz	r1, d60b6 <_ZN6StringaSEPKc+0x1a>
   d60a4:	4608      	mov	r0, r1
   d60a6:	f001 fcb3 	bl	d7a10 <strlen>
   d60aa:	4621      	mov	r1, r4
   d60ac:	4602      	mov	r2, r0
   d60ae:	4628      	mov	r0, r5
   d60b0:	f7ff ff8a 	bl	d5fc8 <_ZN6String4copyEPKcj>
   d60b4:	e001      	b.n	d60ba <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d60b6:	f7ff ff5f 	bl	d5f78 <_ZN6String10invalidateEv>

	return *this;
}
   d60ba:	4628      	mov	r0, r5
   d60bc:	bd38      	pop	{r3, r4, r5, pc}

000d60be <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d60be:	b570      	push	{r4, r5, r6, lr}
   d60c0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d60c2:	b19a      	cbz	r2, d60ec <_ZNK6String8getBytesEPhjj+0x2e>
   d60c4:	b191      	cbz	r1, d60ec <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d60c6:	6885      	ldr	r5, [r0, #8]
   d60c8:	429d      	cmp	r5, r3
   d60ca:	d802      	bhi.n	d60d2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d60cc:	2300      	movs	r3, #0
   d60ce:	700b      	strb	r3, [r1, #0]
		return;
   d60d0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d60d2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d60d4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d60d6:	6801      	ldr	r1, [r0, #0]
   d60d8:	42ac      	cmp	r4, r5
   d60da:	bf28      	it	cs
   d60dc:	462c      	movcs	r4, r5
   d60de:	4419      	add	r1, r3
   d60e0:	4622      	mov	r2, r4
   d60e2:	4630      	mov	r0, r6
   d60e4:	f001 fcd5 	bl	d7a92 <strncpy>
	buf[n] = 0;
   d60e8:	2300      	movs	r3, #0
   d60ea:	5533      	strb	r3, [r6, r4]
   d60ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d60f0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d60f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d60f2:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d60f4:	460f      	mov	r7, r1
   d60f6:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d60f8:	490c      	ldr	r1, [pc, #48]	; (d612c <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d60fa:	bf88      	it	hi
   d60fc:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d60fe:	4614      	mov	r4, r2
   d6100:	4606      	mov	r6, r0
	if (left > right) {
   d6102:	bf84      	itt	hi
   d6104:	462c      	movhi	r4, r5
   d6106:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6108:	f7ff ff76 	bl	d5ff8 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d610c:	68ba      	ldr	r2, [r7, #8]
   d610e:	4294      	cmp	r4, r2
   d6110:	d80a      	bhi.n	d6128 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6112:	6839      	ldr	r1, [r7, #0]
   d6114:	4295      	cmp	r5, r2
   d6116:	bf94      	ite	ls
   d6118:	ebc4 0205 	rsbls	r2, r4, r5
   d611c:	ebc4 0202 	rsbhi	r2, r4, r2
   d6120:	4421      	add	r1, r4
   d6122:	4630      	mov	r0, r6
   d6124:	f7ff ff50 	bl	d5fc8 <_ZN6String4copyEPKcj>
	return out;
}
   d6128:	4630      	mov	r0, r6
   d612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d612c:	000d89ad 	.word	0x000d89ad

000d6130 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6130:	b510      	push	{r4, lr}
   d6132:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6134:	6800      	ldr	r0, [r0, #0]
   d6136:	b108      	cbz	r0, d613c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6138:	f7ff fb82 	bl	d5840 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d613c:	4620      	mov	r0, r4
   d613e:	bd10      	pop	{r4, pc}

000d6140 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6140:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6142:	4c06      	ldr	r4, [pc, #24]	; (d615c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6144:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6146:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6148:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d614a:	f7ff fb71 	bl	d5830 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d614e:	4620      	mov	r0, r4
   d6150:	4a03      	ldr	r2, [pc, #12]	; (d6160 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6152:	4904      	ldr	r1, [pc, #16]	; (d6164 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6158:	f001 b92e 	b.w	d73b8 <__aeabi_atexit>
   d615c:	2003e3b0 	.word	0x2003e3b0
   d6160:	2003e1d0 	.word	0x2003e1d0
   d6164:	000d6131 	.word	0x000d6131

000d6168 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d616a:	4606      	mov	r6, r0
   d616c:	460d      	mov	r5, r1
   d616e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6170:	2400      	movs	r4, #0
  while (size--) {
   d6172:	42bd      	cmp	r5, r7
   d6174:	d00c      	beq.n	d6190 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6176:	6833      	ldr	r3, [r6, #0]
   d6178:	f815 1b01 	ldrb.w	r1, [r5], #1
   d617c:	689b      	ldr	r3, [r3, #8]
   d617e:	4630      	mov	r0, r6
   d6180:	4798      	blx	r3
     if (chunk>=0)
   d6182:	2800      	cmp	r0, #0
   d6184:	db01      	blt.n	d618a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6186:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6188:	e7f3      	b.n	d6172 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d618a:	2c00      	cmp	r4, #0
   d618c:	bf08      	it	eq
   d618e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6190:	4620      	mov	r0, r4
   d6192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6194 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6194:	b570      	push	{r4, r5, r6, lr}
   d6196:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6198:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d619a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d619c:	b149      	cbz	r1, d61b2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d619e:	f001 fc37 	bl	d7a10 <strlen>
   d61a2:	682b      	ldr	r3, [r5, #0]
   d61a4:	4602      	mov	r2, r0
   d61a6:	4621      	mov	r1, r4
   d61a8:	4628      	mov	r0, r5
   d61aa:	68db      	ldr	r3, [r3, #12]
    }
   d61ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d61b0:	4718      	bx	r3
    }
   d61b2:	bd70      	pop	{r4, r5, r6, pc}

000d61b4 <_ZN5Print5printEPKc>:
   d61b4:	b508      	push	{r3, lr}
   d61b6:	f7ff ffed 	bl	d6194 <_ZN5Print5writeEPKc>
   d61ba:	bd08      	pop	{r3, pc}

000d61bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d61bc:	6803      	ldr	r3, [r0, #0]
   d61be:	689b      	ldr	r3, [r3, #8]
   d61c0:	4718      	bx	r3

000d61c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d61c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d61c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d61c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d61c8:	f7ff fff8 	bl	d61bc <_ZN5Print5printEc>
  n += print('\n');
   d61cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d61ce:	4604      	mov	r4, r0
  n += print('\n');
   d61d0:	4628      	mov	r0, r5
   d61d2:	f7ff fff3 	bl	d61bc <_ZN5Print5printEc>
  return n;
}
   d61d6:	4420      	add	r0, r4
   d61d8:	bd38      	pop	{r3, r4, r5, pc}

000d61da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d61da:	b538      	push	{r3, r4, r5, lr}
   d61dc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d61de:	f7ff ffd9 	bl	d6194 <_ZN5Print5writeEPKc>
   d61e2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d61e4:	4628      	mov	r0, r5
   d61e6:	f7ff ffec 	bl	d61c2 <_ZN5Print7printlnEv>
  return n;
}
   d61ea:	4420      	add	r0, r4
   d61ec:	bd38      	pop	{r3, r4, r5, pc}

000d61ee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d61ee:	b530      	push	{r4, r5, lr}
   d61f0:	b08b      	sub	sp, #44	; 0x2c
   d61f2:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d61f4:	2100      	movs	r1, #0
   d61f6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61fa:	2a01      	cmp	r2, #1
   d61fc:	bf98      	it	ls
   d61fe:	220a      	movls	r2, #10
   d6200:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6204:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6208:	fb05 3312 	mls	r3, r5, r2, r3
   d620c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6210:	2b09      	cmp	r3, #9
   d6212:	bf94      	ite	ls
   d6214:	3330      	addls	r3, #48	; 0x30
   d6216:	3337      	addhi	r3, #55	; 0x37
   d6218:	b2db      	uxtb	r3, r3
   d621a:	4621      	mov	r1, r4
   d621c:	f804 3901 	strb.w	r3, [r4], #-1
   d6220:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6222:	2d00      	cmp	r5, #0
   d6224:	d1ee      	bne.n	d6204 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6226:	f7ff ffb5 	bl	d6194 <_ZN5Print5writeEPKc>
}
   d622a:	b00b      	add	sp, #44	; 0x2c
   d622c:	bd30      	pop	{r4, r5, pc}

000d622e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d622e:	b40c      	push	{r2, r3}
   d6230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6234:	b087      	sub	sp, #28
   d6236:	af00      	add	r7, sp, #0
   d6238:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d623c:	4605      	mov	r5, r0
   d623e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6242:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6244:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6246:	4623      	mov	r3, r4
   d6248:	464a      	mov	r2, r9
   d624a:	2114      	movs	r1, #20
   d624c:	1d38      	adds	r0, r7, #4
   d624e:	f7ff fcfb 	bl	d5c48 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6252:	2813      	cmp	r0, #19
   d6254:	d805      	bhi.n	d6262 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6256:	1d39      	adds	r1, r7, #4
   d6258:	4628      	mov	r0, r5
   d625a:	f7ff ff9b 	bl	d6194 <_ZN5Print5writeEPKc>
   d625e:	4604      	mov	r4, r0
   d6260:	e013      	b.n	d628a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6262:	f100 0308 	add.w	r3, r0, #8
   d6266:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d626a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d626c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6270:	1c41      	adds	r1, r0, #1
   d6272:	4623      	mov	r3, r4
   d6274:	464a      	mov	r2, r9
   d6276:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6278:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d627a:	f7ff fce5 	bl	d5c48 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d627e:	4669      	mov	r1, sp
   d6280:	4628      	mov	r0, r5
   d6282:	f7ff ff87 	bl	d6194 <_ZN5Print5writeEPKc>
   d6286:	4604      	mov	r4, r0
   d6288:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d628a:	b11e      	cbz	r6, d6294 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d628c:	4628      	mov	r0, r5
   d628e:	f7ff ff98 	bl	d61c2 <_ZN5Print7printlnEv>
   d6292:	4404      	add	r4, r0
    return n;
}
   d6294:	4620      	mov	r0, r4
   d6296:	371c      	adds	r7, #28
   d6298:	46bd      	mov	sp, r7
   d629a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d629e:	b002      	add	sp, #8
   d62a0:	4770      	bx	lr
	...

000d62a4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d62a4:	4b01      	ldr	r3, [pc, #4]	; (d62ac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d62a6:	4a02      	ldr	r2, [pc, #8]	; (d62b0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d62a8:	601a      	str	r2, [r3, #0]
   d62aa:	4770      	bx	lr
   d62ac:	2003e3b4 	.word	0x2003e3b4
   d62b0:	000d8c53 	.word	0x000d8c53

000d62b4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d62b4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d62b6:	2000      	movs	r0, #0
   d62b8:	f7ff fc86 	bl	d5bc8 <spark_sync_time_pending>
   d62bc:	b128      	cbz	r0, d62ca <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d62be:	f7ff fc73 	bl	d5ba8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d62c2:	f080 0001 	eor.w	r0, r0, #1
   d62c6:	b2c0      	uxtb	r0, r0
   d62c8:	bd08      	pop	{r3, pc}
   d62ca:	2001      	movs	r0, #1
    }
   d62cc:	bd08      	pop	{r3, pc}
	...

000d62d0 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d62d0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d62d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d62d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d62dc:	d40f      	bmi.n	d62fe <_ZN9TimeClass4zoneEf+0x2e>
   d62de:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d62e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d62e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d62ea:	dc08      	bgt.n	d62fe <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d62ec:	eddf 7a04 	vldr	s15, [pc, #16]	; d6300 <_ZN9TimeClass4zoneEf+0x30>
   d62f0:	4b04      	ldr	r3, [pc, #16]	; (d6304 <_ZN9TimeClass4zoneEf+0x34>)
   d62f2:	ee20 0a27 	vmul.f32	s0, s0, s15
   d62f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d62fa:	ed83 0a00 	vstr	s0, [r3]
   d62fe:	4770      	bx	lr
   d6300:	45610000 	.word	0x45610000
   d6304:	2003e3c0 	.word	0x2003e3c0

000d6308 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6308:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d630a:	4b0e      	ldr	r3, [pc, #56]	; (d6344 <_ZN9TimeClass7timeStrEl+0x3c>)
   d630c:	681b      	ldr	r3, [r3, #0]
   d630e:	4419      	add	r1, r3
   d6310:	4b0d      	ldr	r3, [pc, #52]	; (d6348 <_ZN9TimeClass7timeStrEl+0x40>)
   d6312:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d6314:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d6316:	a802      	add	r0, sp, #8
   d6318:	4419      	add	r1, r3
   d631a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d631e:	f001 fa03 	bl	d7728 <localtime>
        char* ascstr = asctime(calendar_time);
   d6322:	f001 f9b3 	bl	d768c <asctime>
   d6326:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d6328:	f001 fb72 	bl	d7a10 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d632c:	4428      	add	r0, r5
   d632e:	2300      	movs	r3, #0
   d6330:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d6334:	4629      	mov	r1, r5
   d6336:	4620      	mov	r0, r4
   d6338:	f7ff fe5e 	bl	d5ff8 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d633c:	4620      	mov	r0, r4
   d633e:	b003      	add	sp, #12
   d6340:	bd30      	pop	{r4, r5, pc}
   d6342:	bf00      	nop
   d6344:	2003e3c0 	.word	0x2003e3c0
   d6348:	2003e3bc 	.word	0x2003e3bc

000d634c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d634c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d634e:	2000      	movs	r0, #0
   d6350:	f7ff fa4e 	bl	d57f0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d6354:	4604      	mov	r4, r0
   d6356:	b968      	cbnz	r0, d6374 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6358:	f7ff fb9a 	bl	d5a90 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d635c:	2801      	cmp	r0, #1
   d635e:	d10b      	bne.n	d6378 <_ZN9TimeClass7isValidEv+0x2c>
   d6360:	4620      	mov	r0, r4
   d6362:	f7ff fbad 	bl	d5ac0 <system_thread_get_state>
   d6366:	b938      	cbnz	r0, d6378 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d6368:	f7ff ffa4 	bl	d62b4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d636c:	b930      	cbnz	r0, d637c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d636e:	f7ff fc13 	bl	d5b98 <spark_process>
   d6372:	e7f9      	b.n	d6368 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d6374:	2001      	movs	r0, #1
   d6376:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d6378:	2000      	movs	r0, #0
   d637a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d637c:	f7ff ff9a 	bl	d62b4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d6380:	2000      	movs	r0, #0
   d6382:	f7ff fa35 	bl	d57f0 <HAL_RTC_Time_Is_Valid>
   d6386:	3000      	adds	r0, #0
   d6388:	bf18      	it	ne
   d638a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d638c:	bd10      	pop	{r4, pc}

000d638e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d638e:	b508      	push	{r3, lr}
    (void)isValid();
   d6390:	f7ff ffdc 	bl	d634c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d6394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d6398:	f7ff ba22 	b.w	d57e0 <HAL_RTC_Get_UnixTime>

000d639c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d639c:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d639e:	681a      	ldr	r2, [r3, #0]
   d63a0:	4b02      	ldr	r3, [pc, #8]	; (d63ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d63a2:	601a      	str	r2, [r3, #0]
   d63a4:	4770      	bx	lr
   d63a6:	bf00      	nop
   d63a8:	2003e118 	.word	0x2003e118
   d63ac:	2003e3b8 	.word	0x2003e3b8

000d63b0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d63b0:	2100      	movs	r1, #0
   d63b2:	f7ff bb7d 	b.w	d5ab0 <system_delay_ms>

000d63b6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63b6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d63b8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d63ba:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d63bc:	b113      	cbz	r3, d63c4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d63be:	2203      	movs	r2, #3
   d63c0:	4601      	mov	r1, r0
   d63c2:	4798      	blx	r3
    }
   d63c4:	4620      	mov	r0, r4
   d63c6:	bd10      	pop	{r4, pc}

000d63c8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d63c8:	b510      	push	{r4, lr}
   d63ca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63cc:	f7ff fff3 	bl	d63b6 <_ZNSt14_Function_baseD1Ev>
   d63d0:	4620      	mov	r0, r4
   d63d2:	bd10      	pop	{r4, pc}

000d63d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63d4:	4803      	ldr	r0, [pc, #12]	; (d63e4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d63d6:	4a04      	ldr	r2, [pc, #16]	; (d63e8 <_GLOBAL__sub_I_RGB+0x14>)
   d63d8:	4904      	ldr	r1, [pc, #16]	; (d63ec <_GLOBAL__sub_I_RGB+0x18>)
   d63da:	2300      	movs	r3, #0
   d63dc:	6083      	str	r3, [r0, #8]
   d63de:	f000 bfeb 	b.w	d73b8 <__aeabi_atexit>
   d63e2:	bf00      	nop
   d63e4:	2003e3c4 	.word	0x2003e3c4
   d63e8:	2003e1d0 	.word	0x2003e1d0
   d63ec:	000d63c9 	.word	0x000d63c9

000d63f0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d63f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d63f2:	4b0c      	ldr	r3, [pc, #48]	; (d6424 <serialEventRun+0x34>)
   d63f4:	b133      	cbz	r3, d6404 <serialEventRun+0x14>
   d63f6:	f000 f96d 	bl	d66d4 <_Z16_fetch_usbserialv>
   d63fa:	6803      	ldr	r3, [r0, #0]
   d63fc:	691b      	ldr	r3, [r3, #16]
   d63fe:	4798      	blx	r3
   d6400:	2800      	cmp	r0, #0
   d6402:	dc09      	bgt.n	d6418 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6404:	4b08      	ldr	r3, [pc, #32]	; (d6428 <serialEventRun+0x38>)
   d6406:	b163      	cbz	r3, d6422 <serialEventRun+0x32>
   d6408:	f000 f9e6 	bl	d67d8 <_Z22__fetch_global_Serial1v>
   d640c:	6803      	ldr	r3, [r0, #0]
   d640e:	691b      	ldr	r3, [r3, #16]
   d6410:	4798      	blx	r3
   d6412:	2800      	cmp	r0, #0
   d6414:	dc03      	bgt.n	d641e <serialEventRun+0x2e>
   d6416:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6418:	f3af 8000 	nop.w
   d641c:	e7f2      	b.n	d6404 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d641e:	f3af 8000 	nop.w
   d6422:	bd08      	pop	{r3, pc}
	...

000d642c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d642c:	b508      	push	{r3, lr}
	serialEventRun();
   d642e:	f7ff ffdf 	bl	d63f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6432:	f7ff f9cd 	bl	d57d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6436:	4b01      	ldr	r3, [pc, #4]	; (d643c <_post_loop+0x10>)
   d6438:	6018      	str	r0, [r3, #0]
   d643a:	bd08      	pop	{r3, pc}
   d643c:	2003e708 	.word	0x2003e708

000d6440 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6440:	4802      	ldr	r0, [pc, #8]	; (d644c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6442:	4a03      	ldr	r2, [pc, #12]	; (d6450 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6444:	4903      	ldr	r1, [pc, #12]	; (d6454 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6446:	1a12      	subs	r2, r2, r0
   d6448:	f001 ba7a 	b.w	d7940 <memcpy>
   d644c:	2003f400 	.word	0x2003f400
   d6450:	2003f404 	.word	0x2003f404
   d6454:	000d9140 	.word	0x000d9140

000d6458 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6458:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d645a:	2300      	movs	r3, #0
   d645c:	9300      	str	r3, [sp, #0]
   d645e:	461a      	mov	r2, r3
   d6460:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6464:	f7ff fb3e 	bl	d5ae4 <system_ctrl_set_result>
}
   d6468:	b003      	add	sp, #12
   d646a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6470 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6470:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6472:	8843      	ldrh	r3, [r0, #2]
   d6474:	2b0a      	cmp	r3, #10
   d6476:	d008      	beq.n	d648a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6478:	2b50      	cmp	r3, #80	; 0x50
   d647a:	d109      	bne.n	d6490 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d647c:	4b09      	ldr	r3, [pc, #36]	; (d64a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d647e:	681b      	ldr	r3, [r3, #0]
   d6480:	b13b      	cbz	r3, d6492 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6482:	b003      	add	sp, #12
   d6484:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6488:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d648a:	f7ff ffe5 	bl	d6458 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d648e:	e006      	b.n	d649e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6490:	2300      	movs	r3, #0
   d6492:	9300      	str	r3, [sp, #0]
   d6494:	461a      	mov	r2, r3
   d6496:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d649a:	f7ff fb23 	bl	d5ae4 <system_ctrl_set_result>
        break;
    }
}
   d649e:	b003      	add	sp, #12
   d64a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d64a4:	2003e3d4 	.word	0x2003e3d4

000d64a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d64a8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d64aa:	4c10      	ldr	r4, [pc, #64]	; (d64ec <module_user_init_hook+0x44>)
   d64ac:	4d10      	ldr	r5, [pc, #64]	; (d64f0 <module_user_init_hook+0x48>)
   d64ae:	6823      	ldr	r3, [r4, #0]
   d64b0:	42ab      	cmp	r3, r5
   d64b2:	4b10      	ldr	r3, [pc, #64]	; (d64f4 <module_user_init_hook+0x4c>)
   d64b4:	bf0c      	ite	eq
   d64b6:	2201      	moveq	r2, #1
   d64b8:	2200      	movne	r2, #0
   d64ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d64bc:	d002      	beq.n	d64c4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d64be:	f7ff ffbf 	bl	d6440 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d64c2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d64c4:	f7ff f974 	bl	d57b0 <HAL_RNG_GetRandomNumber>
   d64c8:	4604      	mov	r4, r0
    srand(seed);
   d64ca:	f001 fa67 	bl	d799c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d64ce:	4b0a      	ldr	r3, [pc, #40]	; (d64f8 <module_user_init_hook+0x50>)
   d64d0:	b113      	cbz	r3, d64d8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d64d2:	4620      	mov	r0, r4
   d64d4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d64d8:	2100      	movs	r1, #0
   d64da:	4807      	ldr	r0, [pc, #28]	; (d64f8 <module_user_init_hook+0x50>)
   d64dc:	f7ff fb84 	bl	d5be8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d64e0:	2100      	movs	r1, #0
   d64e2:	4806      	ldr	r0, [pc, #24]	; (d64fc <module_user_init_hook+0x54>)
}
   d64e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d64e8:	f7ff baf2 	b.w	d5ad0 <system_ctrl_set_app_request_handler>
   d64ec:	2003f400 	.word	0x2003f400
   d64f0:	9a271c1e 	.word	0x9a271c1e
   d64f4:	2003e3d8 	.word	0x2003e3d8
   d64f8:	00000000 	.word	0x00000000
   d64fc:	000d6471 	.word	0x000d6471

000d6500 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6500:	4770      	bx	lr

000d6502 <_ZN9IPAddressD0Ev>:
   d6502:	b510      	push	{r4, lr}
   d6504:	2118      	movs	r1, #24
   d6506:	4604      	mov	r4, r0
   d6508:	f000 ff64 	bl	d73d4 <_ZdlPvj>
   d650c:	4620      	mov	r0, r4
   d650e:	bd10      	pop	{r4, pc}

000d6510 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6510:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6512:	7d03      	ldrb	r3, [r0, #20]
   d6514:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6516:	b08d      	sub	sp, #52	; 0x34
   d6518:	460e      	mov	r6, r1
   d651a:	f100 0704 	add.w	r7, r0, #4
   d651e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6522:	d002      	beq.n	d652a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6524:	f100 0508 	add.w	r5, r0, #8
   d6528:	e018      	b.n	d655c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d652a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d652c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d652e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6532:	232f      	movs	r3, #47	; 0x2f
   d6534:	462a      	mov	r2, r5
   d6536:	200a      	movs	r0, #10
   d6538:	f7ff f98a 	bl	d5850 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d653c:	4628      	mov	r0, r5
   d653e:	f001 fa67 	bl	d7a10 <strlen>
   d6542:	6833      	ldr	r3, [r6, #0]
   d6544:	4602      	mov	r2, r0
   d6546:	68db      	ldr	r3, [r3, #12]
   d6548:	4629      	mov	r1, r5
   d654a:	4630      	mov	r0, r6
   d654c:	4798      	blx	r3
   d654e:	e00f      	b.n	d6570 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6550:	b124      	cbz	r4, d655c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6552:	212e      	movs	r1, #46	; 0x2e
   d6554:	4630      	mov	r0, r6
   d6556:	f7ff fe31 	bl	d61bc <_ZN5Print5printEc>
   d655a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d655c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6560:	220a      	movs	r2, #10
   d6562:	4630      	mov	r0, r6
   d6564:	f7ff fe43 	bl	d61ee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6568:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d656a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d656c:	d1f0      	bne.n	d6550 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d656e:	4620      	mov	r0, r4
    }
    return n;
}
   d6570:	b00d      	add	sp, #52	; 0x34
   d6572:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6574 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6574:	b510      	push	{r4, lr}
   d6576:	4b05      	ldr	r3, [pc, #20]	; (d658c <_ZN9IPAddressC1Ev+0x18>)
   d6578:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d657a:	2211      	movs	r2, #17
   d657c:	f840 3b04 	str.w	r3, [r0], #4
   d6580:	2100      	movs	r1, #0
   d6582:	f001 fa03 	bl	d798c <memset>
{
    clear();
}
   d6586:	4620      	mov	r0, r4
   d6588:	bd10      	pop	{r4, pc}
   d658a:	bf00      	nop
   d658c:	000d8ce0 	.word	0x000d8ce0

000d6590 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6590:	4603      	mov	r3, r0
   d6592:	4a07      	ldr	r2, [pc, #28]	; (d65b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6594:	b510      	push	{r4, lr}
   d6596:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d659a:	f101 0210 	add.w	r2, r1, #16
   d659e:	f851 4b04 	ldr.w	r4, [r1], #4
   d65a2:	f843 4b04 	str.w	r4, [r3], #4
   d65a6:	4291      	cmp	r1, r2
   d65a8:	d1f9      	bne.n	d659e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d65aa:	780a      	ldrb	r2, [r1, #0]
   d65ac:	701a      	strb	r2, [r3, #0]
}
   d65ae:	bd10      	pop	{r4, pc}
   d65b0:	000d8ce0 	.word	0x000d8ce0

000d65b4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d65b4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d65b6:	2b04      	cmp	r3, #4
   d65b8:	d101      	bne.n	d65be <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d65ba:	6840      	ldr	r0, [r0, #4]
   d65bc:	e008      	b.n	d65d0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d65be:	2b06      	cmp	r3, #6
   d65c0:	d10a      	bne.n	d65d8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d65c2:	6843      	ldr	r3, [r0, #4]
   d65c4:	b953      	cbnz	r3, d65dc <_ZNK9IPAddresscvbEv+0x28>
   d65c6:	6883      	ldr	r3, [r0, #8]
   d65c8:	b943      	cbnz	r3, d65dc <_ZNK9IPAddresscvbEv+0x28>
   d65ca:	68c3      	ldr	r3, [r0, #12]
   d65cc:	b933      	cbnz	r3, d65dc <_ZNK9IPAddresscvbEv+0x28>
   d65ce:	6900      	ldr	r0, [r0, #16]
   d65d0:	3000      	adds	r0, #0
   d65d2:	bf18      	it	ne
   d65d4:	2001      	movne	r0, #1
   d65d6:	4770      	bx	lr
    } else {
        return false;
   d65d8:	2000      	movs	r0, #0
   d65da:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d65dc:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d65de:	4770      	bx	lr

000d65e0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d65e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d65e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d65e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d65ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d65ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d65f2:	2304      	movs	r3, #4
   d65f4:	6041      	str	r1, [r0, #4]
   d65f6:	7503      	strb	r3, [r0, #20]
   d65f8:	bd10      	pop	{r4, pc}

000d65fa <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d65fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d65fc:	780d      	ldrb	r5, [r1, #0]
   d65fe:	788b      	ldrb	r3, [r1, #2]
   d6600:	784a      	ldrb	r2, [r1, #1]
   d6602:	78c9      	ldrb	r1, [r1, #3]
   d6604:	9100      	str	r1, [sp, #0]
   d6606:	4629      	mov	r1, r5
   d6608:	f7ff ffea 	bl	d65e0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d660c:	b003      	add	sp, #12
   d660e:	bd30      	pop	{r4, r5, pc}

000d6610 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6610:	7441      	strb	r1, [r0, #17]
   d6612:	4770      	bx	lr

000d6614 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6614:	4770      	bx	lr

000d6616 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6616:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6618:	2100      	movs	r1, #0
   d661a:	7c00      	ldrb	r0, [r0, #16]
   d661c:	f7ff fa10 	bl	d5a40 <HAL_USB_USART_Receive_Data>
}
   d6620:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6624:	bf28      	it	cs
   d6626:	f04f 30ff 	movcs.w	r0, #4294967295
   d662a:	bd08      	pop	{r3, pc}

000d662c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d662c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d662e:	2101      	movs	r1, #1
   d6630:	7c00      	ldrb	r0, [r0, #16]
   d6632:	f7ff fa05 	bl	d5a40 <HAL_USB_USART_Receive_Data>
}
   d6636:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d663a:	bf28      	it	cs
   d663c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6640:	bd08      	pop	{r3, pc}

000d6642 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6642:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6644:	7c00      	ldrb	r0, [r0, #16]
   d6646:	f7ff f9f3 	bl	d5a30 <HAL_USB_USART_Available_Data_For_Write>
}
   d664a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d664e:	bd08      	pop	{r3, pc}

000d6650 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6650:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6652:	7c00      	ldrb	r0, [r0, #16]
   d6654:	f7ff f9e4 	bl	d5a20 <HAL_USB_USART_Available_Data>
}
   d6658:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d665c:	bd08      	pop	{r3, pc}

000d665e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d665e:	7c00      	ldrb	r0, [r0, #16]
   d6660:	f7ff b9fe 	b.w	d5a60 <HAL_USB_USART_Flush_Data>

000d6664 <_ZN9USBSerialD0Ev>:
   d6664:	b510      	push	{r4, lr}
   d6666:	2114      	movs	r1, #20
   d6668:	4604      	mov	r4, r0
   d666a:	f000 feb3 	bl	d73d4 <_ZdlPvj>
   d666e:	4620      	mov	r0, r4
   d6670:	bd10      	pop	{r4, pc}

000d6672 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6672:	b538      	push	{r3, r4, r5, lr}
   d6674:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6676:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6678:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d667a:	f7ff f9d9 	bl	d5a30 <HAL_USB_USART_Available_Data_For_Write>
   d667e:	2800      	cmp	r0, #0
   d6680:	dc01      	bgt.n	d6686 <_ZN9USBSerial5writeEh+0x14>
   d6682:	7c60      	ldrb	r0, [r4, #17]
   d6684:	b128      	cbz	r0, d6692 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6686:	4629      	mov	r1, r5
   d6688:	7c20      	ldrb	r0, [r4, #16]
   d668a:	f7ff f9e1 	bl	d5a50 <HAL_USB_USART_Send_Data>
   d668e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6692:	bd38      	pop	{r3, r4, r5, pc}

000d6694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6694:	b510      	push	{r4, lr}
   d6696:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6698:	2300      	movs	r3, #0
   d669a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d669c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66a0:	60a3      	str	r3, [r4, #8]
   d66a2:	4b05      	ldr	r3, [pc, #20]	; (d66b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d66a4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d66a6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d66a8:	4608      	mov	r0, r1
{
  _serial = serial;
   d66aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d66ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d66ae:	4611      	mov	r1, r2
   d66b0:	f7ff f9a6 	bl	d5a00 <HAL_USB_USART_Init>
}
   d66b4:	4620      	mov	r0, r4
   d66b6:	bd10      	pop	{r4, pc}
   d66b8:	000d8cf4 	.word	0x000d8cf4

000d66bc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d66bc:	2200      	movs	r2, #0
   d66be:	7c00      	ldrb	r0, [r0, #16]
   d66c0:	f7ff b9a6 	b.w	d5a10 <HAL_USB_USART_Begin>

000d66c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d66c6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d66c8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d66ca:	2100      	movs	r1, #0
   d66cc:	f001 f95e 	bl	d798c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d66d0:	4620      	mov	r0, r4
   d66d2:	bd10      	pop	{r4, pc}

000d66d4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d66d4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66d6:	4d0e      	ldr	r5, [pc, #56]	; (d6710 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d66d8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d66da:	a801      	add	r0, sp, #4
   d66dc:	f7ff fff2 	bl	d66c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d66e0:	6829      	ldr	r1, [r5, #0]
   d66e2:	f011 0401 	ands.w	r4, r1, #1
   d66e6:	d110      	bne.n	d670a <_Z16_fetch_usbserialv+0x36>
   d66e8:	4628      	mov	r0, r5
   d66ea:	f7fd fce5 	bl	d40b8 <__cxa_guard_acquire>
   d66ee:	b160      	cbz	r0, d670a <_Z16_fetch_usbserialv+0x36>
   d66f0:	aa01      	add	r2, sp, #4
   d66f2:	4621      	mov	r1, r4
   d66f4:	4807      	ldr	r0, [pc, #28]	; (d6714 <_Z16_fetch_usbserialv+0x40>)
   d66f6:	f7ff ffcd 	bl	d6694 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66fa:	4628      	mov	r0, r5
   d66fc:	f7fd fce1 	bl	d40c2 <__cxa_guard_release>
   d6700:	4a05      	ldr	r2, [pc, #20]	; (d6718 <_Z16_fetch_usbserialv+0x44>)
   d6702:	4906      	ldr	r1, [pc, #24]	; (d671c <_Z16_fetch_usbserialv+0x48>)
   d6704:	4803      	ldr	r0, [pc, #12]	; (d6714 <_Z16_fetch_usbserialv+0x40>)
   d6706:	f000 fe57 	bl	d73b8 <__aeabi_atexit>
	return _usbserial;
}
   d670a:	4802      	ldr	r0, [pc, #8]	; (d6714 <_Z16_fetch_usbserialv+0x40>)
   d670c:	b007      	add	sp, #28
   d670e:	bd30      	pop	{r4, r5, pc}
   d6710:	2003e3dc 	.word	0x2003e3dc
   d6714:	2003e3e0 	.word	0x2003e3e0
   d6718:	2003e1d0 	.word	0x2003e1d0
   d671c:	000d6615 	.word	0x000d6615

000d6720 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6720:	4770      	bx	lr

000d6722 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6722:	7441      	strb	r1, [r0, #17]
   d6724:	4770      	bx	lr

000d6726 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d6726:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d6728:	7c00      	ldrb	r0, [r0, #16]
   d672a:	f7ff f8e1 	bl	d58f0 <HAL_USART_Available_Data_For_Write>
}
   d672e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6732:	bd08      	pop	{r3, pc}

000d6734 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6734:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d6736:	7c00      	ldrb	r0, [r0, #16]
   d6738:	f7ff f8b2 	bl	d58a0 <HAL_USART_Available_Data>
}
   d673c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6740:	bd08      	pop	{r3, pc}

000d6742 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6742:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d6744:	7c00      	ldrb	r0, [r0, #16]
   d6746:	f7ff f8bb 	bl	d58c0 <HAL_USART_Peek_Data>
}
   d674a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d674e:	bf28      	it	cs
   d6750:	f04f 30ff 	movcs.w	r0, #4294967295
   d6754:	bd08      	pop	{r3, pc}

000d6756 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6756:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6758:	7c00      	ldrb	r0, [r0, #16]
   d675a:	f7ff f8a9 	bl	d58b0 <HAL_USART_Read_Data>
}
   d675e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6762:	bf28      	it	cs
   d6764:	f04f 30ff 	movcs.w	r0, #4294967295
   d6768:	bd08      	pop	{r3, pc}

000d676a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d676a:	7c00      	ldrb	r0, [r0, #16]
   d676c:	f7ff b8b0 	b.w	d58d0 <HAL_USART_Flush_Data>

000d6770 <_ZN11USARTSerialD0Ev>:
   d6770:	b510      	push	{r4, lr}
   d6772:	2114      	movs	r1, #20
   d6774:	4604      	mov	r4, r0
   d6776:	f000 fe2d 	bl	d73d4 <_ZdlPvj>
   d677a:	4620      	mov	r0, r4
   d677c:	bd10      	pop	{r4, pc}

000d677e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d677e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6780:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6782:	4604      	mov	r4, r0
   d6784:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6786:	b925      	cbnz	r5, d6792 <_ZN11USARTSerial5writeEh+0x14>
   d6788:	7c00      	ldrb	r0, [r0, #16]
   d678a:	f7ff f8b1 	bl	d58f0 <HAL_USART_Available_Data_For_Write>
   d678e:	2800      	cmp	r0, #0
   d6790:	dd05      	ble.n	d679e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6792:	4631      	mov	r1, r6
   d6794:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d679a:	f7ff b879 	b.w	d5890 <HAL_USART_Write_Data>
  }
  return 0;
}
   d679e:	4628      	mov	r0, r5
   d67a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d67a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d67a4:	b510      	push	{r4, lr}
   d67a6:	4604      	mov	r4, r0
   d67a8:	4608      	mov	r0, r1
   d67aa:	4611      	mov	r1, r2
   d67ac:	2200      	movs	r2, #0
   d67ae:	6062      	str	r2, [r4, #4]
   d67b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d67b4:	60a2      	str	r2, [r4, #8]
   d67b6:	4a05      	ldr	r2, [pc, #20]	; (d67cc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d67b8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d67ba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d67bc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d67be:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d67c0:	461a      	mov	r2, r3
   d67c2:	f7ff f85d 	bl	d5880 <HAL_USART_Init>
}
   d67c6:	4620      	mov	r0, r4
   d67c8:	bd10      	pop	{r4, pc}
   d67ca:	bf00      	nop
   d67cc:	000d8d24 	.word	0x000d8d24

000d67d0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d67d0:	7c00      	ldrb	r0, [r0, #16]
   d67d2:	f7ff b885 	b.w	d58e0 <HAL_USART_Is_Enabled>
	...

000d67d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d67d8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d67da:	4d0c      	ldr	r5, [pc, #48]	; (d680c <_Z22__fetch_global_Serial1v+0x34>)
   d67dc:	6829      	ldr	r1, [r5, #0]
   d67de:	f011 0401 	ands.w	r4, r1, #1
   d67e2:	d111      	bne.n	d6808 <_Z22__fetch_global_Serial1v+0x30>
   d67e4:	4628      	mov	r0, r5
   d67e6:	f7fd fc67 	bl	d40b8 <__cxa_guard_acquire>
   d67ea:	b168      	cbz	r0, d6808 <_Z22__fetch_global_Serial1v+0x30>
   d67ec:	4a08      	ldr	r2, [pc, #32]	; (d6810 <_Z22__fetch_global_Serial1v+0x38>)
   d67ee:	4b09      	ldr	r3, [pc, #36]	; (d6814 <_Z22__fetch_global_Serial1v+0x3c>)
   d67f0:	4809      	ldr	r0, [pc, #36]	; (d6818 <_Z22__fetch_global_Serial1v+0x40>)
   d67f2:	4621      	mov	r1, r4
   d67f4:	f7ff ffd6 	bl	d67a4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d67f8:	4628      	mov	r0, r5
   d67fa:	f7fd fc62 	bl	d40c2 <__cxa_guard_release>
   d67fe:	4a07      	ldr	r2, [pc, #28]	; (d681c <_Z22__fetch_global_Serial1v+0x44>)
   d6800:	4907      	ldr	r1, [pc, #28]	; (d6820 <_Z22__fetch_global_Serial1v+0x48>)
   d6802:	4805      	ldr	r0, [pc, #20]	; (d6818 <_Z22__fetch_global_Serial1v+0x40>)
   d6804:	f000 fdd8 	bl	d73b8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6808:	4803      	ldr	r0, [pc, #12]	; (d6818 <_Z22__fetch_global_Serial1v+0x40>)
   d680a:	bd38      	pop	{r3, r4, r5, pc}
   d680c:	2003e48c 	.word	0x2003e48c
   d6810:	2003e490 	.word	0x2003e490
   d6814:	2003e408 	.word	0x2003e408
   d6818:	2003e3f4 	.word	0x2003e3f4
   d681c:	2003e1d0 	.word	0x2003e1d0
   d6820:	000d6721 	.word	0x000d6721

000d6824 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d6824:	4770      	bx	lr

000d6826 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6828:	4606      	mov	r6, r0
   d682a:	4615      	mov	r5, r2
   d682c:	460c      	mov	r4, r1
   d682e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6830:	42bc      	cmp	r4, r7
   d6832:	d006      	beq.n	d6842 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6834:	6833      	ldr	r3, [r6, #0]
   d6836:	f814 1b01 	ldrb.w	r1, [r4], #1
   d683a:	689b      	ldr	r3, [r3, #8]
   d683c:	4630      	mov	r0, r6
   d683e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6840:	e7f6      	b.n	d6830 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6842:	4628      	mov	r0, r5
   d6844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6846 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6846:	2200      	movs	r2, #0
   d6848:	7c00      	ldrb	r0, [r0, #16]
   d684a:	f7ff b871 	b.w	d5930 <HAL_I2C_Write_Data>

000d684e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d684e:	2100      	movs	r1, #0
   d6850:	7c00      	ldrb	r0, [r0, #16]
   d6852:	f7ff b875 	b.w	d5940 <HAL_I2C_Available_Data>

000d6856 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6856:	2100      	movs	r1, #0
   d6858:	7c00      	ldrb	r0, [r0, #16]
   d685a:	f7ff b879 	b.w	d5950 <HAL_I2C_Read_Data>

000d685e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d685e:	2100      	movs	r1, #0
   d6860:	7c00      	ldrb	r0, [r0, #16]
   d6862:	f7ff b87d 	b.w	d5960 <HAL_I2C_Peek_Data>

000d6866 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6866:	2100      	movs	r1, #0
   d6868:	7c00      	ldrb	r0, [r0, #16]
   d686a:	f7ff b881 	b.w	d5970 <HAL_I2C_Flush_Data>

000d686e <_ZN7TwoWireD0Ev>:
   d686e:	b510      	push	{r4, lr}
   d6870:	2114      	movs	r1, #20
   d6872:	4604      	mov	r4, r0
   d6874:	f000 fdae 	bl	d73d4 <_ZdlPvj>
   d6878:	4620      	mov	r0, r4
   d687a:	bd10      	pop	{r4, pc}

000d687c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d687c:	b510      	push	{r4, lr}
   d687e:	4604      	mov	r4, r0
   d6880:	2300      	movs	r3, #0
   d6882:	6063      	str	r3, [r4, #4]
   d6884:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6888:	60a3      	str	r3, [r4, #8]
   d688a:	4b04      	ldr	r3, [pc, #16]	; (d689c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d688c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d688e:	4608      	mov	r0, r1
   d6890:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6892:	4611      	mov	r1, r2
   d6894:	f7ff f87c 	bl	d5990 <HAL_I2C_Init>
}
   d6898:	4620      	mov	r0, r4
   d689a:	bd10      	pop	{r4, pc}
   d689c:	000d8d54 	.word	0x000d8d54

000d68a0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d68a0:	2300      	movs	r3, #0
   d68a2:	461a      	mov	r2, r3
   d68a4:	4619      	mov	r1, r3
   d68a6:	7c00      	ldrb	r0, [r0, #16]
   d68a8:	f7ff b82a 	b.w	d5900 <HAL_I2C_Begin>

000d68ac <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d68ac:	2200      	movs	r2, #0
   d68ae:	7c00      	ldrb	r0, [r0, #16]
   d68b0:	f7ff b82e 	b.w	d5910 <HAL_I2C_Begin_Transmission>

000d68b4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d68b4:	b2c9      	uxtb	r1, r1
   d68b6:	f7ff bff9 	b.w	d68ac <_ZN7TwoWire17beginTransmissionEh>

000d68ba <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d68ba:	2200      	movs	r2, #0
   d68bc:	7c00      	ldrb	r0, [r0, #16]
   d68be:	f7ff b82f 	b.w	d5920 <HAL_I2C_End_Transmission>

000d68c2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d68c2:	2101      	movs	r1, #1
   d68c4:	f7ff bff9 	b.w	d68ba <_ZN7TwoWire15endTransmissionEh>

000d68c8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d68c8:	2100      	movs	r1, #0
   d68ca:	7c00      	ldrb	r0, [r0, #16]
   d68cc:	f7ff b858 	b.w	d5980 <HAL_I2C_Is_Enabled>

000d68d0 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d68d0:	2200      	movs	r2, #0
   d68d2:	4611      	mov	r1, r2
   d68d4:	6840      	ldr	r0, [r0, #4]
   d68d6:	f7ff b947 	b.w	d5b68 <network_listening>

000d68da <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d68da:	2200      	movs	r2, #0
   d68dc:	4611      	mov	r1, r2
   d68de:	6840      	ldr	r0, [r0, #4]
   d68e0:	f7ff b952 	b.w	d5b88 <network_get_listen_timeout>

000d68e4 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d68e4:	2200      	movs	r2, #0
   d68e6:	6840      	ldr	r0, [r0, #4]
   d68e8:	f7ff b946 	b.w	d5b78 <network_set_listen_timeout>

000d68ec <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d68ec:	2200      	movs	r2, #0
   d68ee:	f081 0101 	eor.w	r1, r1, #1
   d68f2:	6840      	ldr	r0, [r0, #4]
   d68f4:	f7ff b930 	b.w	d5b58 <network_listen>

000d68f8 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d68f8:	2300      	movs	r3, #0
   d68fa:	461a      	mov	r2, r3
   d68fc:	2101      	movs	r1, #1
   d68fe:	6840      	ldr	r0, [r0, #4]
   d6900:	f7ff b922 	b.w	d5b48 <network_off>

000d6904 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6904:	2300      	movs	r3, #0
   d6906:	461a      	mov	r2, r3
   d6908:	4619      	mov	r1, r3
   d690a:	6840      	ldr	r0, [r0, #4]
   d690c:	f7ff b914 	b.w	d5b38 <network_on>

000d6910 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6910:	2200      	movs	r2, #0
   d6912:	4611      	mov	r1, r2
   d6914:	6840      	ldr	r0, [r0, #4]
   d6916:	f7ff b907 	b.w	d5b28 <network_ready>

000d691a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d691a:	2200      	movs	r2, #0
   d691c:	4611      	mov	r1, r2
   d691e:	6840      	ldr	r0, [r0, #4]
   d6920:	f7ff b8f2 	b.w	d5b08 <network_connecting>

000d6924 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6924:	2200      	movs	r2, #0
   d6926:	2102      	movs	r1, #2
   d6928:	6840      	ldr	r0, [r0, #4]
   d692a:	f7ff b8f5 	b.w	d5b18 <network_disconnect>

000d692e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d692e:	2300      	movs	r3, #0
   d6930:	461a      	mov	r2, r3
   d6932:	6840      	ldr	r0, [r0, #4]
   d6934:	f7ff b8e0 	b.w	d5af8 <network_connect>

000d6938 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6938:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d693a:	4605      	mov	r5, r0
   d693c:	b188      	cbz	r0, d6962 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d693e:	6804      	ldr	r4, [r0, #0]
   d6940:	b14c      	cbz	r4, d6956 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d6942:	68a3      	ldr	r3, [r4, #8]
   d6944:	b11b      	cbz	r3, d694e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6946:	2203      	movs	r2, #3
   d6948:	4621      	mov	r1, r4
   d694a:	4620      	mov	r0, r4
   d694c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d694e:	2110      	movs	r1, #16
   d6950:	4620      	mov	r0, r4
   d6952:	f000 fd3f 	bl	d73d4 <_ZdlPvj>
   d6956:	4628      	mov	r0, r5
   d6958:	2114      	movs	r1, #20
      }
   d695a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d695e:	f000 bd39 	b.w	d73d4 <_ZdlPvj>
   d6962:	bd38      	pop	{r3, r4, r5, pc}

000d6964 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6964:	b110      	cbz	r0, d696c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6966:	6803      	ldr	r3, [r0, #0]
   d6968:	685b      	ldr	r3, [r3, #4]
   d696a:	4718      	bx	r3
   d696c:	4770      	bx	lr

000d696e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d696e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6970:	6803      	ldr	r3, [r0, #0]
   d6972:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6974:	b1bb      	cbz	r3, d69a6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6976:	6858      	ldr	r0, [r3, #4]
   d6978:	f7fe ff42 	bl	d5800 <os_thread_is_current>
   d697c:	b978      	cbnz	r0, d699e <_ZN6ThreadD1Ev+0x30>
   d697e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6980:	7c5a      	ldrb	r2, [r3, #17]
   d6982:	b912      	cbnz	r2, d698a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6984:	6858      	ldr	r0, [r3, #4]
   d6986:	f7fe ff43 	bl	d5810 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d698a:	6823      	ldr	r3, [r4, #0]
   d698c:	6858      	ldr	r0, [r3, #4]
   d698e:	f7fe ff47 	bl	d5820 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6992:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6994:	2300      	movs	r3, #0
   d6996:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6998:	b128      	cbz	r0, d69a6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d699a:	f7ff ffcd 	bl	d6938 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d699e:	6820      	ldr	r0, [r4, #0]
   d69a0:	b108      	cbz	r0, d69a6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d69a2:	f7ff ffc9 	bl	d6938 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d69a6:	4620      	mov	r0, r4
   d69a8:	bd10      	pop	{r4, pc}

000d69aa <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d69aa:	b538      	push	{r3, r4, r5, lr}
   d69ac:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69ae:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d69b2:	b108      	cbz	r0, d69b8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d69b4:	f7fd fb73 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d69b8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d69bc:	b108      	cbz	r0, d69c2 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d69be:	f7fe ff3f 	bl	d5840 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69c2:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d69c6:	b135      	cbz	r5, d69d6 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d69c8:	4628      	mov	r0, r5
   d69ca:	f7ff ffd0 	bl	d696e <_ZN6ThreadD1Ev>
   d69ce:	2104      	movs	r1, #4
   d69d0:	4628      	mov	r0, r5
   d69d2:	f000 fcff 	bl	d73d4 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69d6:	6820      	ldr	r0, [r4, #0]
   d69d8:	b108      	cbz	r0, d69de <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d69da:	f7ff ffc3 	bl	d6964 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d69de:	4620      	mov	r0, r4
   d69e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d69e4 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d69e4:	b510      	push	{r4, lr}
   d69e6:	4b04      	ldr	r3, [pc, #16]	; (d69f8 <_ZN5spark9MeshClassD1Ev+0x14>)
   d69e8:	4604      	mov	r4, r0
   d69ea:	f840 3b08 	str.w	r3, [r0], #8
   d69ee:	f7ff ffdc 	bl	d69aa <_ZN5spark11MeshPublishD1Ev>
   d69f2:	4620      	mov	r0, r4
   d69f4:	bd10      	pop	{r4, pc}
   d69f6:	bf00      	nop
   d69f8:	000d8d7c 	.word	0x000d8d7c

000d69fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d69fc:	b538      	push	{r3, r4, r5, lr}
   d69fe:	4c0e      	ldr	r4, [pc, #56]	; (d6a38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6a00:	4b0e      	ldr	r3, [pc, #56]	; (d6a3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6a02:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6a04:	2500      	movs	r5, #0
   d6a06:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6a08:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6a0c:	6063      	str	r3, [r4, #4]
   d6a0e:	60a5      	str	r5, [r4, #8]
   d6a10:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a14:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6a18:	f7fe ff0a 	bl	d5830 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6a1c:	4b08      	ldr	r3, [pc, #32]	; (d6a40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6a1e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6a22:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6a26:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6a28:	4620      	mov	r0, r4
   d6a2a:	4a06      	ldr	r2, [pc, #24]	; (d6a44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6a2c:	4906      	ldr	r1, [pc, #24]	; (d6a48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6a32:	f000 bcc1 	b.w	d73b8 <__aeabi_atexit>
   d6a36:	bf00      	nop
   d6a38:	2003e514 	.word	0x2003e514
   d6a3c:	000d8e64 	.word	0x000d8e64
   d6a40:	000d8d7c 	.word	0x000d8d7c
   d6a44:	2003e1d0 	.word	0x2003e1d0
   d6a48:	000d69e5 	.word	0x000d69e5

000d6a4c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a4e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6a50:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6a52:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6a56:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6a58:	2201      	movs	r2, #1
   d6a5a:	f04f 33ff 	mov.w	r3, #4294967295
   d6a5e:	4621      	mov	r1, r4
   d6a60:	47a8      	blx	r5
}
   d6a62:	b003      	add	sp, #12
   d6a64:	bd30      	pop	{r4, r5, pc}

000d6a66 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6a66:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6a68:	6803      	ldr	r3, [r0, #0]
   d6a6a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6a6c:	f04f 33ff 	mov.w	r3, #4294967295
   d6a70:	46a4      	mov	ip, r4
}
   d6a72:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6a76:	4760      	bx	ip

000d6a78 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a7a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d6a7c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6a7e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d6a82:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d6a84:	4621      	mov	r1, r4
   d6a86:	4613      	mov	r3, r2
   d6a88:	2201      	movs	r2, #1
   d6a8a:	47a8      	blx	r5
}
   d6a8c:	b003      	add	sp, #12
   d6a8e:	bd30      	pop	{r4, r5, pc}

000d6a90 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d6a90:	4770      	bx	lr

000d6a92 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6a92:	b538      	push	{r3, r4, r5, lr}
   d6a94:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6a96:	681a      	ldr	r2, [r3, #0]
   d6a98:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6a9a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d6a9c:	da05      	bge.n	d6aaa <_ZN9TCPClient9connectedEv+0x18>
   d6a9e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6aa2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6aa6:	429a      	cmp	r2, r3
   d6aa8:	d001      	beq.n	d6aae <_ZN9TCPClient9connectedEv+0x1c>
   d6aaa:	2501      	movs	r5, #1
   d6aac:	e00b      	b.n	d6ac6 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d6aae:	6803      	ldr	r3, [r0, #0]
   d6ab0:	691b      	ldr	r3, [r3, #16]
   d6ab2:	4798      	blx	r3
   d6ab4:	2800      	cmp	r0, #0
   d6ab6:	bf14      	ite	ne
   d6ab8:	2501      	movne	r5, #1
   d6aba:	2500      	moveq	r5, #0
        if (!rv) {
   d6abc:	d103      	bne.n	d6ac6 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d6abe:	6823      	ldr	r3, [r4, #0]
   d6ac0:	4620      	mov	r0, r4
   d6ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ac4:	4798      	blx	r3
        }
    }
    return rv;
}
   d6ac6:	4628      	mov	r0, r5
   d6ac8:	bd38      	pop	{r3, r4, r5, pc}

000d6aca <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6aca:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d6acc:	6818      	ldr	r0, [r3, #0]
}
   d6ace:	43c0      	mvns	r0, r0
   d6ad0:	0fc0      	lsrs	r0, r0, #31
   d6ad2:	4770      	bx	lr

000d6ad4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ad4:	4770      	bx	lr

000d6ad6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6ad6:	2000      	movs	r0, #0
   d6ad8:	4770      	bx	lr

000d6ada <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ada:	b510      	push	{r4, lr}
   d6adc:	2114      	movs	r1, #20
   d6ade:	4604      	mov	r4, r0
   d6ae0:	f000 fc78 	bl	d73d4 <_ZdlPvj>
   d6ae4:	4620      	mov	r0, r4
   d6ae6:	bd10      	pop	{r4, pc}

000d6ae8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6ae8:	f7fd bad7 	b.w	d409a <_ZdlPv>

000d6aec <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6aec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6aee:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d6af0:	2200      	movs	r2, #0
   d6af2:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d6af4:	9202      	str	r2, [sp, #8]
   d6af6:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6af8:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6afa:	4604      	mov	r4, r0
   d6afc:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6afe:	d008      	beq.n	d6b12 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d6b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b04:	fbb3 f1f2 	udiv	r1, r3, r2
   d6b08:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6b0a:	fb02 3111 	mls	r1, r2, r1, r3
   d6b0e:	434a      	muls	r2, r1
   d6b10:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6b12:	6960      	ldr	r0, [r4, #20]
   d6b14:	2308      	movs	r3, #8
   d6b16:	9300      	str	r3, [sp, #0]
   d6b18:	f241 0205 	movw	r2, #4101	; 0x1005
   d6b1c:	446b      	add	r3, sp
   d6b1e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6b22:	6800      	ldr	r0, [r0, #0]
   d6b24:	f7fe ff3c 	bl	d59a0 <sock_setsockopt>
    if (ret < 0) {
   d6b28:	2800      	cmp	r0, #0
   d6b2a:	db08      	blt.n	d6b3e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d6b2c:	6960      	ldr	r0, [r4, #20]
   d6b2e:	2300      	movs	r3, #0
   d6b30:	4632      	mov	r2, r6
   d6b32:	4629      	mov	r1, r5
   d6b34:	6800      	ldr	r0, [r0, #0]
   d6b36:	f7fe ff53 	bl	d59e0 <sock_send>
    if (ret < 0) {
   d6b3a:	2800      	cmp	r0, #0
   d6b3c:	da04      	bge.n	d6b48 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d6b3e:	f7ff f893 	bl	d5c68 <__errno>
   d6b42:	6803      	ldr	r3, [r0, #0]
   d6b44:	6063      	str	r3, [r4, #4]
   d6b46:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d6b48:	b004      	add	sp, #16
   d6b4a:	bd70      	pop	{r4, r5, r6, pc}

000d6b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b4c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6b4e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b50:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6b52:	689b      	ldr	r3, [r3, #8]
   d6b54:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b56:	68a3      	ldr	r3, [r4, #8]
   d6b58:	3b01      	subs	r3, #1
   d6b5a:	60a3      	str	r3, [r4, #8]
   d6b5c:	b92b      	cbnz	r3, d6b6a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d6b5e:	6823      	ldr	r3, [r4, #0]
   d6b60:	4620      	mov	r0, r4
   d6b62:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6b68:	4718      	bx	r3
   d6b6a:	bd10      	pop	{r4, pc}

000d6b6c <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d6b6c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6b6e:	4604      	mov	r4, r0
   d6b70:	694d      	ldr	r5, [r1, #20]
   d6b72:	4b05      	ldr	r3, [pc, #20]	; (d6b88 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6b74:	f844 3b04 	str.w	r3, [r4], #4
   d6b78:	358c      	adds	r5, #140	; 0x8c
   d6b7a:	4606      	mov	r6, r0
   d6b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b80:	682b      	ldr	r3, [r5, #0]
   d6b82:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6b84:	4630      	mov	r0, r6
   d6b86:	bd70      	pop	{r4, r5, r6, pc}
   d6b88:	000d8ce0 	.word	0x000d8ce0

000d6b8c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6b8c:	b510      	push	{r4, lr}
   d6b8e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6b90:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6b94:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6b98:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d6b9a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6b9c:	d005      	beq.n	d6baa <_ZN9TCPClient4peekEv+0x1e>
   d6b9e:	6962      	ldr	r2, [r4, #20]
   d6ba0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6ba4:	4413      	add	r3, r2
   d6ba6:	7918      	ldrb	r0, [r3, #4]
   d6ba8:	bd10      	pop	{r4, pc}
   d6baa:	6803      	ldr	r3, [r0, #0]
   d6bac:	691b      	ldr	r3, [r3, #16]
   d6bae:	4798      	blx	r3
   d6bb0:	2800      	cmp	r0, #0
   d6bb2:	d1f4      	bne.n	d6b9e <_ZN9TCPClient4peekEv+0x12>
   d6bb4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bb8:	bd10      	pop	{r4, pc}

000d6bba <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6bba:	b510      	push	{r4, lr}
   d6bbc:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6bbe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6bc2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6bc6:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d6bc8:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6bca:	d008      	beq.n	d6bde <_ZN9TCPClient4readEv+0x24>
   d6bcc:	6962      	ldr	r2, [r4, #20]
   d6bce:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6bd2:	1c59      	adds	r1, r3, #1
   d6bd4:	4413      	add	r3, r2
   d6bd6:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d6bda:	7918      	ldrb	r0, [r3, #4]
   d6bdc:	bd10      	pop	{r4, pc}
   d6bde:	6803      	ldr	r3, [r0, #0]
   d6be0:	691b      	ldr	r3, [r3, #16]
   d6be2:	4798      	blx	r3
   d6be4:	2800      	cmp	r0, #0
   d6be6:	d1f1      	bne.n	d6bcc <_ZN9TCPClient4readEv+0x12>
   d6be8:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bec:	bd10      	pop	{r4, pc}

000d6bee <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bf0:	6943      	ldr	r3, [r0, #20]
   d6bf2:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d6bf4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6bf8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6bfc:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d6bfe:	4605      	mov	r5, r0
   d6c00:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d6c02:	d106      	bne.n	d6c12 <_ZN9TCPClient4readEPhj+0x24>
   d6c04:	6803      	ldr	r3, [r0, #0]
   d6c06:	691b      	ldr	r3, [r3, #16]
   d6c08:	4798      	blx	r3
   d6c0a:	b910      	cbnz	r0, d6c12 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d6c0c:	f04f 34ff 	mov.w	r4, #4294967295
   d6c10:	e014      	b.n	d6c3c <_ZN9TCPClient4readEPhj+0x4e>
   d6c12:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d6c14:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6c18:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6c1c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6c1e:	42bc      	cmp	r4, r7
   d6c20:	bf28      	it	cs
   d6c22:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6c24:	4419      	add	r1, r3
   d6c26:	4622      	mov	r2, r4
   d6c28:	3104      	adds	r1, #4
   d6c2a:	4630      	mov	r0, r6
   d6c2c:	f000 fe88 	bl	d7940 <memcpy>
   d6c30:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6c32:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6c36:	4423      	add	r3, r4
   d6c38:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d6c3c:	4620      	mov	r0, r4
   d6c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c40 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c44:	4698      	mov	r8, r3
    stop();
   d6c46:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c48:	b093      	sub	sp, #76	; 0x4c
    stop();
   d6c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6c4c:	460d      	mov	r5, r1
   d6c4e:	4606      	mov	r6, r0
   d6c50:	4617      	mov	r7, r2
    stop();
   d6c52:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d6c54:	ab12      	add	r3, sp, #72	; 0x48
   d6c56:	2400      	movs	r4, #0
   d6c58:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6c5c:	4622      	mov	r2, r4
   d6c5e:	4621      	mov	r1, r4
   d6c60:	4628      	mov	r0, r5
   d6c62:	f7fe fd05 	bl	d5670 <netdb_getaddrinfo>
   d6c66:	4681      	mov	r9, r0
   d6c68:	2800      	cmp	r0, #0
   d6c6a:	d13d      	bne.n	d6ce8 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6c6c:	9b00      	ldr	r3, [sp, #0]
   d6c6e:	2b00      	cmp	r3, #0
   d6c70:	d056      	beq.n	d6d20 <_ZN9TCPClient7connectEPKctm+0xe0>
   d6c72:	695b      	ldr	r3, [r3, #20]
   d6c74:	2b00      	cmp	r3, #0
   d6c76:	d053      	beq.n	d6d20 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d6c78:	a806      	add	r0, sp, #24
   d6c7a:	f7ff fc7b 	bl	d6574 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d6c7e:	9b00      	ldr	r3, [sp, #0]
   d6c80:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d6c82:	7863      	ldrb	r3, [r4, #1]
   d6c84:	2b02      	cmp	r3, #2
   d6c86:	d101      	bne.n	d6c8c <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6c88:	1d21      	adds	r1, r4, #4
   d6c8a:	e013      	b.n	d6cb4 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d6c8c:	2b0a      	cmp	r3, #10
   d6c8e:	d114      	bne.n	d6cba <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6c90:	2211      	movs	r2, #17
   d6c92:	4649      	mov	r1, r9
   d6c94:	a801      	add	r0, sp, #4
   d6c96:	f000 fe79 	bl	d798c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d6c9a:	68a3      	ldr	r3, [r4, #8]
   d6c9c:	bb33      	cbnz	r3, d6cec <_ZN9TCPClient7connectEPKctm+0xac>
   d6c9e:	68e3      	ldr	r3, [r4, #12]
   d6ca0:	bb23      	cbnz	r3, d6cec <_ZN9TCPClient7connectEPKctm+0xac>
   d6ca2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d6ca6:	6925      	ldr	r5, [r4, #16]
   d6ca8:	f7fe fdda 	bl	d5860 <inet_htonl>
   d6cac:	4285      	cmp	r5, r0
   d6cae:	d11d      	bne.n	d6cec <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d6cb0:	f104 0114 	add.w	r1, r4, #20
   d6cb4:	a806      	add	r0, sp, #24
   d6cb6:	f7ff fca0 	bl	d65fa <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d6cba:	a806      	add	r0, sp, #24
   d6cbc:	f7ff fc7a 	bl	d65b4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6cc0:	2800      	cmp	r0, #0
   d6cc2:	d02d      	beq.n	d6d20 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d6cc4:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6cc6:	ad07      	add	r5, sp, #28
   d6cc8:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d6ccc:	4b18      	ldr	r3, [pc, #96]	; (d6d30 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d6cce:	930c      	str	r3, [sp, #48]	; 0x30
   d6cd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6cd2:	ac0d      	add	r4, sp, #52	; 0x34
   d6cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cd6:	682b      	ldr	r3, [r5, #0]
   d6cd8:	7023      	strb	r3, [r4, #0]
   d6cda:	463a      	mov	r2, r7
   d6cdc:	4643      	mov	r3, r8
   d6cde:	a90c      	add	r1, sp, #48	; 0x30
   d6ce0:	4630      	mov	r0, r6
   d6ce2:	47c8      	blx	r9
   d6ce4:	4681      	mov	r9, r0
   d6ce6:	e01b      	b.n	d6d20 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6ce8:	46a1      	mov	r9, r4
   d6cea:	e019      	b.n	d6d20 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6cec:	f104 0308 	add.w	r3, r4, #8
   d6cf0:	ad01      	add	r5, sp, #4
   d6cf2:	3418      	adds	r4, #24
   d6cf4:	6818      	ldr	r0, [r3, #0]
   d6cf6:	6859      	ldr	r1, [r3, #4]
   d6cf8:	462a      	mov	r2, r5
   d6cfa:	c203      	stmia	r2!, {r0, r1}
   d6cfc:	3308      	adds	r3, #8
   d6cfe:	42a3      	cmp	r3, r4
   d6d00:	4615      	mov	r5, r2
   d6d02:	d1f7      	bne.n	d6cf4 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d6d04:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d6d06:	a901      	add	r1, sp, #4
   d6d08:	a80c      	add	r0, sp, #48	; 0x30
   d6d0a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d6d0c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d6d10:	f7ff fc3e 	bl	d6590 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6d16:	ac07      	add	r4, sp, #28
   d6d18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6d1a:	682b      	ldr	r3, [r5, #0]
   d6d1c:	7023      	strb	r3, [r4, #0]
   d6d1e:	e7cc      	b.n	d6cba <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6d20:	9800      	ldr	r0, [sp, #0]
   d6d22:	f7fe fc9d 	bl	d5660 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d6d26:	4648      	mov	r0, r9
   d6d28:	b013      	add	sp, #76	; 0x4c
   d6d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6d2e:	bf00      	nop
   d6d30:	000d8ce0 	.word	0x000d8ce0

000d6d34 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d6d34:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6d36:	2300      	movs	r3, #0
   d6d38:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6d3c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6d3e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d6d42:	4770      	bx	lr

000d6d44 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d48:	461e      	mov	r6, r3
    stop();
   d6d4a:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d4c:	460c      	mov	r4, r1
   d6d4e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d6d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d52:	4605      	mov	r5, r0
   d6d54:	4617      	mov	r7, r2
    stop();
   d6d56:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6d58:	7d23      	ldrb	r3, [r4, #20]
   d6d5a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6d5e:	2b04      	cmp	r3, #4
   d6d60:	bf0c      	ite	eq
   d6d62:	2002      	moveq	r0, #2
   d6d64:	200a      	movne	r0, #10
   d6d66:	2206      	movs	r2, #6
   d6d68:	2101      	movs	r1, #1
   d6d6a:	f7fe fe41 	bl	d59f0 <sock_socket>
   d6d6e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6d72:	696b      	ldr	r3, [r5, #20]
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	2b00      	cmp	r3, #0
   d6d78:	db18      	blt.n	d6dac <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d6d7a:	4628      	mov	r0, r5
   d6d7c:	f7ff ffda 	bl	d6d34 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6d80:	b1d6      	cbz	r6, d6db8 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d6d82:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6d84:	a903      	add	r1, sp, #12
   d6d86:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d6d88:	9303      	str	r3, [sp, #12]
   d6d8a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6d8e:	f7fe fd07 	bl	d57a0 <if_index_to_name>
   d6d92:	b958      	cbnz	r0, d6dac <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6d94:	6968      	ldr	r0, [r5, #20]
   d6d96:	2306      	movs	r3, #6
   d6d98:	9300      	str	r3, [sp, #0]
   d6d9a:	f241 020b 	movw	r2, #4107	; 0x100b
   d6d9e:	ab03      	add	r3, sp, #12
   d6da0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6da4:	6800      	ldr	r0, [r0, #0]
   d6da6:	f7fe fdfb 	bl	d59a0 <sock_setsockopt>
   d6daa:	b128      	cbz	r0, d6db8 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6dac:	682b      	ldr	r3, [r5, #0]
   d6dae:	4628      	mov	r0, r5
   d6db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6db2:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d6db4:	4798      	blx	r3
   d6db6:	e03b      	b.n	d6e30 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d6db8:	261c      	movs	r6, #28
   d6dba:	4632      	mov	r2, r6
   d6dbc:	2100      	movs	r1, #0
   d6dbe:	a803      	add	r0, sp, #12
   d6dc0:	f000 fde4 	bl	d798c <memset>
    if (ip.version() == 4) {
   d6dc4:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d6dc6:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d6dca:	2b04      	cmp	r3, #4
   d6dcc:	d10c      	bne.n	d6de8 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6dce:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d6dd0:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d6dd2:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d6dd6:	f7fe fd4b 	bl	d5870 <inet_htons>
   d6dda:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6dde:	6860      	ldr	r0, [r4, #4]
   d6de0:	f7fe fd3e 	bl	d5860 <inet_htonl>
   d6de4:	9004      	str	r0, [sp, #16]
   d6de6:	e013      	b.n	d6e10 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6de8:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d6dea:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d6dec:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d6df0:	f7fe fd3e 	bl	d5870 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6df4:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d6df6:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6dfa:	1d23      	adds	r3, r4, #4
   d6dfc:	f104 0714 	add.w	r7, r4, #20
   d6e00:	6818      	ldr	r0, [r3, #0]
   d6e02:	6859      	ldr	r1, [r3, #4]
   d6e04:	4632      	mov	r2, r6
   d6e06:	c203      	stmia	r2!, {r0, r1}
   d6e08:	3308      	adds	r3, #8
   d6e0a:	42bb      	cmp	r3, r7
   d6e0c:	4616      	mov	r6, r2
   d6e0e:	d1f7      	bne.n	d6e00 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6e10:	696b      	ldr	r3, [r5, #20]
   d6e12:	221c      	movs	r2, #28
   d6e14:	a903      	add	r1, sp, #12
   d6e16:	6818      	ldr	r0, [r3, #0]
   d6e18:	f7fe fdd2 	bl	d59c0 <sock_connect>
   d6e1c:	2800      	cmp	r0, #0
   d6e1e:	d1c5      	bne.n	d6dac <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d6e20:	3404      	adds	r4, #4
   d6e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6e24:	696d      	ldr	r5, [r5, #20]
   d6e26:	358c      	adds	r5, #140	; 0x8c
   d6e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6e2a:	6823      	ldr	r3, [r4, #0]
   d6e2c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d6e2e:	2401      	movs	r4, #1
}
   d6e30:	4620      	mov	r0, r4
   d6e32:	b00a      	add	sp, #40	; 0x28
   d6e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6e38 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6e38:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6e3a:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d6e3c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6e3e:	6818      	ldr	r0, [r3, #0]
   d6e40:	2800      	cmp	r0, #0
   d6e42:	db01      	blt.n	d6e48 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6e44:	f7fe fdb4 	bl	d59b0 <sock_close>
   d6e48:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d6e4a:	f04f 32ff 	mov.w	r2, #4294967295
   d6e4e:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6e50:	6960      	ldr	r0, [r4, #20]
   d6e52:	2211      	movs	r2, #17
   d6e54:	2100      	movs	r1, #0
   d6e56:	308c      	adds	r0, #140	; 0x8c
   d6e58:	f000 fd98 	bl	d798c <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d6e5c:	4620      	mov	r0, r4
}
   d6e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d6e62:	f7ff bf67 	b.w	d6d34 <_ZN9TCPClient12flush_bufferEv>
	...

000d6e68 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6e68:	b530      	push	{r4, r5, lr}
   d6e6a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6e6c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d6e70:	b08b      	sub	sp, #44	; 0x2c
   d6e72:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d6e74:	b11b      	cbz	r3, d6e7e <_ZN9TCPClient9availableEv+0x16>
   d6e76:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6e7a:	429a      	cmp	r2, r3
   d6e7c:	d040      	beq.n	d6f00 <_ZN9TCPClient9availableEv+0x98>
   d6e7e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d6e80:	6818      	ldr	r0, [r3, #0]
   d6e82:	2800      	cmp	r0, #0
   d6e84:	db3f      	blt.n	d6f06 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d6e86:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d6e8a:	2d7f      	cmp	r5, #127	; 0x7f
   d6e8c:	d83b      	bhi.n	d6f06 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6e8e:	1d19      	adds	r1, r3, #4
   d6e90:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6e94:	2308      	movs	r3, #8
   d6e96:	4429      	add	r1, r5
   d6e98:	f7fe fd9a 	bl	d59d0 <sock_recv>
            if (ret > 0) {
   d6e9c:	2800      	cmp	r0, #0
   d6e9e:	dd0c      	ble.n	d6eba <_ZN9TCPClient9availableEv+0x52>
   d6ea0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6ea2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6ea6:	b90a      	cbnz	r2, d6eac <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d6ea8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6eac:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d6eae:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6eb2:	4418      	add	r0, r3
   d6eb4:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6eb8:	e025      	b.n	d6f06 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6eba:	f7fe fed5 	bl	d5c68 <__errno>
   d6ebe:	6803      	ldr	r3, [r0, #0]
   d6ec0:	2b0b      	cmp	r3, #11
   d6ec2:	d020      	beq.n	d6f06 <_ZN9TCPClient9availableEv+0x9e>
   d6ec4:	f7fe fed0 	bl	d5c68 <__errno>
   d6ec8:	6803      	ldr	r3, [r0, #0]
   d6eca:	2b0b      	cmp	r3, #11
   d6ecc:	d01b      	beq.n	d6f06 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d6ece:	2320      	movs	r3, #32
   d6ed0:	2500      	movs	r5, #0
   d6ed2:	9302      	str	r3, [sp, #8]
   d6ed4:	9503      	str	r5, [sp, #12]
   d6ed6:	f7fe fec7 	bl	d5c68 <__errno>
   d6eda:	6803      	ldr	r3, [r0, #0]
   d6edc:	9301      	str	r3, [sp, #4]
   d6ede:	4b0e      	ldr	r3, [pc, #56]	; (d6f18 <_ZN9TCPClient9availableEv+0xb0>)
   d6ee0:	9300      	str	r3, [sp, #0]
   d6ee2:	aa02      	add	r2, sp, #8
   d6ee4:	462b      	mov	r3, r5
   d6ee6:	490d      	ldr	r1, [pc, #52]	; (d6f1c <_ZN9TCPClient9availableEv+0xb4>)
   d6ee8:	2032      	movs	r0, #50	; 0x32
   d6eea:	f7fe fdc9 	bl	d5a80 <log_message>
                    sock_close(d_->sock);
   d6eee:	6963      	ldr	r3, [r4, #20]
   d6ef0:	6818      	ldr	r0, [r3, #0]
   d6ef2:	f7fe fd5d 	bl	d59b0 <sock_close>
   d6ef6:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6ef8:	f04f 32ff 	mov.w	r2, #4294967295
   d6efc:	601a      	str	r2, [r3, #0]
   d6efe:	e002      	b.n	d6f06 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6f00:	f7ff ff18 	bl	d6d34 <_ZN9TCPClient12flush_bufferEv>
   d6f04:	e7bb      	b.n	d6e7e <_ZN9TCPClient9availableEv+0x16>
   d6f06:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6f08:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6f0c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6f10:	1a18      	subs	r0, r3, r0
}
   d6f12:	b00b      	add	sp, #44	; 0x2c
   d6f14:	bd30      	pop	{r4, r5, pc}
   d6f16:	bf00      	nop
   d6f18:	000d8e17 	.word	0x000d8e17
   d6f1c:	000d8e10 	.word	0x000d8e10

000d6f20 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6f20:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6f22:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6f24:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6f26:	6001      	str	r1, [r0, #0]
   d6f28:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d6f2c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6f30:	3088      	adds	r0, #136	; 0x88
   d6f32:	f7ff fb1f 	bl	d6574 <_ZN9IPAddressC1Ev>
}
   d6f36:	4620      	mov	r0, r4
   d6f38:	bd10      	pop	{r4, pc}
	...

000d6f3c <_ZN9TCPClientC1Ei>:
   d6f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6f40:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6f42:	2300      	movs	r3, #0
   d6f44:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6f46:	4a14      	ldr	r2, [pc, #80]	; (d6f98 <_ZN9TCPClientC1Ei+0x5c>)
   d6f48:	6043      	str	r3, [r0, #4]
   d6f4a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6f4c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6f4e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6f50:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6f52:	20a0      	movs	r0, #160	; 0xa0
   d6f54:	460e      	mov	r6, r1
   d6f56:	f7fd f89e 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6f5a:	4605      	mov	r5, r0
   d6f5c:	b110      	cbz	r0, d6f64 <_ZN9TCPClientC1Ei+0x28>
   d6f5e:	4631      	mov	r1, r6
   d6f60:	f7ff ffde 	bl	d6f20 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6f64:	2014      	movs	r0, #20
   d6f66:	f7fd f896 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6f6a:	4603      	mov	r3, r0
   d6f6c:	b128      	cbz	r0, d6f7a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6f6e:	2201      	movs	r2, #1
   d6f70:	6042      	str	r2, [r0, #4]
   d6f72:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6f74:	4a09      	ldr	r2, [pc, #36]	; (d6f9c <_ZN9TCPClientC1Ei+0x60>)
   d6f76:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6f78:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6f7a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6f7c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6f7e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d6f80:	b128      	cbz	r0, d6f8e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6f82:	6843      	ldr	r3, [r0, #4]
   d6f84:	3b01      	subs	r3, #1
   d6f86:	6043      	str	r3, [r0, #4]
   d6f88:	b90b      	cbnz	r3, d6f8e <_ZN9TCPClientC1Ei+0x52>
   d6f8a:	f7ff fddf 	bl	d6b4c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d6f8e:	4620      	mov	r0, r4
   d6f90:	f7ff fed0 	bl	d6d34 <_ZN9TCPClient12flush_bufferEv>
}
   d6f94:	4620      	mov	r0, r4
   d6f96:	bd70      	pop	{r4, r5, r6, pc}
   d6f98:	000d8dcc 	.word	0x000d8dcc
   d6f9c:	000d8db0 	.word	0x000d8db0

000d6fa0 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6fa0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6fa2:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d6fa6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6fa8:	f7ff ffc8 	bl	d6f3c <_ZN9TCPClientC1Ei>
}
   d6fac:	4620      	mov	r0, r4
   d6fae:	bd10      	pop	{r4, pc}

000d6fb0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6fb0:	b510      	push	{r4, lr}
   d6fb2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6fb4:	6800      	ldr	r0, [r0, #0]
   d6fb6:	2800      	cmp	r0, #0
   d6fb8:	db01      	blt.n	d6fbe <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6fba:	f7fe fcf9 	bl	d59b0 <sock_close>
    }
}
   d6fbe:	4620      	mov	r0, r4
   d6fc0:	bd10      	pop	{r4, pc}

000d6fc2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6fc2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6fc4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6fc6:	4620      	mov	r0, r4
   d6fc8:	f7ff fff2 	bl	d6fb0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d6fcc:	b124      	cbz	r4, d6fd8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6fce:	4620      	mov	r0, r4
   d6fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6fd4:	f7fd b861 	b.w	d409a <_ZdlPv>
   d6fd8:	bd10      	pop	{r4, pc}

000d6fda <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6fda:	2200      	movs	r2, #0
   d6fdc:	4611      	mov	r1, r2
   d6fde:	6840      	ldr	r0, [r0, #4]
   d6fe0:	f7fe bda2 	b.w	d5b28 <network_ready>

000d6fe4 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6fe4:	2200      	movs	r2, #0
   d6fe6:	4611      	mov	r1, r2
   d6fe8:	6840      	ldr	r0, [r0, #4]
   d6fea:	f7fe bdbd 	b.w	d5b68 <network_listening>

000d6fee <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6fee:	2200      	movs	r2, #0
   d6ff0:	4611      	mov	r1, r2
   d6ff2:	6840      	ldr	r0, [r0, #4]
   d6ff4:	f7fe bdc8 	b.w	d5b88 <network_get_listen_timeout>

000d6ff8 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6ff8:	2200      	movs	r2, #0
   d6ffa:	6840      	ldr	r0, [r0, #4]
   d6ffc:	f7fe bdbc 	b.w	d5b78 <network_set_listen_timeout>

000d7000 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7000:	2200      	movs	r2, #0
   d7002:	f081 0101 	eor.w	r1, r1, #1
   d7006:	6840      	ldr	r0, [r0, #4]
   d7008:	f7fe bda6 	b.w	d5b58 <network_listen>

000d700c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d700c:	2300      	movs	r3, #0
   d700e:	461a      	mov	r2, r3
   d7010:	4619      	mov	r1, r3
   d7012:	6840      	ldr	r0, [r0, #4]
   d7014:	f7fe bd98 	b.w	d5b48 <network_off>

000d7018 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7018:	2300      	movs	r3, #0
   d701a:	461a      	mov	r2, r3
   d701c:	4619      	mov	r1, r3
   d701e:	6840      	ldr	r0, [r0, #4]
   d7020:	f7fe bd8a 	b.w	d5b38 <network_on>

000d7024 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7024:	2200      	movs	r2, #0
   d7026:	4611      	mov	r1, r2
   d7028:	6840      	ldr	r0, [r0, #4]
   d702a:	f7fe bd6d 	b.w	d5b08 <network_connecting>

000d702e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d702e:	2200      	movs	r2, #0
   d7030:	2102      	movs	r1, #2
   d7032:	6840      	ldr	r0, [r0, #4]
   d7034:	f7fe bd70 	b.w	d5b18 <network_disconnect>

000d7038 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7038:	2300      	movs	r3, #0
   d703a:	461a      	mov	r2, r3
   d703c:	6840      	ldr	r0, [r0, #4]
   d703e:	f7fe bd5b 	b.w	d5af8 <network_connect>
	...

000d7044 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7044:	4b02      	ldr	r3, [pc, #8]	; (d7050 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7046:	2204      	movs	r2, #4
   d7048:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d704a:	4a02      	ldr	r2, [pc, #8]	; (d7054 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d704c:	601a      	str	r2, [r3, #0]
   d704e:	4770      	bx	lr
   d7050:	2003e6e8 	.word	0x2003e6e8
   d7054:	000d8e30 	.word	0x000d8e30

000d7058 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7058:	2300      	movs	r3, #0
   d705a:	461a      	mov	r2, r3
   d705c:	6840      	ldr	r0, [r0, #4]
   d705e:	f7fe bd4b 	b.w	d5af8 <network_connect>

000d7062 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7062:	2200      	movs	r2, #0
   d7064:	2102      	movs	r1, #2
   d7066:	6840      	ldr	r0, [r0, #4]
   d7068:	f7fe bd56 	b.w	d5b18 <network_disconnect>

000d706c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d706c:	2200      	movs	r2, #0
   d706e:	4611      	mov	r1, r2
   d7070:	6840      	ldr	r0, [r0, #4]
   d7072:	f7fe bd49 	b.w	d5b08 <network_connecting>

000d7076 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7076:	2200      	movs	r2, #0
   d7078:	4611      	mov	r1, r2
   d707a:	6840      	ldr	r0, [r0, #4]
   d707c:	f7fe bd54 	b.w	d5b28 <network_ready>

000d7080 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7080:	2300      	movs	r3, #0
   d7082:	461a      	mov	r2, r3
   d7084:	4619      	mov	r1, r3
   d7086:	6840      	ldr	r0, [r0, #4]
   d7088:	f7fe bd56 	b.w	d5b38 <network_on>

000d708c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d708c:	2300      	movs	r3, #0
   d708e:	461a      	mov	r2, r3
   d7090:	4619      	mov	r1, r3
   d7092:	6840      	ldr	r0, [r0, #4]
   d7094:	f7fe bd58 	b.w	d5b48 <network_off>

000d7098 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7098:	2200      	movs	r2, #0
   d709a:	f081 0101 	eor.w	r1, r1, #1
   d709e:	6840      	ldr	r0, [r0, #4]
   d70a0:	f7fe bd5a 	b.w	d5b58 <network_listen>

000d70a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d70a4:	2200      	movs	r2, #0
   d70a6:	6840      	ldr	r0, [r0, #4]
   d70a8:	f7fe bd66 	b.w	d5b78 <network_set_listen_timeout>

000d70ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d70ac:	2200      	movs	r2, #0
   d70ae:	4611      	mov	r1, r2
   d70b0:	6840      	ldr	r0, [r0, #4]
   d70b2:	f7fe bd69 	b.w	d5b88 <network_get_listen_timeout>

000d70b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d70b6:	2200      	movs	r2, #0
   d70b8:	4611      	mov	r1, r2
   d70ba:	6840      	ldr	r0, [r0, #4]
   d70bc:	f7fe bd54 	b.w	d5b68 <network_listening>

000d70c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d70c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70c4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d70c6:	b095      	sub	sp, #84	; 0x54
   d70c8:	4616      	mov	r6, r2
   d70ca:	460d      	mov	r5, r1
   d70cc:	4607      	mov	r7, r0
    IPAddress addr;
   d70ce:	f7ff fa51 	bl	d6574 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d70d2:	4621      	mov	r1, r4
   d70d4:	2220      	movs	r2, #32
   d70d6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d70d8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d70da:	f000 fc57 	bl	d798c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d70de:	2340      	movs	r3, #64	; 0x40
   d70e0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d70e2:	4621      	mov	r1, r4
   d70e4:	466b      	mov	r3, sp
   d70e6:	aa0c      	add	r2, sp, #48	; 0x30
   d70e8:	4630      	mov	r0, r6
   d70ea:	f7fe fac1 	bl	d5670 <netdb_getaddrinfo>
    if (!r) {
   d70ee:	4604      	mov	r4, r0
   d70f0:	2800      	cmp	r0, #0
   d70f2:	d144      	bne.n	d717e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d70f4:	4602      	mov	r2, r0
   d70f6:	2101      	movs	r1, #1
   d70f8:	6868      	ldr	r0, [r5, #4]
   d70fa:	f7fe fd15 	bl	d5b28 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d70fe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7100:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7102:	4622      	mov	r2, r4
   d7104:	6868      	ldr	r0, [r5, #4]
   d7106:	f7fe fd0f 	bl	d5b28 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d710a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d710c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d710e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7110:	2e00      	cmp	r6, #0
   d7112:	d034      	beq.n	d717e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7114:	2900      	cmp	r1, #0
   d7116:	d132      	bne.n	d717e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7118:	6873      	ldr	r3, [r6, #4]
   d711a:	2b02      	cmp	r3, #2
   d711c:	d002      	beq.n	d7124 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d711e:	2b0a      	cmp	r3, #10
   d7120:	d009      	beq.n	d7136 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7122:	e02a      	b.n	d717a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7124:	f1b8 0f00 	cmp.w	r8, #0
   d7128:	d027      	beq.n	d717a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d712a:	6971      	ldr	r1, [r6, #20]
   d712c:	4638      	mov	r0, r7
   d712e:	3104      	adds	r1, #4
   d7130:	f7ff fa63 	bl	d65fa <_ZN9IPAddressaSEPKh>
   d7134:	e020      	b.n	d7178 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7136:	f1b9 0f00 	cmp.w	r9, #0
   d713a:	d01e      	beq.n	d717a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d713c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d713e:	2211      	movs	r2, #17
   d7140:	a801      	add	r0, sp, #4
   d7142:	f000 fc23 	bl	d798c <memset>
                    a.v = 6;
   d7146:	2306      	movs	r3, #6
   d7148:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d714c:	ad01      	add	r5, sp, #4
   d714e:	f104 0308 	add.w	r3, r4, #8
   d7152:	3418      	adds	r4, #24
   d7154:	6818      	ldr	r0, [r3, #0]
   d7156:	6859      	ldr	r1, [r3, #4]
   d7158:	462a      	mov	r2, r5
   d715a:	c203      	stmia	r2!, {r0, r1}
   d715c:	3308      	adds	r3, #8
   d715e:	42a3      	cmp	r3, r4
   d7160:	4615      	mov	r5, r2
   d7162:	d1f7      	bne.n	d7154 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7164:	a901      	add	r1, sp, #4
   d7166:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7168:	ad07      	add	r5, sp, #28
   d716a:	f7ff fa11 	bl	d6590 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d716e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7170:	1d3c      	adds	r4, r7, #4
   d7172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7174:	682b      	ldr	r3, [r5, #0]
   d7176:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7178:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d717a:	69f6      	ldr	r6, [r6, #28]
   d717c:	e7c8      	b.n	d7110 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d717e:	9800      	ldr	r0, [sp, #0]
   d7180:	f7fe fa6e 	bl	d5660 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7184:	4638      	mov	r0, r7
   d7186:	b015      	add	sp, #84	; 0x54
   d7188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d718c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d718c:	4b02      	ldr	r3, [pc, #8]	; (d7198 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d718e:	4a03      	ldr	r2, [pc, #12]	; (d719c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7190:	601a      	str	r2, [r3, #0]
   d7192:	2200      	movs	r2, #0
   d7194:	605a      	str	r2, [r3, #4]
   d7196:	4770      	bx	lr
   d7198:	2003e6f0 	.word	0x2003e6f0
   d719c:	000d8e64 	.word	0x000d8e64

000d71a0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d71a0:	b510      	push	{r4, lr}
   d71a2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d71a4:	f000 f8a8 	bl	d72f8 <_ZN8particle7globals11instanceSpiEv>
   d71a8:	f7fe fe73 	bl	d5e92 <_ZN8SPIClass9isEnabledEv>
   d71ac:	b128      	cbz	r0, d71ba <pinAvailable+0x1a>
   d71ae:	f1a4 030b 	sub.w	r3, r4, #11
   d71b2:	2b02      	cmp	r3, #2
   d71b4:	d801      	bhi.n	d71ba <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d71b6:	2000      	movs	r0, #0
   d71b8:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d71ba:	f000 f8d7 	bl	d736c <_Z19__fetch_global_Wirev>
   d71be:	f7ff fb83 	bl	d68c8 <_ZN7TwoWire9isEnabledEv>
   d71c2:	b108      	cbz	r0, d71c8 <pinAvailable+0x28>
   d71c4:	2c01      	cmp	r4, #1
   d71c6:	d9f6      	bls.n	d71b6 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d71c8:	f7ff fb06 	bl	d67d8 <_Z22__fetch_global_Serial1v>
   d71cc:	f7ff fb00 	bl	d67d0 <_ZN11USARTSerial9isEnabledEv>
   d71d0:	b118      	cbz	r0, d71da <pinAvailable+0x3a>
   d71d2:	f1a4 0309 	sub.w	r3, r4, #9
   d71d6:	2b01      	cmp	r3, #1
   d71d8:	d9ed      	bls.n	d71b6 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d71da:	2c23      	cmp	r4, #35	; 0x23
   d71dc:	bf8c      	ite	hi
   d71de:	2000      	movhi	r0, #0
   d71e0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d71e2:	bd10      	pop	{r4, pc}

000d71e4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d71e4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d71e6:	b538      	push	{r3, r4, r5, lr}
   d71e8:	4604      	mov	r4, r0
   d71ea:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d71ec:	d80a      	bhi.n	d7204 <pinMode+0x20>
   d71ee:	29ff      	cmp	r1, #255	; 0xff
   d71f0:	d008      	beq.n	d7204 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d71f2:	f7ff ffd5 	bl	d71a0 <pinAvailable>
   d71f6:	b128      	cbz	r0, d7204 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d71f8:	4629      	mov	r1, r5
   d71fa:	4620      	mov	r0, r4
}
   d71fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7200:	f7fe ba4e 	b.w	d56a0 <HAL_Pin_Mode>
   d7204:	bd38      	pop	{r3, r4, r5, pc}

000d7206 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7206:	b538      	push	{r3, r4, r5, lr}
   d7208:	4604      	mov	r4, r0
   d720a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d720c:	f7fe fa50 	bl	d56b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7210:	28ff      	cmp	r0, #255	; 0xff
   d7212:	d010      	beq.n	d7236 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7214:	2806      	cmp	r0, #6
   d7216:	d804      	bhi.n	d7222 <digitalWrite+0x1c>
   d7218:	234d      	movs	r3, #77	; 0x4d
   d721a:	fa23 f000 	lsr.w	r0, r3, r0
   d721e:	07c3      	lsls	r3, r0, #31
   d7220:	d409      	bmi.n	d7236 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7222:	4620      	mov	r0, r4
   d7224:	f7ff ffbc 	bl	d71a0 <pinAvailable>
   d7228:	b128      	cbz	r0, d7236 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d722a:	4629      	mov	r1, r5
   d722c:	4620      	mov	r0, r4
}
   d722e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7232:	f7fe ba45 	b.w	d56c0 <HAL_GPIO_Write>
   d7236:	bd38      	pop	{r3, r4, r5, pc}

000d7238 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7238:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d723a:	b510      	push	{r4, lr}
   d723c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d723e:	bf9c      	itt	ls
   d7240:	340e      	addls	r4, #14
   d7242:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7244:	4620      	mov	r0, r4
   d7246:	f7ff ffab 	bl	d71a0 <pinAvailable>
   d724a:	b150      	cbz	r0, d7262 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d724c:	2103      	movs	r1, #3
   d724e:	4620      	mov	r0, r4
   d7250:	f7fe fa1e 	bl	d5690 <HAL_Validate_Pin_Function>
   d7254:	2803      	cmp	r0, #3
   d7256:	d104      	bne.n	d7262 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d7258:	4620      	mov	r0, r4
}
   d725a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d725e:	f7fe ba3f 	b.w	d56e0 <HAL_ADC_Read>
}
   d7262:	2000      	movs	r0, #0
   d7264:	bd10      	pop	{r4, pc}

000d7266 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d7266:	b538      	push	{r3, r4, r5, lr}
   d7268:	4604      	mov	r4, r0
   d726a:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d726c:	f7ff ff98 	bl	d71a0 <pinAvailable>
   d7270:	b1f0      	cbz	r0, d72b0 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d7272:	2104      	movs	r1, #4
   d7274:	4620      	mov	r0, r4
   d7276:	f7fe fa0b 	bl	d5690 <HAL_Validate_Pin_Function>
   d727a:	2804      	cmp	r0, #4
   d727c:	d105      	bne.n	d728a <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d727e:	b2a9      	uxth	r1, r5
   d7280:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
   d7282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
   d7286:	f7fe ba23 	b.w	d56d0 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d728a:	2102      	movs	r1, #2
   d728c:	4620      	mov	r0, r4
   d728e:	f7fe f9ff 	bl	d5690 <HAL_Validate_Pin_Function>
   d7292:	2802      	cmp	r0, #2
   d7294:	d10c      	bne.n	d72b0 <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d7296:	4620      	mov	r0, r4
   d7298:	f7fe fa0a 	bl	d56b0 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d729c:	2801      	cmp	r0, #1
   d729e:	d001      	beq.n	d72a4 <_Z11analogWritetm+0x3e>
   d72a0:	2804      	cmp	r0, #4
   d72a2:	d105      	bne.n	d72b0 <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d72a4:	4629      	mov	r1, r5
   d72a6:	4620      	mov	r0, r4
    }
}
   d72a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
   d72ac:	f7fe ba20 	b.w	d56f0 <HAL_PWM_Write_Ext>
   d72b0:	bd38      	pop	{r3, r4, r5, pc}

000d72b2 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d72b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d72b6:	4690      	mov	r8, r2
   d72b8:	461e      	mov	r6, r3
   d72ba:	2407      	movs	r4, #7
   d72bc:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d72be:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d72c0:	f1b8 0f00 	cmp.w	r8, #0
   d72c4:	d104      	bne.n	d72d0 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d72c6:	f1c4 0107 	rsb	r1, r4, #7
   d72ca:	fa46 f101 	asr.w	r1, r6, r1
   d72ce:	e001      	b.n	d72d4 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d72d0:	fa46 f104 	asr.w	r1, r6, r4
   d72d4:	f001 0101 	and.w	r1, r1, #1
   d72d8:	4638      	mov	r0, r7
   d72da:	f7ff ff94 	bl	d7206 <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d72de:	2101      	movs	r1, #1
   d72e0:	4628      	mov	r0, r5
   d72e2:	f7ff ff90 	bl	d7206 <digitalWrite>
    digitalWrite(clockPin, LOW);
   d72e6:	2100      	movs	r1, #0
   d72e8:	4628      	mov	r0, r5
   d72ea:	f7ff ff8c 	bl	d7206 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d72ee:	f114 34ff 	adds.w	r4, r4, #4294967295
   d72f2:	d2e5      	bcs.n	d72c0 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d72f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d72f8 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d72f8:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d72fa:	4d0b      	ldr	r5, [pc, #44]	; (d7328 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d72fc:	6829      	ldr	r1, [r5, #0]
   d72fe:	f011 0401 	ands.w	r4, r1, #1
   d7302:	d10f      	bne.n	d7324 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d7304:	4628      	mov	r0, r5
   d7306:	f7fc fed7 	bl	d40b8 <__cxa_guard_acquire>
   d730a:	b158      	cbz	r0, d7324 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d730c:	4621      	mov	r1, r4
   d730e:	4807      	ldr	r0, [pc, #28]	; (d732c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7310:	f7fe fcfe 	bl	d5d10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7314:	4628      	mov	r0, r5
   d7316:	f7fc fed4 	bl	d40c2 <__cxa_guard_release>
   d731a:	4a05      	ldr	r2, [pc, #20]	; (d7330 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d731c:	4905      	ldr	r1, [pc, #20]	; (d7334 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d731e:	4803      	ldr	r0, [pc, #12]	; (d732c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7320:	f000 f84a 	bl	d73b8 <__aeabi_atexit>
    return instance;
}
   d7324:	4801      	ldr	r0, [pc, #4]	; (d732c <_ZN8particle7globals11instanceSpiEv+0x34>)
   d7326:	bd38      	pop	{r3, r4, r5, pc}
   d7328:	2003e704 	.word	0x2003e704
   d732c:	2003e6f8 	.word	0x2003e6f8
   d7330:	2003e1d0 	.word	0x2003e1d0
   d7334:	000d5cf5 	.word	0x000d5cf5

000d7338 <_Z17acquireWireBufferv>:
   d7338:	b570      	push	{r4, r5, r6, lr}
   d733a:	4604      	mov	r4, r0
   d733c:	2514      	movs	r5, #20
   d733e:	462a      	mov	r2, r5
   d7340:	4e09      	ldr	r6, [pc, #36]	; (d7368 <_Z17acquireWireBufferv+0x30>)
   d7342:	2100      	movs	r1, #0
   d7344:	f000 fb22 	bl	d798c <memset>
   d7348:	8025      	strh	r5, [r4, #0]
   d734a:	2520      	movs	r5, #32
   d734c:	4631      	mov	r1, r6
   d734e:	60a5      	str	r5, [r4, #8]
   d7350:	6125      	str	r5, [r4, #16]
   d7352:	4628      	mov	r0, r5
   d7354:	f000 f840 	bl	d73d8 <_ZnajRKSt9nothrow_t>
   d7358:	4631      	mov	r1, r6
   d735a:	6060      	str	r0, [r4, #4]
   d735c:	4628      	mov	r0, r5
   d735e:	f000 f83b 	bl	d73d8 <_ZnajRKSt9nothrow_t>
   d7362:	60e0      	str	r0, [r4, #12]
   d7364:	4620      	mov	r0, r4
   d7366:	bd70      	pop	{r4, r5, r6, pc}
   d7368:	000d8e90 	.word	0x000d8e90

000d736c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d736c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d736e:	4d0e      	ldr	r5, [pc, #56]	; (d73a8 <_Z19__fetch_global_Wirev+0x3c>)
   d7370:	6829      	ldr	r1, [r5, #0]
   d7372:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7376:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7378:	d113      	bne.n	d73a2 <_Z19__fetch_global_Wirev+0x36>
   d737a:	4628      	mov	r0, r5
   d737c:	f7fc fe9c 	bl	d40b8 <__cxa_guard_acquire>
   d7380:	b178      	cbz	r0, d73a2 <_Z19__fetch_global_Wirev+0x36>
   d7382:	a801      	add	r0, sp, #4
   d7384:	f7ff ffd8 	bl	d7338 <_Z17acquireWireBufferv>
   d7388:	aa01      	add	r2, sp, #4
   d738a:	4621      	mov	r1, r4
   d738c:	4807      	ldr	r0, [pc, #28]	; (d73ac <_Z19__fetch_global_Wirev+0x40>)
   d738e:	f7ff fa75 	bl	d687c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7392:	4628      	mov	r0, r5
   d7394:	f7fc fe95 	bl	d40c2 <__cxa_guard_release>
   d7398:	4a05      	ldr	r2, [pc, #20]	; (d73b0 <_Z19__fetch_global_Wirev+0x44>)
   d739a:	4906      	ldr	r1, [pc, #24]	; (d73b4 <_Z19__fetch_global_Wirev+0x48>)
   d739c:	4803      	ldr	r0, [pc, #12]	; (d73ac <_Z19__fetch_global_Wirev+0x40>)
   d739e:	f000 f80b 	bl	d73b8 <__aeabi_atexit>
	return wire;
}
   d73a2:	4802      	ldr	r0, [pc, #8]	; (d73ac <_Z19__fetch_global_Wirev+0x40>)
   d73a4:	b007      	add	sp, #28
   d73a6:	bd30      	pop	{r4, r5, pc}
   d73a8:	2003e70c 	.word	0x2003e70c
   d73ac:	2003e710 	.word	0x2003e710
   d73b0:	2003e1d0 	.word	0x2003e1d0
   d73b4:	000d6825 	.word	0x000d6825

000d73b8 <__aeabi_atexit>:
   d73b8:	460b      	mov	r3, r1
   d73ba:	4601      	mov	r1, r0
   d73bc:	4618      	mov	r0, r3
   d73be:	f000 b9a5 	b.w	d770c <__cxa_atexit>
	...

000d73c4 <_ZSt15get_new_handlerv>:
   d73c4:	4b02      	ldr	r3, [pc, #8]	; (d73d0 <_ZSt15get_new_handlerv+0xc>)
   d73c6:	6818      	ldr	r0, [r3, #0]
   d73c8:	f3bf 8f5f 	dmb	sy
   d73cc:	4770      	bx	lr
   d73ce:	bf00      	nop
   d73d0:	2003e724 	.word	0x2003e724

000d73d4 <_ZdlPvj>:
   d73d4:	f7fc be61 	b.w	d409a <_ZdlPv>

000d73d8 <_ZnajRKSt9nothrow_t>:
   d73d8:	f000 b800 	b.w	d73dc <_ZnwjRKSt9nothrow_t>

000d73dc <_ZnwjRKSt9nothrow_t>:
   d73dc:	b510      	push	{r4, lr}
   d73de:	2800      	cmp	r0, #0
   d73e0:	bf14      	ite	ne
   d73e2:	4604      	movne	r4, r0
   d73e4:	2401      	moveq	r4, #1
   d73e6:	4620      	mov	r0, r4
   d73e8:	f7fe fc06 	bl	d5bf8 <malloc>
   d73ec:	b920      	cbnz	r0, d73f8 <_ZnwjRKSt9nothrow_t+0x1c>
   d73ee:	f7ff ffe9 	bl	d73c4 <_ZSt15get_new_handlerv>
   d73f2:	b108      	cbz	r0, d73f8 <_ZnwjRKSt9nothrow_t+0x1c>
   d73f4:	4780      	blx	r0
   d73f6:	e7f6      	b.n	d73e6 <_ZnwjRKSt9nothrow_t+0xa>
   d73f8:	bd10      	pop	{r4, pc}
	...

000d73fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d73fc:	4b18      	ldr	r3, [pc, #96]	; (d7460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d73fe:	681a      	ldr	r2, [r3, #0]
   d7400:	07d1      	lsls	r1, r2, #31
   d7402:	bf5c      	itt	pl
   d7404:	2201      	movpl	r2, #1
   d7406:	601a      	strpl	r2, [r3, #0]
   d7408:	4b16      	ldr	r3, [pc, #88]	; (d7464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d740a:	681a      	ldr	r2, [r3, #0]
   d740c:	07d2      	lsls	r2, r2, #31
   d740e:	bf5c      	itt	pl
   d7410:	2201      	movpl	r2, #1
   d7412:	601a      	strpl	r2, [r3, #0]
   d7414:	4b14      	ldr	r3, [pc, #80]	; (d7468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7416:	681a      	ldr	r2, [r3, #0]
   d7418:	07d0      	lsls	r0, r2, #31
   d741a:	bf5c      	itt	pl
   d741c:	2201      	movpl	r2, #1
   d741e:	601a      	strpl	r2, [r3, #0]
   d7420:	4b12      	ldr	r3, [pc, #72]	; (d746c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7422:	681a      	ldr	r2, [r3, #0]
   d7424:	07d1      	lsls	r1, r2, #31
   d7426:	bf5c      	itt	pl
   d7428:	2201      	movpl	r2, #1
   d742a:	601a      	strpl	r2, [r3, #0]
   d742c:	4b10      	ldr	r3, [pc, #64]	; (d7470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d742e:	681a      	ldr	r2, [r3, #0]
   d7430:	07d2      	lsls	r2, r2, #31
   d7432:	bf5c      	itt	pl
   d7434:	2201      	movpl	r2, #1
   d7436:	601a      	strpl	r2, [r3, #0]
   d7438:	4b0e      	ldr	r3, [pc, #56]	; (d7474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d743a:	681a      	ldr	r2, [r3, #0]
   d743c:	07d0      	lsls	r0, r2, #31
   d743e:	bf5c      	itt	pl
   d7440:	2201      	movpl	r2, #1
   d7442:	601a      	strpl	r2, [r3, #0]
   d7444:	4b0c      	ldr	r3, [pc, #48]	; (d7478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7446:	681a      	ldr	r2, [r3, #0]
   d7448:	07d1      	lsls	r1, r2, #31
   d744a:	bf5c      	itt	pl
   d744c:	2201      	movpl	r2, #1
   d744e:	601a      	strpl	r2, [r3, #0]
   d7450:	4b0a      	ldr	r3, [pc, #40]	; (d747c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7452:	681a      	ldr	r2, [r3, #0]
   d7454:	07d2      	lsls	r2, r2, #31
   d7456:	bf5c      	itt	pl
   d7458:	2201      	movpl	r2, #1
   d745a:	601a      	strpl	r2, [r3, #0]
   d745c:	4770      	bx	lr
   d745e:	bf00      	nop
   d7460:	2003e744 	.word	0x2003e744
   d7464:	2003e740 	.word	0x2003e740
   d7468:	2003e73c 	.word	0x2003e73c
   d746c:	2003e738 	.word	0x2003e738
   d7470:	2003e734 	.word	0x2003e734
   d7474:	2003e730 	.word	0x2003e730
   d7478:	2003e72c 	.word	0x2003e72c
   d747c:	2003e728 	.word	0x2003e728

000d7480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7480:	4b24      	ldr	r3, [pc, #144]	; (d7514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7482:	681a      	ldr	r2, [r3, #0]
   d7484:	07d0      	lsls	r0, r2, #31
   d7486:	bf5c      	itt	pl
   d7488:	2201      	movpl	r2, #1
   d748a:	601a      	strpl	r2, [r3, #0]
   d748c:	4b22      	ldr	r3, [pc, #136]	; (d7518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d748e:	681a      	ldr	r2, [r3, #0]
   d7490:	07d1      	lsls	r1, r2, #31
   d7492:	bf5c      	itt	pl
   d7494:	2201      	movpl	r2, #1
   d7496:	601a      	strpl	r2, [r3, #0]
   d7498:	4b20      	ldr	r3, [pc, #128]	; (d751c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d749a:	681a      	ldr	r2, [r3, #0]
   d749c:	07d2      	lsls	r2, r2, #31
   d749e:	bf5c      	itt	pl
   d74a0:	2201      	movpl	r2, #1
   d74a2:	601a      	strpl	r2, [r3, #0]
   d74a4:	4b1e      	ldr	r3, [pc, #120]	; (d7520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d74a6:	681a      	ldr	r2, [r3, #0]
   d74a8:	07d0      	lsls	r0, r2, #31
   d74aa:	bf5c      	itt	pl
   d74ac:	2201      	movpl	r2, #1
   d74ae:	601a      	strpl	r2, [r3, #0]
   d74b0:	4b1c      	ldr	r3, [pc, #112]	; (d7524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d74b2:	681a      	ldr	r2, [r3, #0]
   d74b4:	07d1      	lsls	r1, r2, #31
   d74b6:	bf5c      	itt	pl
   d74b8:	2201      	movpl	r2, #1
   d74ba:	601a      	strpl	r2, [r3, #0]
   d74bc:	4b1a      	ldr	r3, [pc, #104]	; (d7528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d74be:	681a      	ldr	r2, [r3, #0]
   d74c0:	07d2      	lsls	r2, r2, #31
   d74c2:	bf5c      	itt	pl
   d74c4:	2201      	movpl	r2, #1
   d74c6:	601a      	strpl	r2, [r3, #0]
   d74c8:	4b18      	ldr	r3, [pc, #96]	; (d752c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d74ca:	681a      	ldr	r2, [r3, #0]
   d74cc:	07d0      	lsls	r0, r2, #31
   d74ce:	bf5c      	itt	pl
   d74d0:	2201      	movpl	r2, #1
   d74d2:	601a      	strpl	r2, [r3, #0]
   d74d4:	4b16      	ldr	r3, [pc, #88]	; (d7530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d74d6:	681a      	ldr	r2, [r3, #0]
   d74d8:	07d1      	lsls	r1, r2, #31
   d74da:	bf5c      	itt	pl
   d74dc:	2201      	movpl	r2, #1
   d74de:	601a      	strpl	r2, [r3, #0]
   d74e0:	4b14      	ldr	r3, [pc, #80]	; (d7534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d74e2:	681a      	ldr	r2, [r3, #0]
   d74e4:	07d2      	lsls	r2, r2, #31
   d74e6:	bf5c      	itt	pl
   d74e8:	2201      	movpl	r2, #1
   d74ea:	601a      	strpl	r2, [r3, #0]
   d74ec:	4b12      	ldr	r3, [pc, #72]	; (d7538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d74ee:	681a      	ldr	r2, [r3, #0]
   d74f0:	07d0      	lsls	r0, r2, #31
   d74f2:	bf5c      	itt	pl
   d74f4:	2201      	movpl	r2, #1
   d74f6:	601a      	strpl	r2, [r3, #0]
   d74f8:	4b10      	ldr	r3, [pc, #64]	; (d753c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d74fa:	681a      	ldr	r2, [r3, #0]
   d74fc:	07d1      	lsls	r1, r2, #31
   d74fe:	bf5c      	itt	pl
   d7500:	2201      	movpl	r2, #1
   d7502:	601a      	strpl	r2, [r3, #0]
   d7504:	4b0e      	ldr	r3, [pc, #56]	; (d7540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7506:	681a      	ldr	r2, [r3, #0]
   d7508:	07d2      	lsls	r2, r2, #31
   d750a:	bf5c      	itt	pl
   d750c:	2201      	movpl	r2, #1
   d750e:	601a      	strpl	r2, [r3, #0]
   d7510:	4770      	bx	lr
   d7512:	bf00      	nop
   d7514:	2003e774 	.word	0x2003e774
   d7518:	2003e770 	.word	0x2003e770
   d751c:	2003e76c 	.word	0x2003e76c
   d7520:	2003e768 	.word	0x2003e768
   d7524:	2003e764 	.word	0x2003e764
   d7528:	2003e760 	.word	0x2003e760
   d752c:	2003e75c 	.word	0x2003e75c
   d7530:	2003e758 	.word	0x2003e758
   d7534:	2003e754 	.word	0x2003e754
   d7538:	2003e750 	.word	0x2003e750
   d753c:	2003e74c 	.word	0x2003e74c
   d7540:	2003e748 	.word	0x2003e748

000d7544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7544:	4b24      	ldr	r3, [pc, #144]	; (d75d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7546:	681a      	ldr	r2, [r3, #0]
   d7548:	07d0      	lsls	r0, r2, #31
   d754a:	bf5c      	itt	pl
   d754c:	2201      	movpl	r2, #1
   d754e:	601a      	strpl	r2, [r3, #0]
   d7550:	4b22      	ldr	r3, [pc, #136]	; (d75dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7552:	681a      	ldr	r2, [r3, #0]
   d7554:	07d1      	lsls	r1, r2, #31
   d7556:	bf5c      	itt	pl
   d7558:	2201      	movpl	r2, #1
   d755a:	601a      	strpl	r2, [r3, #0]
   d755c:	4b20      	ldr	r3, [pc, #128]	; (d75e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d755e:	681a      	ldr	r2, [r3, #0]
   d7560:	07d2      	lsls	r2, r2, #31
   d7562:	bf5c      	itt	pl
   d7564:	2201      	movpl	r2, #1
   d7566:	601a      	strpl	r2, [r3, #0]
   d7568:	4b1e      	ldr	r3, [pc, #120]	; (d75e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d756a:	681a      	ldr	r2, [r3, #0]
   d756c:	07d0      	lsls	r0, r2, #31
   d756e:	bf5c      	itt	pl
   d7570:	2201      	movpl	r2, #1
   d7572:	601a      	strpl	r2, [r3, #0]
   d7574:	4b1c      	ldr	r3, [pc, #112]	; (d75e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7576:	681a      	ldr	r2, [r3, #0]
   d7578:	07d1      	lsls	r1, r2, #31
   d757a:	bf5c      	itt	pl
   d757c:	2201      	movpl	r2, #1
   d757e:	601a      	strpl	r2, [r3, #0]
   d7580:	4b1a      	ldr	r3, [pc, #104]	; (d75ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7582:	681a      	ldr	r2, [r3, #0]
   d7584:	07d2      	lsls	r2, r2, #31
   d7586:	bf5c      	itt	pl
   d7588:	2201      	movpl	r2, #1
   d758a:	601a      	strpl	r2, [r3, #0]
   d758c:	4b18      	ldr	r3, [pc, #96]	; (d75f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d758e:	681a      	ldr	r2, [r3, #0]
   d7590:	07d0      	lsls	r0, r2, #31
   d7592:	bf5c      	itt	pl
   d7594:	2201      	movpl	r2, #1
   d7596:	601a      	strpl	r2, [r3, #0]
   d7598:	4b16      	ldr	r3, [pc, #88]	; (d75f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d759a:	681a      	ldr	r2, [r3, #0]
   d759c:	07d1      	lsls	r1, r2, #31
   d759e:	bf5c      	itt	pl
   d75a0:	2201      	movpl	r2, #1
   d75a2:	601a      	strpl	r2, [r3, #0]
   d75a4:	4b14      	ldr	r3, [pc, #80]	; (d75f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d75a6:	681a      	ldr	r2, [r3, #0]
   d75a8:	07d2      	lsls	r2, r2, #31
   d75aa:	bf5c      	itt	pl
   d75ac:	2201      	movpl	r2, #1
   d75ae:	601a      	strpl	r2, [r3, #0]
   d75b0:	4b12      	ldr	r3, [pc, #72]	; (d75fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d75b2:	681a      	ldr	r2, [r3, #0]
   d75b4:	07d0      	lsls	r0, r2, #31
   d75b6:	bf5c      	itt	pl
   d75b8:	2201      	movpl	r2, #1
   d75ba:	601a      	strpl	r2, [r3, #0]
   d75bc:	4b10      	ldr	r3, [pc, #64]	; (d7600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d75be:	681a      	ldr	r2, [r3, #0]
   d75c0:	07d1      	lsls	r1, r2, #31
   d75c2:	bf5c      	itt	pl
   d75c4:	2201      	movpl	r2, #1
   d75c6:	601a      	strpl	r2, [r3, #0]
   d75c8:	4b0e      	ldr	r3, [pc, #56]	; (d7604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d75ca:	681a      	ldr	r2, [r3, #0]
   d75cc:	07d2      	lsls	r2, r2, #31
   d75ce:	bf5c      	itt	pl
   d75d0:	2201      	movpl	r2, #1
   d75d2:	601a      	strpl	r2, [r3, #0]
   d75d4:	4770      	bx	lr
   d75d6:	bf00      	nop
   d75d8:	2003e7a4 	.word	0x2003e7a4
   d75dc:	2003e7a0 	.word	0x2003e7a0
   d75e0:	2003e79c 	.word	0x2003e79c
   d75e4:	2003e798 	.word	0x2003e798
   d75e8:	2003e794 	.word	0x2003e794
   d75ec:	2003e790 	.word	0x2003e790
   d75f0:	2003e78c 	.word	0x2003e78c
   d75f4:	2003e788 	.word	0x2003e788
   d75f8:	2003e784 	.word	0x2003e784
   d75fc:	2003e780 	.word	0x2003e780
   d7600:	2003e77c 	.word	0x2003e77c
   d7604:	2003e778 	.word	0x2003e778

000d7608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7608:	4b18      	ldr	r3, [pc, #96]	; (d766c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d760a:	681a      	ldr	r2, [r3, #0]
   d760c:	07d1      	lsls	r1, r2, #31
   d760e:	bf5c      	itt	pl
   d7610:	2201      	movpl	r2, #1
   d7612:	601a      	strpl	r2, [r3, #0]
   d7614:	4b16      	ldr	r3, [pc, #88]	; (d7670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7616:	681a      	ldr	r2, [r3, #0]
   d7618:	07d2      	lsls	r2, r2, #31
   d761a:	bf5c      	itt	pl
   d761c:	2201      	movpl	r2, #1
   d761e:	601a      	strpl	r2, [r3, #0]
   d7620:	4b14      	ldr	r3, [pc, #80]	; (d7674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7622:	681a      	ldr	r2, [r3, #0]
   d7624:	07d0      	lsls	r0, r2, #31
   d7626:	bf5c      	itt	pl
   d7628:	2201      	movpl	r2, #1
   d762a:	601a      	strpl	r2, [r3, #0]
   d762c:	4b12      	ldr	r3, [pc, #72]	; (d7678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d762e:	681a      	ldr	r2, [r3, #0]
   d7630:	07d1      	lsls	r1, r2, #31
   d7632:	bf5c      	itt	pl
   d7634:	2201      	movpl	r2, #1
   d7636:	601a      	strpl	r2, [r3, #0]
   d7638:	4b10      	ldr	r3, [pc, #64]	; (d767c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d763a:	681a      	ldr	r2, [r3, #0]
   d763c:	07d2      	lsls	r2, r2, #31
   d763e:	bf5c      	itt	pl
   d7640:	2201      	movpl	r2, #1
   d7642:	601a      	strpl	r2, [r3, #0]
   d7644:	4b0e      	ldr	r3, [pc, #56]	; (d7680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7646:	681a      	ldr	r2, [r3, #0]
   d7648:	07d0      	lsls	r0, r2, #31
   d764a:	bf5c      	itt	pl
   d764c:	2201      	movpl	r2, #1
   d764e:	601a      	strpl	r2, [r3, #0]
   d7650:	4b0c      	ldr	r3, [pc, #48]	; (d7684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7652:	681a      	ldr	r2, [r3, #0]
   d7654:	07d1      	lsls	r1, r2, #31
   d7656:	bf5c      	itt	pl
   d7658:	2201      	movpl	r2, #1
   d765a:	601a      	strpl	r2, [r3, #0]
   d765c:	4b0a      	ldr	r3, [pc, #40]	; (d7688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d765e:	681a      	ldr	r2, [r3, #0]
   d7660:	07d2      	lsls	r2, r2, #31
   d7662:	bf5c      	itt	pl
   d7664:	2201      	movpl	r2, #1
   d7666:	601a      	strpl	r2, [r3, #0]
   d7668:	4770      	bx	lr
   d766a:	bf00      	nop
   d766c:	2003e7c4 	.word	0x2003e7c4
   d7670:	2003e7c0 	.word	0x2003e7c0
   d7674:	2003e7bc 	.word	0x2003e7bc
   d7678:	2003e7b8 	.word	0x2003e7b8
   d767c:	2003e7b4 	.word	0x2003e7b4
   d7680:	2003e7b0 	.word	0x2003e7b0
   d7684:	2003e7ac 	.word	0x2003e7ac
   d7688:	2003e7a8 	.word	0x2003e7a8

000d768c <asctime>:
   d768c:	4b09      	ldr	r3, [pc, #36]	; (d76b4 <asctime+0x28>)
   d768e:	b570      	push	{r4, r5, r6, lr}
   d7690:	681c      	ldr	r4, [r3, #0]
   d7692:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d7694:	4606      	mov	r6, r0
   d7696:	b93d      	cbnz	r5, d76a8 <asctime+0x1c>
   d7698:	201a      	movs	r0, #26
   d769a:	f7fe faad 	bl	d5bf8 <malloc>
   d769e:	221a      	movs	r2, #26
   d76a0:	6420      	str	r0, [r4, #64]	; 0x40
   d76a2:	4629      	mov	r1, r5
   d76a4:	f000 f972 	bl	d798c <memset>
   d76a8:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d76aa:	4630      	mov	r0, r6
   d76ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d76b0:	f000 b802 	b.w	d76b8 <asctime_r>
   d76b4:	2003e180 	.word	0x2003e180

000d76b8 <asctime_r>:
   d76b8:	b510      	push	{r4, lr}
   d76ba:	460c      	mov	r4, r1
   d76bc:	6941      	ldr	r1, [r0, #20]
   d76be:	6903      	ldr	r3, [r0, #16]
   d76c0:	6982      	ldr	r2, [r0, #24]
   d76c2:	b086      	sub	sp, #24
   d76c4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d76c8:	9104      	str	r1, [sp, #16]
   d76ca:	6801      	ldr	r1, [r0, #0]
   d76cc:	9103      	str	r1, [sp, #12]
   d76ce:	6841      	ldr	r1, [r0, #4]
   d76d0:	9102      	str	r1, [sp, #8]
   d76d2:	6881      	ldr	r1, [r0, #8]
   d76d4:	9101      	str	r1, [sp, #4]
   d76d6:	68c1      	ldr	r1, [r0, #12]
   d76d8:	9100      	str	r1, [sp, #0]
   d76da:	4907      	ldr	r1, [pc, #28]	; (d76f8 <asctime_r+0x40>)
   d76dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d76e0:	440b      	add	r3, r1
   d76e2:	4906      	ldr	r1, [pc, #24]	; (d76fc <asctime_r+0x44>)
   d76e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d76e8:	440a      	add	r2, r1
   d76ea:	4620      	mov	r0, r4
   d76ec:	4904      	ldr	r1, [pc, #16]	; (d7700 <asctime_r+0x48>)
   d76ee:	f7fe fa9b 	bl	d5c28 <siprintf>
   d76f2:	4620      	mov	r0, r4
   d76f4:	b006      	add	sp, #24
   d76f6:	bd10      	pop	{r4, pc}
   d76f8:	000d8ea6 	.word	0x000d8ea6
   d76fc:	000d8e91 	.word	0x000d8e91
   d7700:	000d8eca 	.word	0x000d8eca

000d7704 <atoi>:
   d7704:	220a      	movs	r2, #10
   d7706:	2100      	movs	r1, #0
   d7708:	f000 ba5c 	b.w	d7bc4 <strtol>

000d770c <__cxa_atexit>:
   d770c:	b510      	push	{r4, lr}
   d770e:	4c05      	ldr	r4, [pc, #20]	; (d7724 <__cxa_atexit+0x18>)
   d7710:	4613      	mov	r3, r2
   d7712:	b12c      	cbz	r4, d7720 <__cxa_atexit+0x14>
   d7714:	460a      	mov	r2, r1
   d7716:	4601      	mov	r1, r0
   d7718:	2002      	movs	r0, #2
   d771a:	f3af 8000 	nop.w
   d771e:	bd10      	pop	{r4, pc}
   d7720:	4620      	mov	r0, r4
   d7722:	bd10      	pop	{r4, pc}
   d7724:	00000000 	.word	0x00000000

000d7728 <localtime>:
   d7728:	b538      	push	{r3, r4, r5, lr}
   d772a:	4b07      	ldr	r3, [pc, #28]	; (d7748 <localtime+0x20>)
   d772c:	681c      	ldr	r4, [r3, #0]
   d772e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7730:	4605      	mov	r5, r0
   d7732:	b91b      	cbnz	r3, d773c <localtime+0x14>
   d7734:	2024      	movs	r0, #36	; 0x24
   d7736:	f7fe fa5f 	bl	d5bf8 <malloc>
   d773a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d773c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d773e:	4628      	mov	r0, r5
   d7740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7744:	f000 b802 	b.w	d774c <localtime_r>
   d7748:	2003e180 	.word	0x2003e180

000d774c <localtime_r>:
   d774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7750:	460c      	mov	r4, r1
   d7752:	4680      	mov	r8, r0
   d7754:	f000 fd3c 	bl	d81d0 <__gettzinfo>
   d7758:	4621      	mov	r1, r4
   d775a:	4607      	mov	r7, r0
   d775c:	4640      	mov	r0, r8
   d775e:	f000 fd3b 	bl	d81d8 <gmtime_r>
   d7762:	6946      	ldr	r6, [r0, #20]
   d7764:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d7768:	07b3      	lsls	r3, r6, #30
   d776a:	4604      	mov	r4, r0
   d776c:	d105      	bne.n	d777a <localtime_r+0x2e>
   d776e:	2264      	movs	r2, #100	; 0x64
   d7770:	fb96 f3f2 	sdiv	r3, r6, r2
   d7774:	fb02 6313 	mls	r3, r2, r3, r6
   d7778:	b94b      	cbnz	r3, d778e <localtime_r+0x42>
   d777a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d777e:	fb96 f3f5 	sdiv	r3, r6, r5
   d7782:	fb05 6513 	mls	r5, r5, r3, r6
   d7786:	fab5 f385 	clz	r3, r5
   d778a:	095b      	lsrs	r3, r3, #5
   d778c:	e000      	b.n	d7790 <localtime_r+0x44>
   d778e:	2301      	movs	r3, #1
   d7790:	4a5f      	ldr	r2, [pc, #380]	; (d7910 <localtime_r+0x1c4>)
   d7792:	2530      	movs	r5, #48	; 0x30
   d7794:	fb05 2503 	mla	r5, r5, r3, r2
   d7798:	f000 fb4e 	bl	d7e38 <__tz_lock>
   d779c:	f000 fb4e 	bl	d7e3c <_tzset_unlocked>
   d77a0:	4b5c      	ldr	r3, [pc, #368]	; (d7914 <localtime_r+0x1c8>)
   d77a2:	681b      	ldr	r3, [r3, #0]
   d77a4:	b1f3      	cbz	r3, d77e4 <localtime_r+0x98>
   d77a6:	687b      	ldr	r3, [r7, #4]
   d77a8:	429e      	cmp	r6, r3
   d77aa:	d105      	bne.n	d77b8 <localtime_r+0x6c>
   d77ac:	6839      	ldr	r1, [r7, #0]
   d77ae:	f8d8 3000 	ldr.w	r3, [r8]
   d77b2:	69fa      	ldr	r2, [r7, #28]
   d77b4:	b941      	cbnz	r1, d77c8 <localtime_r+0x7c>
   d77b6:	e00a      	b.n	d77ce <localtime_r+0x82>
   d77b8:	4630      	mov	r0, r6
   d77ba:	f000 fa95 	bl	d7ce8 <__tzcalc_limits>
   d77be:	2800      	cmp	r0, #0
   d77c0:	d1f4      	bne.n	d77ac <localtime_r+0x60>
   d77c2:	f04f 33ff 	mov.w	r3, #4294967295
   d77c6:	e00d      	b.n	d77e4 <localtime_r+0x98>
   d77c8:	4293      	cmp	r3, r2
   d77ca:	db08      	blt.n	d77de <localtime_r+0x92>
   d77cc:	e001      	b.n	d77d2 <localtime_r+0x86>
   d77ce:	4293      	cmp	r3, r2
   d77d0:	da07      	bge.n	d77e2 <localtime_r+0x96>
   d77d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d77d4:	4293      	cmp	r3, r2
   d77d6:	bfac      	ite	ge
   d77d8:	2300      	movge	r3, #0
   d77da:	2301      	movlt	r3, #1
   d77dc:	e002      	b.n	d77e4 <localtime_r+0x98>
   d77de:	2300      	movs	r3, #0
   d77e0:	e000      	b.n	d77e4 <localtime_r+0x98>
   d77e2:	2301      	movs	r3, #1
   d77e4:	6223      	str	r3, [r4, #32]
   d77e6:	6a23      	ldr	r3, [r4, #32]
   d77e8:	2b01      	cmp	r3, #1
   d77ea:	bf0c      	ite	eq
   d77ec:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d77ee:	6a39      	ldrne	r1, [r7, #32]
   d77f0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d77f4:	203c      	movs	r0, #60	; 0x3c
   d77f6:	fb91 f6f3 	sdiv	r6, r1, r3
   d77fa:	fb03 1316 	mls	r3, r3, r6, r1
   d77fe:	6861      	ldr	r1, [r4, #4]
   d7800:	fb93 f2f0 	sdiv	r2, r3, r0
   d7804:	fb00 3012 	mls	r0, r0, r2, r3
   d7808:	6823      	ldr	r3, [r4, #0]
   d780a:	1a89      	subs	r1, r1, r2
   d780c:	68a2      	ldr	r2, [r4, #8]
   d780e:	6061      	str	r1, [r4, #4]
   d7810:	1a1b      	subs	r3, r3, r0
   d7812:	1b92      	subs	r2, r2, r6
   d7814:	2b3b      	cmp	r3, #59	; 0x3b
   d7816:	6023      	str	r3, [r4, #0]
   d7818:	60a2      	str	r2, [r4, #8]
   d781a:	dd03      	ble.n	d7824 <localtime_r+0xd8>
   d781c:	3101      	adds	r1, #1
   d781e:	6061      	str	r1, [r4, #4]
   d7820:	3b3c      	subs	r3, #60	; 0x3c
   d7822:	e004      	b.n	d782e <localtime_r+0xe2>
   d7824:	2b00      	cmp	r3, #0
   d7826:	da03      	bge.n	d7830 <localtime_r+0xe4>
   d7828:	3901      	subs	r1, #1
   d782a:	6061      	str	r1, [r4, #4]
   d782c:	333c      	adds	r3, #60	; 0x3c
   d782e:	6023      	str	r3, [r4, #0]
   d7830:	6863      	ldr	r3, [r4, #4]
   d7832:	2b3b      	cmp	r3, #59	; 0x3b
   d7834:	dd03      	ble.n	d783e <localtime_r+0xf2>
   d7836:	3201      	adds	r2, #1
   d7838:	60a2      	str	r2, [r4, #8]
   d783a:	3b3c      	subs	r3, #60	; 0x3c
   d783c:	e004      	b.n	d7848 <localtime_r+0xfc>
   d783e:	2b00      	cmp	r3, #0
   d7840:	da03      	bge.n	d784a <localtime_r+0xfe>
   d7842:	3a01      	subs	r2, #1
   d7844:	60a2      	str	r2, [r4, #8]
   d7846:	333c      	adds	r3, #60	; 0x3c
   d7848:	6063      	str	r3, [r4, #4]
   d784a:	68a3      	ldr	r3, [r4, #8]
   d784c:	2b17      	cmp	r3, #23
   d784e:	dd22      	ble.n	d7896 <localtime_r+0x14a>
   d7850:	69e2      	ldr	r2, [r4, #28]
   d7852:	3201      	adds	r2, #1
   d7854:	61e2      	str	r2, [r4, #28]
   d7856:	69a2      	ldr	r2, [r4, #24]
   d7858:	3201      	adds	r2, #1
   d785a:	2a06      	cmp	r2, #6
   d785c:	bfc8      	it	gt
   d785e:	2200      	movgt	r2, #0
   d7860:	61a2      	str	r2, [r4, #24]
   d7862:	68e2      	ldr	r2, [r4, #12]
   d7864:	3b18      	subs	r3, #24
   d7866:	3201      	adds	r2, #1
   d7868:	60a3      	str	r3, [r4, #8]
   d786a:	6923      	ldr	r3, [r4, #16]
   d786c:	60e2      	str	r2, [r4, #12]
   d786e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7872:	428a      	cmp	r2, r1
   d7874:	dd46      	ble.n	d7904 <localtime_r+0x1b8>
   d7876:	3301      	adds	r3, #1
   d7878:	2b0c      	cmp	r3, #12
   d787a:	bf0c      	ite	eq
   d787c:	6963      	ldreq	r3, [r4, #20]
   d787e:	6123      	strne	r3, [r4, #16]
   d7880:	eba2 0201 	sub.w	r2, r2, r1
   d7884:	60e2      	str	r2, [r4, #12]
   d7886:	bf01      	itttt	eq
   d7888:	3301      	addeq	r3, #1
   d788a:	2200      	moveq	r2, #0
   d788c:	6122      	streq	r2, [r4, #16]
   d788e:	6163      	streq	r3, [r4, #20]
   d7890:	bf08      	it	eq
   d7892:	61e2      	streq	r2, [r4, #28]
   d7894:	e036      	b.n	d7904 <localtime_r+0x1b8>
   d7896:	2b00      	cmp	r3, #0
   d7898:	da34      	bge.n	d7904 <localtime_r+0x1b8>
   d789a:	69e2      	ldr	r2, [r4, #28]
   d789c:	3a01      	subs	r2, #1
   d789e:	61e2      	str	r2, [r4, #28]
   d78a0:	69a2      	ldr	r2, [r4, #24]
   d78a2:	3a01      	subs	r2, #1
   d78a4:	bf48      	it	mi
   d78a6:	2206      	movmi	r2, #6
   d78a8:	61a2      	str	r2, [r4, #24]
   d78aa:	68e2      	ldr	r2, [r4, #12]
   d78ac:	3318      	adds	r3, #24
   d78ae:	3a01      	subs	r2, #1
   d78b0:	60e2      	str	r2, [r4, #12]
   d78b2:	60a3      	str	r3, [r4, #8]
   d78b4:	bb32      	cbnz	r2, d7904 <localtime_r+0x1b8>
   d78b6:	6923      	ldr	r3, [r4, #16]
   d78b8:	3b01      	subs	r3, #1
   d78ba:	d401      	bmi.n	d78c0 <localtime_r+0x174>
   d78bc:	6123      	str	r3, [r4, #16]
   d78be:	e01d      	b.n	d78fc <localtime_r+0x1b0>
   d78c0:	230b      	movs	r3, #11
   d78c2:	6123      	str	r3, [r4, #16]
   d78c4:	6963      	ldr	r3, [r4, #20]
   d78c6:	1e5a      	subs	r2, r3, #1
   d78c8:	f012 0f03 	tst.w	r2, #3
   d78cc:	6162      	str	r2, [r4, #20]
   d78ce:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d78d2:	d105      	bne.n	d78e0 <localtime_r+0x194>
   d78d4:	2164      	movs	r1, #100	; 0x64
   d78d6:	fb93 f2f1 	sdiv	r2, r3, r1
   d78da:	fb01 3212 	mls	r2, r1, r2, r3
   d78de:	b94a      	cbnz	r2, d78f4 <localtime_r+0x1a8>
   d78e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d78e4:	fb93 f2f1 	sdiv	r2, r3, r1
   d78e8:	fb01 3312 	mls	r3, r1, r2, r3
   d78ec:	fab3 f383 	clz	r3, r3
   d78f0:	095b      	lsrs	r3, r3, #5
   d78f2:	e000      	b.n	d78f6 <localtime_r+0x1aa>
   d78f4:	2301      	movs	r3, #1
   d78f6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d78fa:	61e3      	str	r3, [r4, #28]
   d78fc:	6923      	ldr	r3, [r4, #16]
   d78fe:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7902:	60e3      	str	r3, [r4, #12]
   d7904:	f000 fa99 	bl	d7e3a <__tz_unlock>
   d7908:	4620      	mov	r0, r4
   d790a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d790e:	bf00      	nop
   d7910:	000d9050 	.word	0x000d9050
   d7914:	2003e7e4 	.word	0x2003e7e4

000d7918 <ldiv>:
   d7918:	2900      	cmp	r1, #0
   d791a:	b510      	push	{r4, lr}
   d791c:	fb91 f4f2 	sdiv	r4, r1, r2
   d7920:	fb02 1314 	mls	r3, r2, r4, r1
   d7924:	db04      	blt.n	d7930 <ldiv+0x18>
   d7926:	2b00      	cmp	r3, #0
   d7928:	da07      	bge.n	d793a <ldiv+0x22>
   d792a:	3401      	adds	r4, #1
   d792c:	1a9b      	subs	r3, r3, r2
   d792e:	e004      	b.n	d793a <ldiv+0x22>
   d7930:	2b00      	cmp	r3, #0
   d7932:	bfc4      	itt	gt
   d7934:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d7938:	189b      	addgt	r3, r3, r2
   d793a:	6004      	str	r4, [r0, #0]
   d793c:	6043      	str	r3, [r0, #4]
   d793e:	bd10      	pop	{r4, pc}

000d7940 <memcpy>:
   d7940:	b510      	push	{r4, lr}
   d7942:	1e43      	subs	r3, r0, #1
   d7944:	440a      	add	r2, r1
   d7946:	4291      	cmp	r1, r2
   d7948:	d004      	beq.n	d7954 <memcpy+0x14>
   d794a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d794e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7952:	e7f8      	b.n	d7946 <memcpy+0x6>
   d7954:	bd10      	pop	{r4, pc}

000d7956 <memmove>:
   d7956:	4288      	cmp	r0, r1
   d7958:	b510      	push	{r4, lr}
   d795a:	eb01 0302 	add.w	r3, r1, r2
   d795e:	d801      	bhi.n	d7964 <memmove+0xe>
   d7960:	1e42      	subs	r2, r0, #1
   d7962:	e00b      	b.n	d797c <memmove+0x26>
   d7964:	4298      	cmp	r0, r3
   d7966:	d2fb      	bcs.n	d7960 <memmove+0xa>
   d7968:	1881      	adds	r1, r0, r2
   d796a:	1ad2      	subs	r2, r2, r3
   d796c:	42d3      	cmn	r3, r2
   d796e:	d004      	beq.n	d797a <memmove+0x24>
   d7970:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7974:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d7978:	e7f8      	b.n	d796c <memmove+0x16>
   d797a:	bd10      	pop	{r4, pc}
   d797c:	4299      	cmp	r1, r3
   d797e:	d004      	beq.n	d798a <memmove+0x34>
   d7980:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7984:	f802 4f01 	strb.w	r4, [r2, #1]!
   d7988:	e7f8      	b.n	d797c <memmove+0x26>
   d798a:	bd10      	pop	{r4, pc}

000d798c <memset>:
   d798c:	4402      	add	r2, r0
   d798e:	4603      	mov	r3, r0
   d7990:	4293      	cmp	r3, r2
   d7992:	d002      	beq.n	d799a <memset+0xe>
   d7994:	f803 1b01 	strb.w	r1, [r3], #1
   d7998:	e7fa      	b.n	d7990 <memset+0x4>
   d799a:	4770      	bx	lr

000d799c <srand>:
   d799c:	b538      	push	{r3, r4, r5, lr}
   d799e:	4b12      	ldr	r3, [pc, #72]	; (d79e8 <srand+0x4c>)
   d79a0:	681c      	ldr	r4, [r3, #0]
   d79a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d79a4:	4605      	mov	r5, r0
   d79a6:	b9d3      	cbnz	r3, d79de <srand+0x42>
   d79a8:	2018      	movs	r0, #24
   d79aa:	f7fe f925 	bl	d5bf8 <malloc>
   d79ae:	f243 330e 	movw	r3, #13070	; 0x330e
   d79b2:	63a0      	str	r0, [r4, #56]	; 0x38
   d79b4:	8003      	strh	r3, [r0, #0]
   d79b6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d79ba:	8043      	strh	r3, [r0, #2]
   d79bc:	f241 2334 	movw	r3, #4660	; 0x1234
   d79c0:	8083      	strh	r3, [r0, #4]
   d79c2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d79c6:	80c3      	strh	r3, [r0, #6]
   d79c8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d79cc:	8103      	strh	r3, [r0, #8]
   d79ce:	2305      	movs	r3, #5
   d79d0:	8143      	strh	r3, [r0, #10]
   d79d2:	230b      	movs	r3, #11
   d79d4:	8183      	strh	r3, [r0, #12]
   d79d6:	2201      	movs	r2, #1
   d79d8:	2300      	movs	r3, #0
   d79da:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d79de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d79e0:	2200      	movs	r2, #0
   d79e2:	611d      	str	r5, [r3, #16]
   d79e4:	615a      	str	r2, [r3, #20]
   d79e6:	bd38      	pop	{r3, r4, r5, pc}
   d79e8:	2003e180 	.word	0x2003e180

000d79ec <strcmp>:
   d79ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   d79f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d79f4:	2a01      	cmp	r2, #1
   d79f6:	bf28      	it	cs
   d79f8:	429a      	cmpcs	r2, r3
   d79fa:	d0f7      	beq.n	d79ec <strcmp>
   d79fc:	1ad0      	subs	r0, r2, r3
   d79fe:	4770      	bx	lr

000d7a00 <strcpy>:
   d7a00:	4603      	mov	r3, r0
   d7a02:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7a06:	f803 2b01 	strb.w	r2, [r3], #1
   d7a0a:	2a00      	cmp	r2, #0
   d7a0c:	d1f9      	bne.n	d7a02 <strcpy+0x2>
   d7a0e:	4770      	bx	lr

000d7a10 <strlen>:
   d7a10:	4603      	mov	r3, r0
   d7a12:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7a16:	2a00      	cmp	r2, #0
   d7a18:	d1fb      	bne.n	d7a12 <strlen+0x2>
   d7a1a:	1a18      	subs	r0, r3, r0
   d7a1c:	3801      	subs	r0, #1
   d7a1e:	4770      	bx	lr

000d7a20 <strncasecmp>:
   d7a20:	4b10      	ldr	r3, [pc, #64]	; (d7a64 <strncasecmp+0x44>)
   d7a22:	b570      	push	{r4, r5, r6, lr}
   d7a24:	681e      	ldr	r6, [r3, #0]
   d7a26:	440a      	add	r2, r1
   d7a28:	4291      	cmp	r1, r2
   d7a2a:	d017      	beq.n	d7a5c <strncasecmp+0x3c>
   d7a2c:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7a30:	18f4      	adds	r4, r6, r3
   d7a32:	7864      	ldrb	r4, [r4, #1]
   d7a34:	f004 0403 	and.w	r4, r4, #3
   d7a38:	2c01      	cmp	r4, #1
   d7a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7a3e:	eb06 0504 	add.w	r5, r6, r4
   d7a42:	bf08      	it	eq
   d7a44:	3320      	addeq	r3, #32
   d7a46:	786d      	ldrb	r5, [r5, #1]
   d7a48:	f005 0503 	and.w	r5, r5, #3
   d7a4c:	2d01      	cmp	r5, #1
   d7a4e:	bf08      	it	eq
   d7a50:	3420      	addeq	r4, #32
   d7a52:	1b1b      	subs	r3, r3, r4
   d7a54:	d103      	bne.n	d7a5e <strncasecmp+0x3e>
   d7a56:	2c00      	cmp	r4, #0
   d7a58:	d1e6      	bne.n	d7a28 <strncasecmp+0x8>
   d7a5a:	e000      	b.n	d7a5e <strncasecmp+0x3e>
   d7a5c:	2300      	movs	r3, #0
   d7a5e:	4618      	mov	r0, r3
   d7a60:	bd70      	pop	{r4, r5, r6, pc}
   d7a62:	bf00      	nop
   d7a64:	2003e11c 	.word	0x2003e11c

000d7a68 <strncmp>:
   d7a68:	b530      	push	{r4, r5, lr}
   d7a6a:	b182      	cbz	r2, d7a8e <strncmp+0x26>
   d7a6c:	1e45      	subs	r5, r0, #1
   d7a6e:	3901      	subs	r1, #1
   d7a70:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d7a74:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7a78:	42a3      	cmp	r3, r4
   d7a7a:	d106      	bne.n	d7a8a <strncmp+0x22>
   d7a7c:	43ec      	mvns	r4, r5
   d7a7e:	4414      	add	r4, r2
   d7a80:	42e0      	cmn	r0, r4
   d7a82:	d001      	beq.n	d7a88 <strncmp+0x20>
   d7a84:	2b00      	cmp	r3, #0
   d7a86:	d1f3      	bne.n	d7a70 <strncmp+0x8>
   d7a88:	461c      	mov	r4, r3
   d7a8a:	1b18      	subs	r0, r3, r4
   d7a8c:	bd30      	pop	{r4, r5, pc}
   d7a8e:	4610      	mov	r0, r2
   d7a90:	bd30      	pop	{r4, r5, pc}

000d7a92 <strncpy>:
   d7a92:	b510      	push	{r4, lr}
   d7a94:	4603      	mov	r3, r0
   d7a96:	b142      	cbz	r2, d7aaa <strncpy+0x18>
   d7a98:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7a9c:	f803 4b01 	strb.w	r4, [r3], #1
   d7aa0:	3a01      	subs	r2, #1
   d7aa2:	2c00      	cmp	r4, #0
   d7aa4:	d1f7      	bne.n	d7a96 <strncpy+0x4>
   d7aa6:	441a      	add	r2, r3
   d7aa8:	e000      	b.n	d7aac <strncpy+0x1a>
   d7aaa:	bd10      	pop	{r4, pc}
   d7aac:	4293      	cmp	r3, r2
   d7aae:	d002      	beq.n	d7ab6 <strncpy+0x24>
   d7ab0:	f803 4b01 	strb.w	r4, [r3], #1
   d7ab4:	e7fa      	b.n	d7aac <strncpy+0x1a>
   d7ab6:	bd10      	pop	{r4, pc}

000d7ab8 <_strtol_r>:
   d7ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7abc:	4680      	mov	r8, r0
   d7abe:	4840      	ldr	r0, [pc, #256]	; (d7bc0 <_strtol_r+0x108>)
   d7ac0:	f8d0 9000 	ldr.w	r9, [r0]
   d7ac4:	460f      	mov	r7, r1
   d7ac6:	463d      	mov	r5, r7
   d7ac8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7acc:	eb09 0004 	add.w	r0, r9, r4
   d7ad0:	7840      	ldrb	r0, [r0, #1]
   d7ad2:	f000 0008 	and.w	r0, r0, #8
   d7ad6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d7ada:	b108      	cbz	r0, d7ae0 <_strtol_r+0x28>
   d7adc:	462f      	mov	r7, r5
   d7ade:	e7f2      	b.n	d7ac6 <_strtol_r+0xe>
   d7ae0:	2c2d      	cmp	r4, #45	; 0x2d
   d7ae2:	d103      	bne.n	d7aec <_strtol_r+0x34>
   d7ae4:	1cbd      	adds	r5, r7, #2
   d7ae6:	787c      	ldrb	r4, [r7, #1]
   d7ae8:	2601      	movs	r6, #1
   d7aea:	e003      	b.n	d7af4 <_strtol_r+0x3c>
   d7aec:	2c2b      	cmp	r4, #43	; 0x2b
   d7aee:	bf04      	itt	eq
   d7af0:	787c      	ldrbeq	r4, [r7, #1]
   d7af2:	1cbd      	addeq	r5, r7, #2
   d7af4:	b113      	cbz	r3, d7afc <_strtol_r+0x44>
   d7af6:	2b10      	cmp	r3, #16
   d7af8:	d10a      	bne.n	d7b10 <_strtol_r+0x58>
   d7afa:	e05b      	b.n	d7bb4 <_strtol_r+0xfc>
   d7afc:	2c30      	cmp	r4, #48	; 0x30
   d7afe:	d157      	bne.n	d7bb0 <_strtol_r+0xf8>
   d7b00:	7828      	ldrb	r0, [r5, #0]
   d7b02:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7b06:	2858      	cmp	r0, #88	; 0x58
   d7b08:	d14d      	bne.n	d7ba6 <_strtol_r+0xee>
   d7b0a:	786c      	ldrb	r4, [r5, #1]
   d7b0c:	2310      	movs	r3, #16
   d7b0e:	3502      	adds	r5, #2
   d7b10:	2e00      	cmp	r6, #0
   d7b12:	bf14      	ite	ne
   d7b14:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d7b18:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d7b1c:	2700      	movs	r7, #0
   d7b1e:	fbbc faf3 	udiv	sl, ip, r3
   d7b22:	4638      	mov	r0, r7
   d7b24:	fb03 cc1a 	mls	ip, r3, sl, ip
   d7b28:	eb09 0e04 	add.w	lr, r9, r4
   d7b2c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7b30:	f01e 0f04 	tst.w	lr, #4
   d7b34:	d001      	beq.n	d7b3a <_strtol_r+0x82>
   d7b36:	3c30      	subs	r4, #48	; 0x30
   d7b38:	e00b      	b.n	d7b52 <_strtol_r+0x9a>
   d7b3a:	f01e 0e03 	ands.w	lr, lr, #3
   d7b3e:	d01b      	beq.n	d7b78 <_strtol_r+0xc0>
   d7b40:	f1be 0f01 	cmp.w	lr, #1
   d7b44:	bf0c      	ite	eq
   d7b46:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7b4a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7b4e:	ebce 0404 	rsb	r4, lr, r4
   d7b52:	42a3      	cmp	r3, r4
   d7b54:	dd10      	ble.n	d7b78 <_strtol_r+0xc0>
   d7b56:	f1b7 3fff 	cmp.w	r7, #4294967295
   d7b5a:	d00a      	beq.n	d7b72 <_strtol_r+0xba>
   d7b5c:	4550      	cmp	r0, sl
   d7b5e:	d806      	bhi.n	d7b6e <_strtol_r+0xb6>
   d7b60:	d101      	bne.n	d7b66 <_strtol_r+0xae>
   d7b62:	4564      	cmp	r4, ip
   d7b64:	dc03      	bgt.n	d7b6e <_strtol_r+0xb6>
   d7b66:	fb03 4000 	mla	r0, r3, r0, r4
   d7b6a:	2701      	movs	r7, #1
   d7b6c:	e001      	b.n	d7b72 <_strtol_r+0xba>
   d7b6e:	f04f 37ff 	mov.w	r7, #4294967295
   d7b72:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7b76:	e7d7      	b.n	d7b28 <_strtol_r+0x70>
   d7b78:	1c7b      	adds	r3, r7, #1
   d7b7a:	d10c      	bne.n	d7b96 <_strtol_r+0xde>
   d7b7c:	2e00      	cmp	r6, #0
   d7b7e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d7b82:	bf14      	ite	ne
   d7b84:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d7b88:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d7b8c:	f8c8 3000 	str.w	r3, [r8]
   d7b90:	b92a      	cbnz	r2, d7b9e <_strtol_r+0xe6>
   d7b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7b96:	b106      	cbz	r6, d7b9a <_strtol_r+0xe2>
   d7b98:	4240      	negs	r0, r0
   d7b9a:	b172      	cbz	r2, d7bba <_strtol_r+0x102>
   d7b9c:	b107      	cbz	r7, d7ba0 <_strtol_r+0xe8>
   d7b9e:	1e69      	subs	r1, r5, #1
   d7ba0:	6011      	str	r1, [r2, #0]
   d7ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ba6:	2430      	movs	r4, #48	; 0x30
   d7ba8:	2b00      	cmp	r3, #0
   d7baa:	d1b1      	bne.n	d7b10 <_strtol_r+0x58>
   d7bac:	2308      	movs	r3, #8
   d7bae:	e7af      	b.n	d7b10 <_strtol_r+0x58>
   d7bb0:	230a      	movs	r3, #10
   d7bb2:	e7ad      	b.n	d7b10 <_strtol_r+0x58>
   d7bb4:	2c30      	cmp	r4, #48	; 0x30
   d7bb6:	d0a3      	beq.n	d7b00 <_strtol_r+0x48>
   d7bb8:	e7aa      	b.n	d7b10 <_strtol_r+0x58>
   d7bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7bbe:	bf00      	nop
   d7bc0:	2003e11c 	.word	0x2003e11c

000d7bc4 <strtol>:
   d7bc4:	4613      	mov	r3, r2
   d7bc6:	460a      	mov	r2, r1
   d7bc8:	4601      	mov	r1, r0
   d7bca:	4802      	ldr	r0, [pc, #8]	; (d7bd4 <strtol+0x10>)
   d7bcc:	6800      	ldr	r0, [r0, #0]
   d7bce:	f7ff bf73 	b.w	d7ab8 <_strtol_r>
   d7bd2:	bf00      	nop
   d7bd4:	2003e180 	.word	0x2003e180

000d7bd8 <_strtoul_r>:
   d7bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7bdc:	4680      	mov	r8, r0
   d7bde:	483c      	ldr	r0, [pc, #240]	; (d7cd0 <_strtoul_r+0xf8>)
   d7be0:	f8d0 9000 	ldr.w	r9, [r0]
   d7be4:	460e      	mov	r6, r1
   d7be6:	4635      	mov	r5, r6
   d7be8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7bec:	eb09 0004 	add.w	r0, r9, r4
   d7bf0:	7840      	ldrb	r0, [r0, #1]
   d7bf2:	f000 0008 	and.w	r0, r0, #8
   d7bf6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d7bfa:	b108      	cbz	r0, d7c00 <_strtoul_r+0x28>
   d7bfc:	462e      	mov	r6, r5
   d7bfe:	e7f2      	b.n	d7be6 <_strtoul_r+0xe>
   d7c00:	2c2d      	cmp	r4, #45	; 0x2d
   d7c02:	d103      	bne.n	d7c0c <_strtoul_r+0x34>
   d7c04:	1cb5      	adds	r5, r6, #2
   d7c06:	7874      	ldrb	r4, [r6, #1]
   d7c08:	2701      	movs	r7, #1
   d7c0a:	e003      	b.n	d7c14 <_strtoul_r+0x3c>
   d7c0c:	2c2b      	cmp	r4, #43	; 0x2b
   d7c0e:	bf04      	itt	eq
   d7c10:	7874      	ldrbeq	r4, [r6, #1]
   d7c12:	1cb5      	addeq	r5, r6, #2
   d7c14:	b113      	cbz	r3, d7c1c <_strtoul_r+0x44>
   d7c16:	2b10      	cmp	r3, #16
   d7c18:	d10a      	bne.n	d7c30 <_strtoul_r+0x58>
   d7c1a:	e053      	b.n	d7cc4 <_strtoul_r+0xec>
   d7c1c:	2c30      	cmp	r4, #48	; 0x30
   d7c1e:	d14f      	bne.n	d7cc0 <_strtoul_r+0xe8>
   d7c20:	7828      	ldrb	r0, [r5, #0]
   d7c22:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d7c26:	2858      	cmp	r0, #88	; 0x58
   d7c28:	d145      	bne.n	d7cb6 <_strtoul_r+0xde>
   d7c2a:	786c      	ldrb	r4, [r5, #1]
   d7c2c:	2310      	movs	r3, #16
   d7c2e:	3502      	adds	r5, #2
   d7c30:	f04f 3cff 	mov.w	ip, #4294967295
   d7c34:	2600      	movs	r6, #0
   d7c36:	fbbc fcf3 	udiv	ip, ip, r3
   d7c3a:	fb03 fa0c 	mul.w	sl, r3, ip
   d7c3e:	ea6f 0a0a 	mvn.w	sl, sl
   d7c42:	4630      	mov	r0, r6
   d7c44:	eb09 0e04 	add.w	lr, r9, r4
   d7c48:	f89e e001 	ldrb.w	lr, [lr, #1]
   d7c4c:	f01e 0f04 	tst.w	lr, #4
   d7c50:	d001      	beq.n	d7c56 <_strtoul_r+0x7e>
   d7c52:	3c30      	subs	r4, #48	; 0x30
   d7c54:	e00b      	b.n	d7c6e <_strtoul_r+0x96>
   d7c56:	f01e 0e03 	ands.w	lr, lr, #3
   d7c5a:	d01a      	beq.n	d7c92 <_strtoul_r+0xba>
   d7c5c:	f1be 0f01 	cmp.w	lr, #1
   d7c60:	bf0c      	ite	eq
   d7c62:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d7c66:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d7c6a:	ebce 0404 	rsb	r4, lr, r4
   d7c6e:	42a3      	cmp	r3, r4
   d7c70:	dd0f      	ble.n	d7c92 <_strtoul_r+0xba>
   d7c72:	2e00      	cmp	r6, #0
   d7c74:	db08      	blt.n	d7c88 <_strtoul_r+0xb0>
   d7c76:	4560      	cmp	r0, ip
   d7c78:	d806      	bhi.n	d7c88 <_strtoul_r+0xb0>
   d7c7a:	d101      	bne.n	d7c80 <_strtoul_r+0xa8>
   d7c7c:	4554      	cmp	r4, sl
   d7c7e:	dc03      	bgt.n	d7c88 <_strtoul_r+0xb0>
   d7c80:	fb03 4000 	mla	r0, r3, r0, r4
   d7c84:	2601      	movs	r6, #1
   d7c86:	e001      	b.n	d7c8c <_strtoul_r+0xb4>
   d7c88:	f04f 36ff 	mov.w	r6, #4294967295
   d7c8c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d7c90:	e7d8      	b.n	d7c44 <_strtoul_r+0x6c>
   d7c92:	2e00      	cmp	r6, #0
   d7c94:	da07      	bge.n	d7ca6 <_strtoul_r+0xce>
   d7c96:	2322      	movs	r3, #34	; 0x22
   d7c98:	f8c8 3000 	str.w	r3, [r8]
   d7c9c:	f04f 30ff 	mov.w	r0, #4294967295
   d7ca0:	b92a      	cbnz	r2, d7cae <_strtoul_r+0xd6>
   d7ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ca6:	b107      	cbz	r7, d7caa <_strtoul_r+0xd2>
   d7ca8:	4240      	negs	r0, r0
   d7caa:	b172      	cbz	r2, d7cca <_strtoul_r+0xf2>
   d7cac:	b106      	cbz	r6, d7cb0 <_strtoul_r+0xd8>
   d7cae:	1e69      	subs	r1, r5, #1
   d7cb0:	6011      	str	r1, [r2, #0]
   d7cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7cb6:	2430      	movs	r4, #48	; 0x30
   d7cb8:	2b00      	cmp	r3, #0
   d7cba:	d1b9      	bne.n	d7c30 <_strtoul_r+0x58>
   d7cbc:	2308      	movs	r3, #8
   d7cbe:	e7b7      	b.n	d7c30 <_strtoul_r+0x58>
   d7cc0:	230a      	movs	r3, #10
   d7cc2:	e7b5      	b.n	d7c30 <_strtoul_r+0x58>
   d7cc4:	2c30      	cmp	r4, #48	; 0x30
   d7cc6:	d0ab      	beq.n	d7c20 <_strtoul_r+0x48>
   d7cc8:	e7b2      	b.n	d7c30 <_strtoul_r+0x58>
   d7cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7cce:	bf00      	nop
   d7cd0:	2003e11c 	.word	0x2003e11c

000d7cd4 <strtoul>:
   d7cd4:	4613      	mov	r3, r2
   d7cd6:	460a      	mov	r2, r1
   d7cd8:	4601      	mov	r1, r0
   d7cda:	4802      	ldr	r0, [pc, #8]	; (d7ce4 <strtoul+0x10>)
   d7cdc:	6800      	ldr	r0, [r0, #0]
   d7cde:	f7ff bf7b 	b.w	d7bd8 <_strtoul_r>
   d7ce2:	bf00      	nop
   d7ce4:	2003e180 	.word	0x2003e180

000d7ce8 <__tzcalc_limits>:
   d7ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cec:	4604      	mov	r4, r0
   d7cee:	f000 fa6f 	bl	d81d0 <__gettzinfo>
   d7cf2:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d7cf6:	429c      	cmp	r4, r3
   d7cf8:	f340 8096 	ble.w	d7e28 <__tzcalc_limits+0x140>
   d7cfc:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d7d00:	18e3      	adds	r3, r4, r3
   d7d02:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d7d06:	109b      	asrs	r3, r3, #2
   d7d08:	f240 156d 	movw	r5, #365	; 0x16d
   d7d0c:	fb05 3502 	mla	r5, r5, r2, r3
   d7d10:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d7d14:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d7d18:	fb92 f3f3 	sdiv	r3, r2, r3
   d7d1c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d7d20:	442b      	add	r3, r5
   d7d22:	18a5      	adds	r5, r4, r2
   d7d24:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7d28:	fb95 f5f2 	sdiv	r5, r5, r2
   d7d2c:	441d      	add	r5, r3
   d7d2e:	2364      	movs	r3, #100	; 0x64
   d7d30:	fb94 f7f2 	sdiv	r7, r4, r2
   d7d34:	fb94 f6f3 	sdiv	r6, r4, r3
   d7d38:	fb02 4717 	mls	r7, r2, r7, r4
   d7d3c:	fb03 4616 	mls	r6, r3, r6, r4
   d7d40:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d7d44:	fab7 fe87 	clz	lr, r7
   d7d48:	9301      	str	r3, [sp, #4]
   d7d4a:	f004 0303 	and.w	r3, r4, #3
   d7d4e:	6044      	str	r4, [r0, #4]
   d7d50:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d7d54:	4601      	mov	r1, r0
   d7d56:	9300      	str	r3, [sp, #0]
   d7d58:	f04f 0c07 	mov.w	ip, #7
   d7d5c:	7a0b      	ldrb	r3, [r1, #8]
   d7d5e:	2b4a      	cmp	r3, #74	; 0x4a
   d7d60:	d10e      	bne.n	d7d80 <__tzcalc_limits+0x98>
   d7d62:	694b      	ldr	r3, [r1, #20]
   d7d64:	9a00      	ldr	r2, [sp, #0]
   d7d66:	18ec      	adds	r4, r5, r3
   d7d68:	b902      	cbnz	r2, d7d6c <__tzcalc_limits+0x84>
   d7d6a:	b906      	cbnz	r6, d7d6e <__tzcalc_limits+0x86>
   d7d6c:	b927      	cbnz	r7, d7d78 <__tzcalc_limits+0x90>
   d7d6e:	2b3b      	cmp	r3, #59	; 0x3b
   d7d70:	bfd4      	ite	le
   d7d72:	2300      	movle	r3, #0
   d7d74:	2301      	movgt	r3, #1
   d7d76:	e000      	b.n	d7d7a <__tzcalc_limits+0x92>
   d7d78:	2300      	movs	r3, #0
   d7d7a:	4423      	add	r3, r4
   d7d7c:	3b01      	subs	r3, #1
   d7d7e:	e03f      	b.n	d7e00 <__tzcalc_limits+0x118>
   d7d80:	2b44      	cmp	r3, #68	; 0x44
   d7d82:	d102      	bne.n	d7d8a <__tzcalc_limits+0xa2>
   d7d84:	694b      	ldr	r3, [r1, #20]
   d7d86:	442b      	add	r3, r5
   d7d88:	e03a      	b.n	d7e00 <__tzcalc_limits+0x118>
   d7d8a:	9b00      	ldr	r3, [sp, #0]
   d7d8c:	b92b      	cbnz	r3, d7d9a <__tzcalc_limits+0xb2>
   d7d8e:	2e00      	cmp	r6, #0
   d7d90:	bf0c      	ite	eq
   d7d92:	46f0      	moveq	r8, lr
   d7d94:	f04f 0801 	movne.w	r8, #1
   d7d98:	e000      	b.n	d7d9c <__tzcalc_limits+0xb4>
   d7d9a:	46f0      	mov	r8, lr
   d7d9c:	4b24      	ldr	r3, [pc, #144]	; (d7e30 <__tzcalc_limits+0x148>)
   d7d9e:	68cc      	ldr	r4, [r1, #12]
   d7da0:	2230      	movs	r2, #48	; 0x30
   d7da2:	fb02 3808 	mla	r8, r2, r8, r3
   d7da6:	f1a8 0a04 	sub.w	sl, r8, #4
   d7daa:	46a9      	mov	r9, r5
   d7dac:	2301      	movs	r3, #1
   d7dae:	42a3      	cmp	r3, r4
   d7db0:	da04      	bge.n	d7dbc <__tzcalc_limits+0xd4>
   d7db2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d7db6:	3301      	adds	r3, #1
   d7db8:	44d9      	add	r9, fp
   d7dba:	e7f8      	b.n	d7dae <__tzcalc_limits+0xc6>
   d7dbc:	f109 0304 	add.w	r3, r9, #4
   d7dc0:	fb93 fbfc 	sdiv	fp, r3, ip
   d7dc4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d7dc8:	2c01      	cmp	r4, #1
   d7dca:	ebca 0a03 	rsb	sl, sl, r3
   d7dce:	694b      	ldr	r3, [r1, #20]
   d7dd0:	bfb8      	it	lt
   d7dd2:	2401      	movlt	r4, #1
   d7dd4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d7dd8:	ebb3 0a0a 	subs.w	sl, r3, sl
   d7ddc:	690b      	ldr	r3, [r1, #16]
   d7dde:	f104 34ff 	add.w	r4, r4, #4294967295
   d7de2:	f103 33ff 	add.w	r3, r3, #4294967295
   d7de6:	bf48      	it	mi
   d7de8:	f10a 0a07 	addmi.w	sl, sl, #7
   d7dec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7df0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d7df4:	4453      	add	r3, sl
   d7df6:	42a3      	cmp	r3, r4
   d7df8:	db01      	blt.n	d7dfe <__tzcalc_limits+0x116>
   d7dfa:	3b07      	subs	r3, #7
   d7dfc:	e7fb      	b.n	d7df6 <__tzcalc_limits+0x10e>
   d7dfe:	444b      	add	r3, r9
   d7e00:	698c      	ldr	r4, [r1, #24]
   d7e02:	4a0c      	ldr	r2, [pc, #48]	; (d7e34 <__tzcalc_limits+0x14c>)
   d7e04:	fb02 4303 	mla	r3, r2, r3, r4
   d7e08:	6a0c      	ldr	r4, [r1, #32]
   d7e0a:	4423      	add	r3, r4
   d7e0c:	f841 3f1c 	str.w	r3, [r1, #28]!
   d7e10:	9b01      	ldr	r3, [sp, #4]
   d7e12:	4299      	cmp	r1, r3
   d7e14:	d1a2      	bne.n	d7d5c <__tzcalc_limits+0x74>
   d7e16:	69c3      	ldr	r3, [r0, #28]
   d7e18:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d7e1a:	4293      	cmp	r3, r2
   d7e1c:	bfac      	ite	ge
   d7e1e:	2300      	movge	r3, #0
   d7e20:	2301      	movlt	r3, #1
   d7e22:	6003      	str	r3, [r0, #0]
   d7e24:	2001      	movs	r0, #1
   d7e26:	e000      	b.n	d7e2a <__tzcalc_limits+0x142>
   d7e28:	2000      	movs	r0, #0
   d7e2a:	b003      	add	sp, #12
   d7e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e30:	000d9050 	.word	0x000d9050
   d7e34:	00015180 	.word	0x00015180

000d7e38 <__tz_lock>:
   d7e38:	4770      	bx	lr

000d7e3a <__tz_unlock>:
   d7e3a:	4770      	bx	lr

000d7e3c <_tzset_unlocked>:
   d7e3c:	4b01      	ldr	r3, [pc, #4]	; (d7e44 <_tzset_unlocked+0x8>)
   d7e3e:	6818      	ldr	r0, [r3, #0]
   d7e40:	f000 b802 	b.w	d7e48 <_tzset_unlocked_r>
   d7e44:	2003e180 	.word	0x2003e180

000d7e48 <_tzset_unlocked_r>:
   d7e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7e4c:	b08d      	sub	sp, #52	; 0x34
   d7e4e:	4607      	mov	r7, r0
   d7e50:	f000 f9be 	bl	d81d0 <__gettzinfo>
   d7e54:	49b0      	ldr	r1, [pc, #704]	; (d8118 <_tzset_unlocked_r+0x2d0>)
   d7e56:	4eb1      	ldr	r6, [pc, #708]	; (d811c <_tzset_unlocked_r+0x2d4>)
   d7e58:	4604      	mov	r4, r0
   d7e5a:	4638      	mov	r0, r7
   d7e5c:	f000 f9b0 	bl	d81c0 <_getenv_r>
   d7e60:	4605      	mov	r5, r0
   d7e62:	b960      	cbnz	r0, d7e7e <_tzset_unlocked_r+0x36>
   d7e64:	4bae      	ldr	r3, [pc, #696]	; (d8120 <_tzset_unlocked_r+0x2d8>)
   d7e66:	4aaf      	ldr	r2, [pc, #700]	; (d8124 <_tzset_unlocked_r+0x2dc>)
   d7e68:	6018      	str	r0, [r3, #0]
   d7e6a:	4baf      	ldr	r3, [pc, #700]	; (d8128 <_tzset_unlocked_r+0x2e0>)
   d7e6c:	6018      	str	r0, [r3, #0]
   d7e6e:	4baf      	ldr	r3, [pc, #700]	; (d812c <_tzset_unlocked_r+0x2e4>)
   d7e70:	6830      	ldr	r0, [r6, #0]
   d7e72:	601a      	str	r2, [r3, #0]
   d7e74:	605a      	str	r2, [r3, #4]
   d7e76:	f7fd fec7 	bl	d5c08 <free>
   d7e7a:	6035      	str	r5, [r6, #0]
   d7e7c:	e148      	b.n	d8110 <_tzset_unlocked_r+0x2c8>
   d7e7e:	6831      	ldr	r1, [r6, #0]
   d7e80:	b979      	cbnz	r1, d7ea2 <_tzset_unlocked_r+0x5a>
   d7e82:	6830      	ldr	r0, [r6, #0]
   d7e84:	f7fd fec0 	bl	d5c08 <free>
   d7e88:	4628      	mov	r0, r5
   d7e8a:	f7ff fdc1 	bl	d7a10 <strlen>
   d7e8e:	1c41      	adds	r1, r0, #1
   d7e90:	4638      	mov	r0, r7
   d7e92:	f7fd fee1 	bl	d5c58 <_malloc_r>
   d7e96:	6030      	str	r0, [r6, #0]
   d7e98:	b148      	cbz	r0, d7eae <_tzset_unlocked_r+0x66>
   d7e9a:	4629      	mov	r1, r5
   d7e9c:	f7ff fdb0 	bl	d7a00 <strcpy>
   d7ea0:	e005      	b.n	d7eae <_tzset_unlocked_r+0x66>
   d7ea2:	f7ff fda3 	bl	d79ec <strcmp>
   d7ea6:	2800      	cmp	r0, #0
   d7ea8:	f000 8132 	beq.w	d8110 <_tzset_unlocked_r+0x2c8>
   d7eac:	e7e9      	b.n	d7e82 <_tzset_unlocked_r+0x3a>
   d7eae:	782b      	ldrb	r3, [r5, #0]
   d7eb0:	4a9f      	ldr	r2, [pc, #636]	; (d8130 <_tzset_unlocked_r+0x2e8>)
   d7eb2:	49a0      	ldr	r1, [pc, #640]	; (d8134 <_tzset_unlocked_r+0x2ec>)
   d7eb4:	2b3a      	cmp	r3, #58	; 0x3a
   d7eb6:	bf08      	it	eq
   d7eb8:	3501      	addeq	r5, #1
   d7eba:	ae0a      	add	r6, sp, #40	; 0x28
   d7ebc:	4633      	mov	r3, r6
   d7ebe:	4628      	mov	r0, r5
   d7ec0:	f7fd feba 	bl	d5c38 <siscanf>
   d7ec4:	2800      	cmp	r0, #0
   d7ec6:	f340 8123 	ble.w	d8110 <_tzset_unlocked_r+0x2c8>
   d7eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ecc:	18ef      	adds	r7, r5, r3
   d7ece:	5ceb      	ldrb	r3, [r5, r3]
   d7ed0:	2b2d      	cmp	r3, #45	; 0x2d
   d7ed2:	d103      	bne.n	d7edc <_tzset_unlocked_r+0x94>
   d7ed4:	3701      	adds	r7, #1
   d7ed6:	f04f 35ff 	mov.w	r5, #4294967295
   d7eda:	e003      	b.n	d7ee4 <_tzset_unlocked_r+0x9c>
   d7edc:	2b2b      	cmp	r3, #43	; 0x2b
   d7ede:	bf08      	it	eq
   d7ee0:	3701      	addeq	r7, #1
   d7ee2:	2501      	movs	r5, #1
   d7ee4:	f10d 0a20 	add.w	sl, sp, #32
   d7ee8:	f10d 0b1e 	add.w	fp, sp, #30
   d7eec:	f04f 0800 	mov.w	r8, #0
   d7ef0:	9603      	str	r6, [sp, #12]
   d7ef2:	f8cd a008 	str.w	sl, [sp, #8]
   d7ef6:	9601      	str	r6, [sp, #4]
   d7ef8:	f8cd b000 	str.w	fp, [sp]
   d7efc:	4633      	mov	r3, r6
   d7efe:	aa07      	add	r2, sp, #28
   d7f00:	498d      	ldr	r1, [pc, #564]	; (d8138 <_tzset_unlocked_r+0x2f0>)
   d7f02:	f8ad 801e 	strh.w	r8, [sp, #30]
   d7f06:	4638      	mov	r0, r7
   d7f08:	f8ad 8020 	strh.w	r8, [sp, #32]
   d7f0c:	f7fd fe94 	bl	d5c38 <siscanf>
   d7f10:	4540      	cmp	r0, r8
   d7f12:	f340 80fd 	ble.w	d8110 <_tzset_unlocked_r+0x2c8>
   d7f16:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7f1a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7f1e:	f8df 9224 	ldr.w	r9, [pc, #548]	; d8144 <_tzset_unlocked_r+0x2fc>
   d7f22:	213c      	movs	r1, #60	; 0x3c
   d7f24:	fb01 3302 	mla	r3, r1, r2, r3
   d7f28:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7f2c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7f30:	fb01 3302 	mla	r3, r1, r2, r3
   d7f34:	435d      	muls	r5, r3
   d7f36:	6225      	str	r5, [r4, #32]
   d7f38:	4d7c      	ldr	r5, [pc, #496]	; (d812c <_tzset_unlocked_r+0x2e4>)
   d7f3a:	4b7d      	ldr	r3, [pc, #500]	; (d8130 <_tzset_unlocked_r+0x2e8>)
   d7f3c:	602b      	str	r3, [r5, #0]
   d7f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f40:	497c      	ldr	r1, [pc, #496]	; (d8134 <_tzset_unlocked_r+0x2ec>)
   d7f42:	441f      	add	r7, r3
   d7f44:	464a      	mov	r2, r9
   d7f46:	4633      	mov	r3, r6
   d7f48:	4638      	mov	r0, r7
   d7f4a:	f7fd fe75 	bl	d5c38 <siscanf>
   d7f4e:	4540      	cmp	r0, r8
   d7f50:	dc08      	bgt.n	d7f64 <_tzset_unlocked_r+0x11c>
   d7f52:	682b      	ldr	r3, [r5, #0]
   d7f54:	606b      	str	r3, [r5, #4]
   d7f56:	4b72      	ldr	r3, [pc, #456]	; (d8120 <_tzset_unlocked_r+0x2d8>)
   d7f58:	6a22      	ldr	r2, [r4, #32]
   d7f5a:	601a      	str	r2, [r3, #0]
   d7f5c:	4b72      	ldr	r3, [pc, #456]	; (d8128 <_tzset_unlocked_r+0x2e0>)
   d7f5e:	f8c3 8000 	str.w	r8, [r3]
   d7f62:	e0d5      	b.n	d8110 <_tzset_unlocked_r+0x2c8>
   d7f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f66:	f8c5 9004 	str.w	r9, [r5, #4]
   d7f6a:	18fd      	adds	r5, r7, r3
   d7f6c:	5cfb      	ldrb	r3, [r7, r3]
   d7f6e:	2b2d      	cmp	r3, #45	; 0x2d
   d7f70:	d103      	bne.n	d7f7a <_tzset_unlocked_r+0x132>
   d7f72:	3501      	adds	r5, #1
   d7f74:	f04f 37ff 	mov.w	r7, #4294967295
   d7f78:	e003      	b.n	d7f82 <_tzset_unlocked_r+0x13a>
   d7f7a:	2b2b      	cmp	r3, #43	; 0x2b
   d7f7c:	bf08      	it	eq
   d7f7e:	3501      	addeq	r5, #1
   d7f80:	2701      	movs	r7, #1
   d7f82:	2300      	movs	r3, #0
   d7f84:	f8ad 301c 	strh.w	r3, [sp, #28]
   d7f88:	f8ad 301e 	strh.w	r3, [sp, #30]
   d7f8c:	f8ad 3020 	strh.w	r3, [sp, #32]
   d7f90:	930a      	str	r3, [sp, #40]	; 0x28
   d7f92:	9603      	str	r6, [sp, #12]
   d7f94:	f8cd a008 	str.w	sl, [sp, #8]
   d7f98:	9601      	str	r6, [sp, #4]
   d7f9a:	f8cd b000 	str.w	fp, [sp]
   d7f9e:	4633      	mov	r3, r6
   d7fa0:	aa07      	add	r2, sp, #28
   d7fa2:	4965      	ldr	r1, [pc, #404]	; (d8138 <_tzset_unlocked_r+0x2f0>)
   d7fa4:	4628      	mov	r0, r5
   d7fa6:	f7fd fe47 	bl	d5c38 <siscanf>
   d7faa:	2800      	cmp	r0, #0
   d7fac:	dc04      	bgt.n	d7fb8 <_tzset_unlocked_r+0x170>
   d7fae:	6a23      	ldr	r3, [r4, #32]
   d7fb0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d7fb4:	63e3      	str	r3, [r4, #60]	; 0x3c
   d7fb6:	e00e      	b.n	d7fd6 <_tzset_unlocked_r+0x18e>
   d7fb8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d7fbc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d7fc0:	213c      	movs	r1, #60	; 0x3c
   d7fc2:	fb01 3302 	mla	r3, r1, r2, r3
   d7fc6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d7fca:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d7fce:	fb01 3302 	mla	r3, r1, r2, r3
   d7fd2:	435f      	muls	r7, r3
   d7fd4:	63e7      	str	r7, [r4, #60]	; 0x3c
   d7fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7fd8:	4627      	mov	r7, r4
   d7fda:	441d      	add	r5, r3
   d7fdc:	f04f 0900 	mov.w	r9, #0
   d7fe0:	782b      	ldrb	r3, [r5, #0]
   d7fe2:	2b2c      	cmp	r3, #44	; 0x2c
   d7fe4:	bf08      	it	eq
   d7fe6:	3501      	addeq	r5, #1
   d7fe8:	f895 8000 	ldrb.w	r8, [r5]
   d7fec:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d7ff0:	d126      	bne.n	d8040 <_tzset_unlocked_r+0x1f8>
   d7ff2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d7ff6:	9302      	str	r3, [sp, #8]
   d7ff8:	ab09      	add	r3, sp, #36	; 0x24
   d7ffa:	9300      	str	r3, [sp, #0]
   d7ffc:	9603      	str	r6, [sp, #12]
   d7ffe:	9601      	str	r6, [sp, #4]
   d8000:	4633      	mov	r3, r6
   d8002:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d8006:	494d      	ldr	r1, [pc, #308]	; (d813c <_tzset_unlocked_r+0x2f4>)
   d8008:	4628      	mov	r0, r5
   d800a:	f7fd fe15 	bl	d5c38 <siscanf>
   d800e:	2803      	cmp	r0, #3
   d8010:	d17e      	bne.n	d8110 <_tzset_unlocked_r+0x2c8>
   d8012:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d8016:	1e4b      	subs	r3, r1, #1
   d8018:	2b0b      	cmp	r3, #11
   d801a:	d879      	bhi.n	d8110 <_tzset_unlocked_r+0x2c8>
   d801c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d8020:	1e53      	subs	r3, r2, #1
   d8022:	2b04      	cmp	r3, #4
   d8024:	d874      	bhi.n	d8110 <_tzset_unlocked_r+0x2c8>
   d8026:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d802a:	2b06      	cmp	r3, #6
   d802c:	d870      	bhi.n	d8110 <_tzset_unlocked_r+0x2c8>
   d802e:	f887 8008 	strb.w	r8, [r7, #8]
   d8032:	60f9      	str	r1, [r7, #12]
   d8034:	613a      	str	r2, [r7, #16]
   d8036:	617b      	str	r3, [r7, #20]
   d8038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d803a:	eb05 0803 	add.w	r8, r5, r3
   d803e:	e02a      	b.n	d8096 <_tzset_unlocked_r+0x24e>
   d8040:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d8044:	bf06      	itte	eq
   d8046:	3501      	addeq	r5, #1
   d8048:	4643      	moveq	r3, r8
   d804a:	2344      	movne	r3, #68	; 0x44
   d804c:	220a      	movs	r2, #10
   d804e:	a90b      	add	r1, sp, #44	; 0x2c
   d8050:	4628      	mov	r0, r5
   d8052:	9305      	str	r3, [sp, #20]
   d8054:	f7ff fe3e 	bl	d7cd4 <strtoul>
   d8058:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d805c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d8060:	4545      	cmp	r5, r8
   d8062:	9b05      	ldr	r3, [sp, #20]
   d8064:	d114      	bne.n	d8090 <_tzset_unlocked_r+0x248>
   d8066:	234d      	movs	r3, #77	; 0x4d
   d8068:	f1b9 0f00 	cmp.w	r9, #0
   d806c:	d107      	bne.n	d807e <_tzset_unlocked_r+0x236>
   d806e:	7223      	strb	r3, [r4, #8]
   d8070:	2303      	movs	r3, #3
   d8072:	60e3      	str	r3, [r4, #12]
   d8074:	2302      	movs	r3, #2
   d8076:	6123      	str	r3, [r4, #16]
   d8078:	f8c4 9014 	str.w	r9, [r4, #20]
   d807c:	e00b      	b.n	d8096 <_tzset_unlocked_r+0x24e>
   d807e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d8082:	230b      	movs	r3, #11
   d8084:	62a3      	str	r3, [r4, #40]	; 0x28
   d8086:	2301      	movs	r3, #1
   d8088:	62e3      	str	r3, [r4, #44]	; 0x2c
   d808a:	2300      	movs	r3, #0
   d808c:	6323      	str	r3, [r4, #48]	; 0x30
   d808e:	e002      	b.n	d8096 <_tzset_unlocked_r+0x24e>
   d8090:	b280      	uxth	r0, r0
   d8092:	723b      	strb	r3, [r7, #8]
   d8094:	6178      	str	r0, [r7, #20]
   d8096:	2302      	movs	r3, #2
   d8098:	f8ad 301c 	strh.w	r3, [sp, #28]
   d809c:	2300      	movs	r3, #0
   d809e:	f8ad 301e 	strh.w	r3, [sp, #30]
   d80a2:	f8ad 3020 	strh.w	r3, [sp, #32]
   d80a6:	930a      	str	r3, [sp, #40]	; 0x28
   d80a8:	f898 3000 	ldrb.w	r3, [r8]
   d80ac:	2b2f      	cmp	r3, #47	; 0x2f
   d80ae:	d10b      	bne.n	d80c8 <_tzset_unlocked_r+0x280>
   d80b0:	9603      	str	r6, [sp, #12]
   d80b2:	f8cd a008 	str.w	sl, [sp, #8]
   d80b6:	9601      	str	r6, [sp, #4]
   d80b8:	f8cd b000 	str.w	fp, [sp]
   d80bc:	4633      	mov	r3, r6
   d80be:	aa07      	add	r2, sp, #28
   d80c0:	491f      	ldr	r1, [pc, #124]	; (d8140 <_tzset_unlocked_r+0x2f8>)
   d80c2:	4640      	mov	r0, r8
   d80c4:	f7fd fdb8 	bl	d5c38 <siscanf>
   d80c8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d80cc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d80d0:	213c      	movs	r1, #60	; 0x3c
   d80d2:	fb01 3302 	mla	r3, r1, r2, r3
   d80d6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d80da:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d80de:	fb01 3302 	mla	r3, r1, r2, r3
   d80e2:	61bb      	str	r3, [r7, #24]
   d80e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d80e6:	f109 0901 	add.w	r9, r9, #1
   d80ea:	f1b9 0f02 	cmp.w	r9, #2
   d80ee:	4445      	add	r5, r8
   d80f0:	f107 071c 	add.w	r7, r7, #28
   d80f4:	f47f af74 	bne.w	d7fe0 <_tzset_unlocked_r+0x198>
   d80f8:	6860      	ldr	r0, [r4, #4]
   d80fa:	f7ff fdf5 	bl	d7ce8 <__tzcalc_limits>
   d80fe:	4b08      	ldr	r3, [pc, #32]	; (d8120 <_tzset_unlocked_r+0x2d8>)
   d8100:	6a22      	ldr	r2, [r4, #32]
   d8102:	601a      	str	r2, [r3, #0]
   d8104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8106:	1a9b      	subs	r3, r3, r2
   d8108:	4a07      	ldr	r2, [pc, #28]	; (d8128 <_tzset_unlocked_r+0x2e0>)
   d810a:	bf18      	it	ne
   d810c:	2301      	movne	r3, #1
   d810e:	6013      	str	r3, [r2, #0]
   d8110:	b00d      	add	sp, #52	; 0x34
   d8112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8116:	bf00      	nop
   d8118:	000d90b0 	.word	0x000d90b0
   d811c:	2003e7e0 	.word	0x2003e7e0
   d8120:	2003e7e8 	.word	0x2003e7e8
   d8124:	000d90b3 	.word	0x000d90b3
   d8128:	2003e7e4 	.word	0x2003e7e4
   d812c:	2003e184 	.word	0x2003e184
   d8130:	2003e7d3 	.word	0x2003e7d3
   d8134:	000d90b7 	.word	0x000d90b7
   d8138:	000d90da 	.word	0x000d90da
   d813c:	000d90c6 	.word	0x000d90c6
   d8140:	000d90d9 	.word	0x000d90d9
   d8144:	2003e7c8 	.word	0x2003e7c8

000d8148 <_findenv_r>:
   d8148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d814c:	4607      	mov	r7, r0
   d814e:	468b      	mov	fp, r1
   d8150:	4690      	mov	r8, r2
   d8152:	f000 f8d9 	bl	d8308 <__env_lock>
   d8156:	4b19      	ldr	r3, [pc, #100]	; (d81bc <_findenv_r+0x74>)
   d8158:	681d      	ldr	r5, [r3, #0]
   d815a:	469a      	mov	sl, r3
   d815c:	b13d      	cbz	r5, d816e <_findenv_r+0x26>
   d815e:	465c      	mov	r4, fp
   d8160:	4623      	mov	r3, r4
   d8162:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8166:	b142      	cbz	r2, d817a <_findenv_r+0x32>
   d8168:	2a3d      	cmp	r2, #61	; 0x3d
   d816a:	461c      	mov	r4, r3
   d816c:	d1f8      	bne.n	d8160 <_findenv_r+0x18>
   d816e:	4638      	mov	r0, r7
   d8170:	f000 f8cb 	bl	d830a <__env_unlock>
   d8174:	2000      	movs	r0, #0
   d8176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d817a:	ebcb 0404 	rsb	r4, fp, r4
   d817e:	46a9      	mov	r9, r5
   d8180:	f859 0b04 	ldr.w	r0, [r9], #4
   d8184:	2800      	cmp	r0, #0
   d8186:	d0f2      	beq.n	d816e <_findenv_r+0x26>
   d8188:	4622      	mov	r2, r4
   d818a:	4659      	mov	r1, fp
   d818c:	f7ff fc6c 	bl	d7a68 <strncmp>
   d8190:	b988      	cbnz	r0, d81b6 <_findenv_r+0x6e>
   d8192:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d8196:	191e      	adds	r6, r3, r4
   d8198:	5d1b      	ldrb	r3, [r3, r4]
   d819a:	2b3d      	cmp	r3, #61	; 0x3d
   d819c:	d10b      	bne.n	d81b6 <_findenv_r+0x6e>
   d819e:	f8da 3000 	ldr.w	r3, [sl]
   d81a2:	1aed      	subs	r5, r5, r3
   d81a4:	10ad      	asrs	r5, r5, #2
   d81a6:	4638      	mov	r0, r7
   d81a8:	f8c8 5000 	str.w	r5, [r8]
   d81ac:	f000 f8ad 	bl	d830a <__env_unlock>
   d81b0:	1c70      	adds	r0, r6, #1
   d81b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81b6:	464d      	mov	r5, r9
   d81b8:	e7e1      	b.n	d817e <_findenv_r+0x36>
   d81ba:	bf00      	nop
   d81bc:	2003e1cc 	.word	0x2003e1cc

000d81c0 <_getenv_r>:
   d81c0:	b507      	push	{r0, r1, r2, lr}
   d81c2:	aa01      	add	r2, sp, #4
   d81c4:	f7ff ffc0 	bl	d8148 <_findenv_r>
   d81c8:	b003      	add	sp, #12
   d81ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d81d0 <__gettzinfo>:
   d81d0:	4800      	ldr	r0, [pc, #0]	; (d81d4 <__gettzinfo+0x4>)
   d81d2:	4770      	bx	lr
   d81d4:	2003e18c 	.word	0x2003e18c

000d81d8 <gmtime_r>:
   d81d8:	6802      	ldr	r2, [r0, #0]
   d81da:	4b47      	ldr	r3, [pc, #284]	; (d82f8 <gmtime_r+0x120>)
   d81dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d81de:	fb92 f4f3 	sdiv	r4, r2, r3
   d81e2:	fb03 2214 	mls	r2, r3, r4, r2
   d81e6:	2a00      	cmp	r2, #0
   d81e8:	bfbc      	itt	lt
   d81ea:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d81ee:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d81f2:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d81f6:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d81fa:	fb92 f3f0 	sdiv	r3, r2, r0
   d81fe:	fb00 2213 	mls	r2, r0, r3, r2
   d8202:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d8206:	bfac      	ite	ge
   d8208:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d820c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d8210:	608b      	str	r3, [r1, #8]
   d8212:	fb92 f3f0 	sdiv	r3, r2, r0
   d8216:	fb00 2213 	mls	r2, r0, r3, r2
   d821a:	604b      	str	r3, [r1, #4]
   d821c:	600a      	str	r2, [r1, #0]
   d821e:	2307      	movs	r3, #7
   d8220:	1ce2      	adds	r2, r4, #3
   d8222:	fb92 f3f3 	sdiv	r3, r2, r3
   d8226:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d822a:	1ad3      	subs	r3, r2, r3
   d822c:	618b      	str	r3, [r1, #24]
   d822e:	4b33      	ldr	r3, [pc, #204]	; (d82fc <gmtime_r+0x124>)
   d8230:	4d33      	ldr	r5, [pc, #204]	; (d8300 <gmtime_r+0x128>)
   d8232:	fb94 f5f5 	sdiv	r5, r4, r5
   d8236:	fb03 4405 	mla	r4, r3, r5, r4
   d823a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d823e:	fbb4 f2f2 	udiv	r2, r4, r2
   d8242:	4422      	add	r2, r4
   d8244:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d8248:	fbb4 f3f7 	udiv	r3, r4, r7
   d824c:	1ad2      	subs	r2, r2, r3
   d824e:	482d      	ldr	r0, [pc, #180]	; (d8304 <gmtime_r+0x12c>)
   d8250:	fbb4 f0f0 	udiv	r0, r4, r0
   d8254:	f648 6694 	movw	r6, #36500	; 0x8e94
   d8258:	1a13      	subs	r3, r2, r0
   d825a:	fbb3 f6f6 	udiv	r6, r3, r6
   d825e:	4434      	add	r4, r6
   d8260:	f240 126d 	movw	r2, #365	; 0x16d
   d8264:	fbb3 f0f2 	udiv	r0, r3, r2
   d8268:	fbb3 f3f7 	udiv	r3, r3, r7
   d826c:	1ae3      	subs	r3, r4, r3
   d826e:	fb02 3310 	mls	r3, r2, r0, r3
   d8272:	2499      	movs	r4, #153	; 0x99
   d8274:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d8278:	3202      	adds	r2, #2
   d827a:	fbb2 f2f4 	udiv	r2, r2, r4
   d827e:	2a0a      	cmp	r2, #10
   d8280:	fb04 f402 	mul.w	r4, r4, r2
   d8284:	f104 0602 	add.w	r6, r4, #2
   d8288:	f04f 0405 	mov.w	r4, #5
   d828c:	fbb6 f4f4 	udiv	r4, r6, r4
   d8290:	bf34      	ite	cc
   d8292:	2602      	movcc	r6, #2
   d8294:	f06f 0609 	mvncs.w	r6, #9
   d8298:	4416      	add	r6, r2
   d829a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d829e:	fb02 0505 	mla	r5, r2, r5, r0
   d82a2:	1c5f      	adds	r7, r3, #1
   d82a4:	2e01      	cmp	r6, #1
   d82a6:	bf98      	it	ls
   d82a8:	3501      	addls	r5, #1
   d82aa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d82ae:	eba7 0704 	sub.w	r7, r7, r4
   d82b2:	d302      	bcc.n	d82ba <gmtime_r+0xe2>
   d82b4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d82b8:	e014      	b.n	d82e4 <gmtime_r+0x10c>
   d82ba:	0782      	lsls	r2, r0, #30
   d82bc:	d105      	bne.n	d82ca <gmtime_r+0xf2>
   d82be:	2464      	movs	r4, #100	; 0x64
   d82c0:	fbb0 f2f4 	udiv	r2, r0, r4
   d82c4:	fb04 0212 	mls	r2, r4, r2, r0
   d82c8:	b94a      	cbnz	r2, d82de <gmtime_r+0x106>
   d82ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d82ce:	fbb0 f4f2 	udiv	r4, r0, r2
   d82d2:	fb02 0014 	mls	r0, r2, r4, r0
   d82d6:	fab0 f280 	clz	r2, r0
   d82da:	0952      	lsrs	r2, r2, #5
   d82dc:	e000      	b.n	d82e0 <gmtime_r+0x108>
   d82de:	2201      	movs	r2, #1
   d82e0:	333b      	adds	r3, #59	; 0x3b
   d82e2:	441a      	add	r2, r3
   d82e4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d82e8:	2300      	movs	r3, #0
   d82ea:	61ca      	str	r2, [r1, #28]
   d82ec:	614d      	str	r5, [r1, #20]
   d82ee:	610e      	str	r6, [r1, #16]
   d82f0:	60cf      	str	r7, [r1, #12]
   d82f2:	620b      	str	r3, [r1, #32]
   d82f4:	4608      	mov	r0, r1
   d82f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d82f8:	00015180 	.word	0x00015180
   d82fc:	fffdc54f 	.word	0xfffdc54f
   d8300:	00023ab1 	.word	0x00023ab1
   d8304:	00023ab0 	.word	0x00023ab0

000d8308 <__env_lock>:
   d8308:	4770      	bx	lr

000d830a <__env_unlock>:
   d830a:	4770      	bx	lr

000d830c <dynalib_user>:
   d830c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d831c:	0000 0000 6f6d 7369 7574 6572 4300 7275     ....moisture.Cur
   d832c:	6572 746e 7420 6d69 2065 7369 2520 0073     rent time is %s.
   d833c:	6f4d 7369 7574 6572 3d20 4000 0020 7542     Moisture =.@ .Bu
   d834c:	7474 6e6f 5320 6174 6574 6920 2073 6925     tton State is %i
   d835c:	6a00 6176 646c 7a65 3531 0035 6f69 612e     .jvaldez155.io.a
   d836c:	6164 7266 6975 2e74 6f63 006d 6961 5f6f     dafruit.com.aio_
   d837c:	596c 4b6c 3034 6565 4a43 3743 4868 6339     lYlK40eeCJC7hH9c
   d838c:	3065 6534 4238 6b72 3479 4464 6a00 6176     e04e8Brky4dD.jva
   d839c:	646c 7a65 3531 2f35 6566 6465 2f73 4d3c     ldez155/feeds/<M
   d83ac:	696f 7473 7275 0065 766a 6c61 6564 317a     oisture.jvaldez1
   d83bc:	3535 662f 6565 7364 3c2f 6554 706d 7265     55/feeds/<Temper
   d83cc:	7574 6572 6a00 6176 646c 7a65 3531 2f35     ture.jvaldez155/
   d83dc:	6566 6465 2f73 454c 5f44 6e4f 0000 0000     feeds/LED_On....

000d83ec <_ZTV16Adafruit_SSD1306>:
	...
   d83f4:	40c9 000d 43d5 000d 4f01 000d 6169 000d     .@...C...O..ia..
   d8404:	47fd 000d 4c01 000d 4685 000d 4511 000d     .G...L...F...E..
   d8414:	4cc1 000d 4d57 000d 4d8f 000d 4dab 000d     .L..WM...M...M..

000d8424 <_ZTV12Adafruit_GFX>:
	...
   d8434:	4f01 000d 6169 000d 40a5 000d 4c01 000d     .O..ia...@...L..
   d8444:	4d21 000d 4d3d 000d 4cc1 000d 4d57 000d     !M..=M...L..WM..
   d8454:	4d8f 000d 4dab 000d                         .M...M..

000d845c <_ZL4font>:
   d845c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d846c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d847c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d848c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d849c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d84ac:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d84bc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d84cc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d84dc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d84ec:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d84fc:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d850c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d851c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d852c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d853c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d854c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d855c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d856c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d857c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d858c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d859c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d85ac:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d85bc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d85cc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d85dc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d85ec:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d85fc:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d860c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d861c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d862c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d863c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d864c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d865c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d866c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d867c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d868c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d869c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d86ac:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d86bc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d86cc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d86dc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d86ec:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d86fc:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d870c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d871c:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d872c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d873c:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d874c:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d875c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d876c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d877c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d878c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d879c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d87ac:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d87bc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d87cc:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d87dc:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d87ec:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d87fc:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d880c:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d881c:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d882c:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d883c:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d884c:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d885c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d886c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d887c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d888c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d889c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d88ac:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d88bc:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d88cc:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d88dc:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d88ec:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d88fc:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d890c:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d891c:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d892c:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d893c:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d894c:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d8958 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8960:	40cb 000d 43e3 000d 4f95 000d 5041 000d     .@...C...O..AP..
   d8970:	5073 000d 4fa9 000d 4fe9 000d               sP...O...O..

000d897c <_ZTV13Adafruit_MQTT>:
	...
   d898c:	40a5 000d 40a5 000d 40a5 000d 40a5 000d     .@...@...@...@..
   d899c:	40a5 000d 5b20 7830 3000 5d00 202c 0a00     .@.. [0x.0.], ..
   d89ac:	0009 7244 706f 6570 2064 2061 6170 6b63     ..Dropped a pack
   d89bc:	7465 5500 6b6e 6f6e 6e77 6520 7272 726f     et.Unknown error
   d89cc:	4d00 5451 0054 2525 6425 252e 6664 4600     .MQTT.%%%d.%df.F
   d89dc:	6961 656c 2064 6f74 7320 6275 6373 6972     ailed to subscri
   d89ec:	6562 4300 6e6f 656e 7463 6f69 206e 6166     be.Connection fa
   d89fc:	6c69 6465 5400 6568 5320 7265 6576 2072     iled.The Server 
   d8a0c:	6f64 7365 6e20 746f 7320 7075 6f70 7472     does not support
   d8a1c:	7420 6568 6c20 7665 6c65 6f20 2066 6874      the level of th
   d8a2c:	2065 514d 5454 7020 6f72 6f74 6f63 206c     e MQTT protocol 
   d8a3c:	6572 7571 7365 6574 0064 6854 2065 6c43     requested.The Cl
   d8a4c:	6569 746e 6920 6564 746e 6669 6569 2072     ient identifier 
   d8a5c:	7369 6320 726f 6572 7463 5520 4654 382d     is correct UTF-8
   d8a6c:	6220 7475 6e20 746f 6120 6c6c 776f 6465      but not allowed
   d8a7c:	6220 2079 6874 2065 6553 7672 7265 5400      by the Server.T
   d8a8c:	6568 4d20 5451 2054 6573 7672 6369 2065     he MQTT service 
   d8a9c:	7369 7520 616e 6176 6c69 6261 656c 5400     is unavailable.T
   d8aac:	6568 6420 7461 2061 6e69 7420 6568 7520     he data in the u
   d8abc:	6573 2072 616e 656d 6f20 2072 6170 7373     ser name or pass
   d8acc:	6f77 6472 6920 2073 616d 666c 726f 656d     word is malforme
   d8adc:	0064 6f4e 2074 7561 6874 726f 7a69 6465     d.Not authorized
   d8aec:	7420 206f 6f63 6e6e 6365 0074 7845 6563      to connect.Exce
   d8afc:	6465 6465 7220 6365 6e6f 656e 7463 7220     eded reconnect r
   d8b0c:	7461 2065 696c 696d 2e74 5020 656c 7361     ate limit. Pleas
   d8b1c:	2065 7274 2079 6761 6961 206e 616c 6574     e try again late
   d8b2c:	2e72 5900 756f 6820 7661 2065 6562 6e65     r..You have been
   d8b3c:	6220 6e61 656e 2064 7266 6d6f 6320 6e6f      banned from con
   d8b4c:	656e 7463 6e69 2e67 5020 656c 7361 2065     necting. Please 
   d8b5c:	6f63 746e 6361 2074 6874 2065 514d 5454     contact the MQTT
   d8b6c:	7320 7265 6576 2072 6461 696d 696e 7473      server administ
   d8b7c:	6172 6f74 2072 6f66 2072 6f6d 6572 6420     rator for more d
   d8b8c:	7465 6961 736c 002e                         etails..

000d8b94 <_ZTVN5spark13EthernetClassE>:
	...
   d8b9c:	5cd7 000d 5ccd 000d 5cc3 000d 5cb9 000d     .\...\...\...\..
   d8bac:	5cad 000d 5ca1 000d 5c95 000d 5c8d 000d     .\...\...\...\..
   d8bbc:	5c83 000d 5c79 000d 70c1 000d               .\..y\...p..

000d8bc8 <_ZTV8SPIClass>:
	...
   d8bd0:	5cf5 000d 5cf7 000d                         .\...\..

000d8bd8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8bd8:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d8be8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d8bf8:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d8c08:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d8c18:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8c28:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d8c38:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d8c48:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d8c58:	3130 7530 0020 205d 2800 3a29 0020 5b20     010u .] .(): . [
   d8c68:	6300 646f 2065 203d 6400 7465 6961 736c     .code = .details
   d8c78:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
   d8c88:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
   d8c98:	6361 0065 6e69 6f66 7700 7261 006e 6170     ace.info.warn.pa
   d8ca8:	696e 0063 6c61 006c 2b25 3330 3a64 3025     nic.all.%+03d:%0
   d8cb8:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
   d8cc8:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

000d8cd8 <_ZTV9IPAddress>:
	...
   d8ce0:	6511 000d 6501 000d 6503 000d               .e...e...e..

000d8cec <_ZTV9USBSerial>:
	...
   d8cf4:	6615 000d 6665 000d 6673 000d 6169 000d     .f..ef..sf..ia..
   d8d04:	6651 000d 6617 000d 662d 000d 665f 000d     Qf...f..-f.._f..
   d8d14:	6643 000d 6611 000d                         Cf...f..

000d8d1c <_ZTV11USARTSerial>:
	...
   d8d24:	6721 000d 6771 000d 677f 000d 6169 000d     !g..qg...g..ia..
   d8d34:	6735 000d 6757 000d 6743 000d 676b 000d     5g..Wg..Cg..kg..
   d8d44:	6723 000d 6727 000d                         #g..'g..

000d8d4c <_ZTV7TwoWire>:
	...
   d8d54:	6825 000d 686f 000d 6847 000d 6827 000d     %h..oh..Gh..'h..
   d8d64:	684f 000d 6857 000d 685f 000d 6867 000d     Oh..Wh.._h..gh..

000d8d74 <_ZTVN5spark9MeshClassE>:
	...
   d8d7c:	692f 000d 6925 000d 691b 000d 6911 000d     /i..%i...i...i..
   d8d8c:	6905 000d 68f9 000d 68ed 000d 68e5 000d     .i...h...h...h..
   d8d9c:	68db 000d 68d1 000d 70c1 000d               .h...h...p..

000d8da8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8db0:	6ad5 000d 6adb 000d 6fc3 000d 6ae9 000d     .j...j...o...j..
   d8dc0:	6ad7 000d                                   .j..

000d8dc4 <_ZTV9TCPClient>:
	...
   d8dcc:	40e9 000d 411d 000d 6a4d 000d 6a67 000d     .@...A..Mj..gj..
   d8ddc:	6e69 000d 6bbb 000d 6b8d 000d 6a91 000d     in...k...k...j..
   d8dec:	6d45 000d 6c41 000d 6bef 000d 6e39 000d     Em..Al...k..9n..
   d8dfc:	6a93 000d 6acb 000d 6a79 000d 6aed 000d     .j...j..yj...j..
   d8e0c:	6b6d 000d 6977 6972 676e 7200 6365 2076     mk..wiring.recv 
   d8e1c:	7265 6f72 2072 203d 6425 0000               error = %d..

000d8e28 <_ZTVN5spark9WiFiClassE>:
	...
   d8e30:	7039 000d 702f 000d 7025 000d 6fdb 000d     9p../p..%p...o..
   d8e40:	7019 000d 700d 000d 7001 000d 6ff9 000d     .p...p...p...o..
   d8e50:	6fef 000d 6fe5 000d 70c1 000d               .o...o...p..

000d8e5c <_ZTVN5spark12NetworkClassE>:
	...
   d8e64:	7059 000d 7063 000d 706d 000d 7077 000d     Yp..cp..mp..wp..
   d8e74:	7081 000d 708d 000d 7099 000d 70a5 000d     .p...p...p...p..
   d8e84:	70ad 000d 70b7 000d 70c1 000d               .p...p...p..

000d8e90 <_ZSt7nothrow>:
	...

000d8e91 <day_name.4725>:
   d8e91:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d8ea1:	6972 6153 4a74                                   riSat

000d8ea6 <mon_name.4726>:
   d8ea6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d8eb6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d8ec6:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   d8ed6:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   d8ee6:	6425 000a                                   %d..

000d8eea <_ctype_>:
   d8eea:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8efa:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8f0a:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8f1a:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8f2a:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8f3a:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8f4a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8f5a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8f6a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8fec <__sf_fake_stdin>:
	...

000d900c <__sf_fake_stdout>:
	...

000d902c <__sf_fake_stderr>:
	...
   d904c:	0043 0000                                   C...

000d9050 <__month_lengths>:
   d9050:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   d9060:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d9070:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d9080:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   d9090:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   d90a0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   d90b0:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   d90c0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   d90d0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   d90e0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000d90ec <link_const_variable_data_end>:
   d90ec:	000d43f1 	.word	0x000d43f1
   d90f0:	000d4bfd 	.word	0x000d4bfd
   d90f4:	000d4f91 	.word	0x000d4f91
   d90f8:	000d50d3 	.word	0x000d50d3
   d90fc:	000d565b 	.word	0x000d565b
   d9100:	000d5ce1 	.word	0x000d5ce1
   d9104:	000d5eb9 	.word	0x000d5eb9
   d9108:	000d6141 	.word	0x000d6141
   d910c:	000d62a5 	.word	0x000d62a5
   d9110:	000d639d 	.word	0x000d639d
   d9114:	000d63d5 	.word	0x000d63d5
   d9118:	000d69fd 	.word	0x000d69fd
   d911c:	000d7045 	.word	0x000d7045
   d9120:	000d718d 	.word	0x000d718d
   d9124:	000d73fd 	.word	0x000d73fd
   d9128:	000d7481 	.word	0x000d7481
   d912c:	000d7545 	.word	0x000d7545
   d9130:	000d7609 	.word	0x000d7609

000d9134 <link_constructors_end>:
	...
