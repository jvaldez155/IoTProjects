
c:/Users/John/Documents/IoTClass/studentprojects-jvaldez155/CapstoneProject/target/1.5.1/argon/CapstoneProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004754  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8770  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000004bc  2003dd98  000d8774  0001dd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000059c  2003e254  2003e254  0002e254  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8c30  000d8c30  00028c30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8c58  000d8c58  00028c58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00119441  00000000  00000000  00028c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000165f9  00000000  00000000  0014209d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002702e  00000000  00000000  00158696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e70  00000000  00000000  0017f6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000054d0  00000000  00000000  00182534  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f3af  00000000  00000000  00187a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00039c7c  00000000  00000000  001c6db3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010c9e6  00000000  00000000  00200a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000eabc  00000000  00000000  0030d418  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fd15 	bl	d7a5c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fd1a 	bl	d7a72 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dd98 	.word	0x2003dd98
   d4048:	000d8774 	.word	0x000d8774
   d404c:	2003e254 	.word	0x2003e254
   d4050:	2003e254 	.word	0x2003e254
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fc09 	bl	d6870 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8764 	.word	0x000d8764
   d4080:	000d8710 	.word	0x000d8710

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b940 	b.w	d4308 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcb7 	bl	d49fc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bbaf 	b.w	d67f4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 b8d5 	b.w	d6244 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 b8db 	b.w	d6254 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 b8d9 	b.w	d6254 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 f826 	bl	d60fc <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5edd 	.word	0x000d5edd

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr
	...

000d40cc <_Z8menuOpenv>:
        case 5: 
            twist.setCount(pm10Hlast);
            break;      
    }
}
void menuOpen() {
   d40cc:	b508      	push	{r3, lr}
    menuState = !menuState;
   d40ce:	4a16      	ldr	r2, [pc, #88]	; (d4128 <_Z8menuOpenv+0x5c>)
    if(menuState == true){
    display.clearDisplay();
   d40d0:	4816      	ldr	r0, [pc, #88]	; (d412c <_Z8menuOpenv+0x60>)
            twist.setCount(pm10Hlast);
            break;      
    }
}
void menuOpen() {
    menuState = !menuState;
   d40d2:	7813      	ldrb	r3, [r2, #0]
   d40d4:	f083 0301 	eor.w	r3, r3, #1
   d40d8:	7013      	strb	r3, [r2, #0]
    if(menuState == true){
   d40da:	b163      	cbz	r3, d40f6 <_Z8menuOpenv+0x2a>
    display.clearDisplay();
   d40dc:	f001 f80e 	bl	d50fc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(2);
   d40e0:	2102      	movs	r1, #2
   d40e2:	4812      	ldr	r0, [pc, #72]	; (d412c <_Z8menuOpenv+0x60>)
   d40e4:	f001 fb7c 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setCursor(40,20);
   d40e8:	2128      	movs	r1, #40	; 0x28
   d40ea:	2214      	movs	r2, #20
   d40ec:	480f      	ldr	r0, [pc, #60]	; (d412c <_Z8menuOpenv+0x60>)
   d40ee:	f001 fb74 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
    display.println("MENU");
   d40f2:	490f      	ldr	r1, [pc, #60]	; (d4130 <_Z8menuOpenv+0x64>)
   d40f4:	e00b      	b.n	d410e <_Z8menuOpenv+0x42>
    display.display();}
    else
    {   display.clearDisplay();
   d40f6:	f001 f801 	bl	d50fc <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setCursor(30,20);
   d40fa:	2214      	movs	r2, #20
   d40fc:	211e      	movs	r1, #30
   d40fe:	480b      	ldr	r0, [pc, #44]	; (d412c <_Z8menuOpenv+0x60>)
   d4100:	f001 fb6b 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.setTextSize(2);
   d4104:	2102      	movs	r1, #2
   d4106:	4809      	ldr	r0, [pc, #36]	; (d412c <_Z8menuOpenv+0x60>)
   d4108:	f001 fb6a 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
        display.println("RETURN");
   d410c:	4909      	ldr	r1, [pc, #36]	; (d4134 <_Z8menuOpenv+0x68>)
   d410e:	4807      	ldr	r0, [pc, #28]	; (d412c <_Z8menuOpenv+0x60>)
   d4110:	f002 fae5 	bl	d66de <_ZN5Print7printlnEPKc>
        display.display();}
   d4114:	4805      	ldr	r0, [pc, #20]	; (d412c <_Z8menuOpenv+0x60>)
   d4116:	f001 f92b 	bl	d5370 <_ZN16Adafruit_SSD13067displayEv>
    delay(1500);}
   d411a:	f240 50dc 	movw	r0, #1500	; 0x5dc
   d411e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4122:	f002 bb19 	b.w	d6758 <delay>
   d4126:	bf00      	nop
   d4128:	2003e2a0 	.word	0x2003e2a0
   d412c:	2003e2ac 	.word	0x2003e2ac
   d4130:	000d7b40 	.word	0x000d7b40
   d4134:	000d7b45 	.word	0x000d7b45

000d4138 <_Z8menuDownv>:
    pm10H = encPosition;
    pm10Hlast = pm10H;
  }
}

void menuDown() {menuCount++;
   d4138:	4b10      	ldr	r3, [pc, #64]	; (d417c <_Z8menuDownv+0x44>)
   d413a:	781a      	ldrb	r2, [r3, #0]
   d413c:	3201      	adds	r2, #1
   d413e:	b2d2      	uxtb	r2, r2
    if(menuCount > 5) menuCount = 0;
   d4140:	2a05      	cmp	r2, #5
   d4142:	bf88      	it	hi
   d4144:	2200      	movhi	r2, #0
   d4146:	701a      	strb	r2, [r3, #0]
    switch(menuCount){
   d4148:	781b      	ldrb	r3, [r3, #0]
   d414a:	2b05      	cmp	r3, #5
   d414c:	d814      	bhi.n	d4178 <_Z8menuDownv+0x40>
   d414e:	e8df f003 	tbb	[pc, r3]
   d4152:	0503      	.short	0x0503
   d4154:	0d0b0907 	.word	0x0d0b0907
        case 0: 
            twist.setCount(pm1Llast);
   d4158:	4b09      	ldr	r3, [pc, #36]	; (d4180 <_Z8menuDownv+0x48>)
   d415a:	e008      	b.n	d416e <_Z8menuDownv+0x36>
            break;
        case 1: 
            twist.setCount(pm1Hlast);
   d415c:	4b09      	ldr	r3, [pc, #36]	; (d4184 <_Z8menuDownv+0x4c>)
   d415e:	e006      	b.n	d416e <_Z8menuDownv+0x36>
            break;
         case 2: 
            twist.setCount(pm25Llast);
   d4160:	4b09      	ldr	r3, [pc, #36]	; (d4188 <_Z8menuDownv+0x50>)
   d4162:	e004      	b.n	d416e <_Z8menuDownv+0x36>
            break;
        case 3: 
            twist.setCount(pm25Hlast);
   d4164:	4b09      	ldr	r3, [pc, #36]	; (d418c <_Z8menuDownv+0x54>)
   d4166:	e002      	b.n	d416e <_Z8menuDownv+0x36>
            break;
         case 4: 
            twist.setCount(pm10Llast);
   d4168:	4b09      	ldr	r3, [pc, #36]	; (d4190 <_Z8menuDownv+0x58>)
   d416a:	e000      	b.n	d416e <_Z8menuDownv+0x36>
            break;
        case 5: 
            twist.setCount(pm10Hlast);
   d416c:	4b09      	ldr	r3, [pc, #36]	; (d4194 <_Z8menuDownv+0x5c>)
   d416e:	f9b3 1000 	ldrsh.w	r1, [r3]
   d4172:	4809      	ldr	r0, [pc, #36]	; (d4198 <_Z8menuDownv+0x60>)
   d4174:	f001 be1c 	b.w	d5db0 <_ZN5TWIST8setCountEs>
   d4178:	4770      	bx	lr
   d417a:	bf00      	nop
   d417c:	2003e282 	.word	0x2003e282
   d4180:	2003ddd8 	.word	0x2003ddd8
   d4184:	2003ddc8 	.word	0x2003ddc8
   d4188:	2003dda8 	.word	0x2003dda8
   d418c:	2003dda0 	.word	0x2003dda0
   d4190:	2003ddd0 	.word	0x2003ddd0
   d4194:	2003ddd4 	.word	0x2003ddd4
   d4198:	2003e258 	.word	0x2003e258

000d419c <_Z6menuUpv>:
            break;      
    }
}
void menuUp() {menuCount--;
   d419c:	4a0e      	ldr	r2, [pc, #56]	; (d41d8 <_Z6menuUpv+0x3c>)
   d419e:	7813      	ldrb	r3, [r2, #0]
   d41a0:	3b01      	subs	r3, #1
   d41a2:	b2db      	uxtb	r3, r3
   d41a4:	7013      	strb	r3, [r2, #0]
    if(menuCount < 0) menuCount = 5;
    switch(menuCount){
   d41a6:	2b05      	cmp	r3, #5
   d41a8:	d814      	bhi.n	d41d4 <_Z6menuUpv+0x38>
   d41aa:	e8df f003 	tbb	[pc, r3]
   d41ae:	0503      	.short	0x0503
   d41b0:	0d0b0907 	.word	0x0d0b0907
        case 0: 
            twist.setCount(pm1Llast);
   d41b4:	4b09      	ldr	r3, [pc, #36]	; (d41dc <_Z6menuUpv+0x40>)
   d41b6:	e008      	b.n	d41ca <_Z6menuUpv+0x2e>
            break;
        case 1: 
            twist.setCount(pm1Hlast);
   d41b8:	4b09      	ldr	r3, [pc, #36]	; (d41e0 <_Z6menuUpv+0x44>)
   d41ba:	e006      	b.n	d41ca <_Z6menuUpv+0x2e>
            break;
         case 2: 
            twist.setCount(pm25Llast);
   d41bc:	4b09      	ldr	r3, [pc, #36]	; (d41e4 <_Z6menuUpv+0x48>)
   d41be:	e004      	b.n	d41ca <_Z6menuUpv+0x2e>
            break;
        case 3: 
            twist.setCount(pm25Hlast);
   d41c0:	4b09      	ldr	r3, [pc, #36]	; (d41e8 <_Z6menuUpv+0x4c>)
   d41c2:	e002      	b.n	d41ca <_Z6menuUpv+0x2e>
            break;
         case 4: 
            twist.setCount(pm10Llast);
   d41c4:	4b09      	ldr	r3, [pc, #36]	; (d41ec <_Z6menuUpv+0x50>)
   d41c6:	e000      	b.n	d41ca <_Z6menuUpv+0x2e>
            break;
        case 5: 
            twist.setCount(pm10Hlast);
   d41c8:	4b09      	ldr	r3, [pc, #36]	; (d41f0 <_Z6menuUpv+0x54>)
   d41ca:	f9b3 1000 	ldrsh.w	r1, [r3]
   d41ce:	4809      	ldr	r0, [pc, #36]	; (d41f4 <_Z6menuUpv+0x58>)
   d41d0:	f001 bdee 	b.w	d5db0 <_ZN5TWIST8setCountEs>
   d41d4:	4770      	bx	lr
   d41d6:	bf00      	nop
   d41d8:	2003e282 	.word	0x2003e282
   d41dc:	2003ddd8 	.word	0x2003ddd8
   d41e0:	2003ddc8 	.word	0x2003ddc8
   d41e4:	2003dda8 	.word	0x2003dda8
   d41e8:	2003dda0 	.word	0x2003dda0
   d41ec:	2003ddd0 	.word	0x2003ddd0
   d41f0:	2003ddd4 	.word	0x2003ddd4
   d41f4:	2003e258 	.word	0x2003e258

000d41f8 <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d41f8:	b510      	push	{r4, lr}
   d41fa:	4b03      	ldr	r3, [pc, #12]	; (d4208 <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d41fc:	6003      	str	r3, [r0, #0]
   d41fe:	4604      	mov	r4, r0
   d4200:	f001 fb28 	bl	d5854 <_ZN10JsonWriterD1Ev>
   d4204:	4620      	mov	r0, r4
   d4206:	bd10      	pop	{r4, pc}
   d4208:	000d7b38 	.word	0x000d7b38

000d420c <_ZN16JsonWriterStaticILj256EED0Ev>:
   d420c:	b510      	push	{r4, lr}
   d420e:	4604      	mov	r4, r0
   d4210:	f7ff fff2 	bl	d41f8 <_ZN16JsonWriterStaticILj256EED1Ev>
   d4214:	4620      	mov	r0, r4
   d4216:	f44f 7198 	mov.w	r1, #304	; 0x130
   d421a:	f003 fab3 	bl	d7784 <_ZdlPvj>
   d421e:	4620      	mov	r0, r4
   d4220:	bd10      	pop	{r4, pc}

000d4222 <_Z12print_resultPKct>:
                     "PM1.0 concentration(Atmospheric environment,unit:ug/m3): ",
                     "PM2.5 concentration(Atmospheric environment,unit:ug/m3): ",
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

HM330XErrorCode print_result(const char* str, uint16_t value) {
   d4222:	b538      	push	{r3, r4, r5, lr}
   d4224:	460d      	mov	r5, r1
    if (NULL == str) {
   d4226:	4604      	mov	r4, r0
   d4228:	b180      	cbz	r0, d424c <_Z12print_resultPKct+0x2a>
        return ERROR_PARAM;
    }
    Serial.print(str);
   d422a:	f002 fee5 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d422e:	4621      	mov	r1, r4
   d4230:	f002 fa42 	bl	d66b8 <_ZN5Print5printEPKc>
    Serial.println(value);
   d4234:	f002 fee0 	bl	d6ff8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4238:	220a      	movs	r2, #10
   d423a:	4604      	mov	r4, r0
   d423c:	4629      	mov	r1, r5
   d423e:	f002 fa58 	bl	d66f2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4242:	4620      	mov	r0, r4
   d4244:	f002 fa3f 	bl	d66c6 <_ZN5Print7printlnEv>
    return NO_ERROR1;
   d4248:	2000      	movs	r0, #0
   d424a:	bd38      	pop	{r3, r4, r5, pc}
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

HM330XErrorCode print_result(const char* str, uint16_t value) {
    if (NULL == str) {
        return ERROR_PARAM;
   d424c:	f04f 30ff 	mov.w	r0, #4294967295
    }
    Serial.print(str);
    Serial.println(value);
    return NO_ERROR1;
}
   d4250:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4254 <_Z12parse_resultPh>:

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
   d4254:	b570      	push	{r4, r5, r6, lr}
    uint16_t value = 0;
    if (NULL == data) {
   d4256:	4605      	mov	r5, r0
   d4258:	b178      	cbz	r0, d427a <_Z12parse_resultPh+0x26>
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
   d425a:	4e09      	ldr	r6, [pc, #36]	; (d4280 <_Z12parse_resultPh+0x2c>)
   d425c:	2400      	movs	r4, #0
   d425e:	192b      	adds	r3, r5, r4
   d4260:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
   d4264:	7899      	ldrb	r1, [r3, #2]
   d4266:	78db      	ldrb	r3, [r3, #3]
   d4268:	3402      	adds	r4, #2
   d426a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d426e:	f7ff ffd8 	bl	d4222 <_Z12print_resultPKct>
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
   d4272:	2c0e      	cmp	r4, #14
   d4274:	d1f3      	bne.n	d425e <_Z12parse_resultPh+0xa>
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
    }
    return NO_ERROR1;
   d4276:	2000      	movs	r0, #0
   d4278:	bd70      	pop	{r4, r5, r6, pc}

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
   d427a:	f04f 30ff 	mov.w	r0, #4294967295
    for (int i = 1; i < 8; i++) {
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
    }
    return NO_ERROR1;
}
   d427e:	bd70      	pop	{r4, r5, r6, pc}
   d4280:	2003ddac 	.word	0x2003ddac

000d4284 <_Z18parse_result_valuePh>:

HM330XErrorCode parse_result_value(uint8_t* data) {
   d4284:	b538      	push	{r3, r4, r5, lr}
    if (NULL == data) {
   d4286:	4605      	mov	r5, r0
   d4288:	b3a0      	cbz	r0, d42f4 <_Z18parse_result_valuePh+0x70>
   d428a:	2400      	movs	r4, #0
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
        Serial.print(data[i], HEX);
   d428c:	f002 feb4 	bl	d6ff8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4290:	2210      	movs	r2, #16
   d4292:	5d29      	ldrb	r1, [r5, r4]
   d4294:	f002 fa2d 	bl	d66f2 <_ZN5Print11printNumberEmh>
        Serial.print("  ");
   d4298:	f002 feae 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d429c:	4917      	ldr	r1, [pc, #92]	; (d42fc <_Z18parse_result_valuePh+0x78>)
   d429e:	f002 fa0b 	bl	d66b8 <_ZN5Print5printEPKc>
        if ((0 == (i) % 5) || (0 == i)) {
   d42a2:	2305      	movs	r3, #5
   d42a4:	fb94 f3f3 	sdiv	r3, r4, r3
   d42a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d42ac:	429c      	cmp	r4, r3
   d42ae:	d000      	beq.n	d42b2 <_Z18parse_result_valuePh+0x2e>
   d42b0:	b924      	cbnz	r4, d42bc <_Z18parse_result_valuePh+0x38>
            Serial.println("");
   d42b2:	f002 fea1 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d42b6:	4912      	ldr	r1, [pc, #72]	; (d4300 <_Z18parse_result_valuePh+0x7c>)
   d42b8:	f002 fa11 	bl	d66de <_ZN5Print7printlnEPKc>

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
   d42bc:	3401      	adds	r4, #1
   d42be:	2c1c      	cmp	r4, #28
   d42c0:	d1e4      	bne.n	d428c <_Z18parse_result_valuePh+0x8>
   d42c2:	1e6a      	subs	r2, r5, #1
   d42c4:	f105 011b 	add.w	r1, r5, #27
   d42c8:	2300      	movs	r3, #0
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
        sum += data[i];
   d42ca:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   d42ce:	4403      	add	r3, r0
        if ((0 == (i) % 5) || (0 == i)) {
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d42d0:	428a      	cmp	r2, r1
        sum += data[i];
   d42d2:	b2db      	uxtb	r3, r3
        if ((0 == (i) % 5) || (0 == i)) {
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d42d4:	d1f9      	bne.n	d42ca <_Z18parse_result_valuePh+0x46>
        sum += data[i];
    }
    if (sum != data[28]) {
   d42d6:	7f2a      	ldrb	r2, [r5, #28]
   d42d8:	429a      	cmp	r2, r3
   d42da:	d004      	beq.n	d42e6 <_Z18parse_result_valuePh+0x62>
        Serial.println("wrong checkSum!!!!");
   d42dc:	f002 fe8c 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d42e0:	4908      	ldr	r1, [pc, #32]	; (d4304 <_Z18parse_result_valuePh+0x80>)
   d42e2:	f002 f9fc 	bl	d66de <_ZN5Print7printlnEPKc>
    }
    Serial.println("");
   d42e6:	f002 fe87 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d42ea:	4905      	ldr	r1, [pc, #20]	; (d4300 <_Z18parse_result_valuePh+0x7c>)
   d42ec:	f002 f9f7 	bl	d66de <_ZN5Print7printlnEPKc>
    return NO_ERROR1;
   d42f0:	2000      	movs	r0, #0
   d42f2:	bd38      	pop	{r3, r4, r5, pc}
    return NO_ERROR1;
}

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
   d42f4:	f04f 30ff 	mov.w	r0, #4294967295
    if (sum != data[28]) {
        Serial.println("wrong checkSum!!!!");
    }
    Serial.println("");
    return NO_ERROR1;
}
   d42f8:	bd38      	pop	{r3, r4, r5, pc}
   d42fa:	bf00      	nop
   d42fc:	000d7c4e 	.word	0x000d7c4e
   d4300:	000d84f0 	.word	0x000d84f0
   d4304:	000d7b4c 	.word	0x000d7b4c

000d4308 <setup>:
int pm25H;
int pm10L;
int pm10H;
byte menuCount = 0;

void setup() {
   d4308:	b538      	push	{r3, r4, r5, lr}
  Serial.begin(9600);
   d430a:	f002 fe75 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d430e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4312:	f002 fe65 	bl	d6fe0 <_ZN9USBSerial5beginEl>
  delay(1000);
   d4316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d431a:	f002 fa1d 	bl	d6758 <delay>
  Serial.println("----------------------------------------------------------");
   d431e:	f002 fe6b 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4322:	4951      	ldr	r1, [pc, #324]	; (d4468 <setup+0x160>)
   d4324:	4c51      	ldr	r4, [pc, #324]	; (d446c <setup+0x164>)
   d4326:	f002 f9da 	bl	d66de <_ZN5Print7printlnEPKc>

  Serial.println("Serial start");
   d432a:	f002 fe65 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d432e:	4950      	ldr	r1, [pc, #320]	; (d4470 <setup+0x168>)
   d4330:	f002 f9d5 	bl	d66de <_ZN5Print7printlnEPKc>
  if (sensor.init()) {
   d4334:	484f      	ldr	r0, [pc, #316]	; (d4474 <setup+0x16c>)
   d4336:	f001 fbdf 	bl	d5af8 <_ZN6HM330X4initEv>
   d433a:	4605      	mov	r5, r0
   d433c:	b170      	cbz	r0, d435c <setup+0x54>
    Serial.println("HM330X init failed!!!");  digitalWrite(buzzer, HIGH);
   d433e:	f002 fe5b 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4342:	494d      	ldr	r1, [pc, #308]	; (d4478 <setup+0x170>)
   d4344:	f002 f9cb 	bl	d66de <_ZN5Print7printlnEPKc>
   d4348:	2101      	movs	r1, #1
   d434a:	8820      	ldrh	r0, [r4, #0]
   d434c:	f003 f97d 	bl	d764a <digitalWrite>
            Serial.println("lalala");
   d4350:	f002 fe52 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4354:	4949      	ldr	r1, [pc, #292]	; (d447c <setup+0x174>)
   d4356:	f002 f9c2 	bl	d66de <_ZN5Print7printlnEPKc>
   d435a:	e7fe      	b.n	d435a <setup+0x52>
    while (1);
    }
    Wire.begin();
   d435c:	f003 f9de 	bl	d771c <_Z19__fetch_global_Wirev>
   d4360:	f002 ff44 	bl	d71ec <_ZN7TwoWire5beginEv>
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4364:	223c      	movs	r2, #60	; 0x3c
   d4366:	2102      	movs	r1, #2
   d4368:	4845      	ldr	r0, [pc, #276]	; (d4480 <setup+0x178>)
   d436a:	f000 ff2f 	bl	d51cc <_ZN16Adafruit_SSD13065beginEhh>
    display.clearDisplay();
   d436e:	4844      	ldr	r0, [pc, #272]	; (d4480 <setup+0x178>)
   d4370:	f000 fec4 	bl	d50fc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
   d4374:	4842      	ldr	r0, [pc, #264]	; (d4480 <setup+0x178>)
   d4376:	f000 fffb 	bl	d5370 <_ZN16Adafruit_SSD13067displayEv>
    display.setRotation(2);
   d437a:	2102      	movs	r1, #2
   d437c:	4840      	ldr	r0, [pc, #256]	; (d4480 <setup+0x178>)
   d437e:	f001 fa39 	bl	d57f4 <_ZN12Adafruit_GFX11setRotationEh>

    display.setCursor(3,0);
   d4382:	462a      	mov	r2, r5
   d4384:	2103      	movs	r1, #3
   d4386:	483e      	ldr	r0, [pc, #248]	; (d4480 <setup+0x178>)
   d4388:	f001 fa27 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
    display.setTextColor(WHITE);
   d438c:	2101      	movs	r1, #1
   d438e:	483c      	ldr	r0, [pc, #240]	; (d4480 <setup+0x178>)
   d4390:	f001 fa2b 	bl	d57ea <_ZN12Adafruit_GFX12setTextColorEt>
    display.setTextSize(2);
   d4394:	2102      	movs	r1, #2
   d4396:	483a      	ldr	r0, [pc, #232]	; (d4480 <setup+0x178>)
   d4398:	f001 fa22 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.print("Dust Reading");
   d439c:	4939      	ldr	r1, [pc, #228]	; (d4484 <setup+0x17c>)
   d439e:	4838      	ldr	r0, [pc, #224]	; (d4480 <setup+0x178>)
   d43a0:	f002 f98a 	bl	d66b8 <_ZN5Print5printEPKc>
    display.display();
   d43a4:	4836      	ldr	r0, [pc, #216]	; (d4480 <setup+0x178>)
   d43a6:	f000 ffe3 	bl	d5370 <_ZN16Adafruit_SSD13067displayEv>

    menu.attachClick(menuDown);
   d43aa:	4937      	ldr	r1, [pc, #220]	; (d4488 <setup+0x180>)
   d43ac:	4837      	ldr	r0, [pc, #220]	; (d448c <setup+0x184>)
   d43ae:	f001 fc05 	bl	d5bbc <_ZN9OneButton11attachClickEPFvvE>
    menu.attachDuringLongPress(menuOpen);
   d43b2:	4937      	ldr	r1, [pc, #220]	; (d4490 <setup+0x188>)
   d43b4:	4835      	ldr	r0, [pc, #212]	; (d448c <setup+0x184>)
   d43b6:	f001 fc03 	bl	d5bc0 <_ZN9OneButton21attachDuringLongPressEPFvvE>
    menu.setPressTicks(1500);
   d43ba:	f240 51dc 	movw	r1, #1500	; 0x5dc
   d43be:	4833      	ldr	r0, [pc, #204]	; (d448c <setup+0x184>)
   d43c0:	f001 fbfa 	bl	d5bb8 <_ZN9OneButton13setPressTicksEi>
    menuB.attachClick(menuUp);
   d43c4:	4933      	ldr	r1, [pc, #204]	; (d4494 <setup+0x18c>)
   d43c6:	4834      	ldr	r0, [pc, #208]	; (d4498 <setup+0x190>)
   d43c8:	f001 fbf8 	bl	d5bbc <_ZN9OneButton11attachClickEPFvvE>
class TWIST
{
public:
  TWIST();

  boolean begin(TwoWire &wirePort = Wire, uint8_t deviceAddress = QWIIC_TWIST_ADDR);
   d43cc:	f003 f9a6 	bl	d771c <_Z19__fetch_global_Wirev>
    twist.begin();
   d43d0:	223f      	movs	r2, #63	; 0x3f
   d43d2:	4601      	mov	r1, r0
   d43d4:	4831      	ldr	r0, [pc, #196]	; (d449c <setup+0x194>)
   d43d6:	f001 fc94 	bl	d5d02 <_ZN5TWIST5beginER7TwoWireh>
 pm1L = 50;
   d43da:	4b31      	ldr	r3, [pc, #196]	; (d44a0 <setup+0x198>)
 pm1H = 100;
   d43dc:	4a31      	ldr	r2, [pc, #196]	; (d44a4 <setup+0x19c>)
 pm1Hlast = 100;
 pm25Llast = 50;
 pm25Hlast = 100;
 pm10Llast = 50;
 pm10Hlast = 100;
twist.setCount(pm1Llast);
   d43de:	482f      	ldr	r0, [pc, #188]	; (d449c <setup+0x194>)
    menu.attachClick(menuDown);
    menu.attachDuringLongPress(menuOpen);
    menu.setPressTicks(1500);
    menuB.attachClick(menuUp);
    twist.begin();
 pm1L = 50;
   d43e0:	2132      	movs	r1, #50	; 0x32
   d43e2:	6019      	str	r1, [r3, #0]
 pm1H = 100;
   d43e4:	2364      	movs	r3, #100	; 0x64
   d43e6:	6013      	str	r3, [r2, #0]
 pm25L = 50;
   d43e8:	4a2f      	ldr	r2, [pc, #188]	; (d44a8 <setup+0x1a0>)
   d43ea:	6011      	str	r1, [r2, #0]
 pm25H = 100;
   d43ec:	4a2f      	ldr	r2, [pc, #188]	; (d44ac <setup+0x1a4>)
   d43ee:	6013      	str	r3, [r2, #0]
 pm10L = 50;
   d43f0:	4a2f      	ldr	r2, [pc, #188]	; (d44b0 <setup+0x1a8>)
   d43f2:	6011      	str	r1, [r2, #0]
 pm10H = 100;
   d43f4:	4a2f      	ldr	r2, [pc, #188]	; (d44b4 <setup+0x1ac>)
   d43f6:	6013      	str	r3, [r2, #0]
 pm1Llast = 50;
   d43f8:	4a2f      	ldr	r2, [pc, #188]	; (d44b8 <setup+0x1b0>)
   d43fa:	6011      	str	r1, [r2, #0]
 pm1Hlast = 100;
   d43fc:	4a2f      	ldr	r2, [pc, #188]	; (d44bc <setup+0x1b4>)
   d43fe:	6013      	str	r3, [r2, #0]
 pm25Llast = 50;
   d4400:	4a2f      	ldr	r2, [pc, #188]	; (d44c0 <setup+0x1b8>)
   d4402:	6011      	str	r1, [r2, #0]
 pm25Hlast = 100;
   d4404:	4a2f      	ldr	r2, [pc, #188]	; (d44c4 <setup+0x1bc>)
   d4406:	6013      	str	r3, [r2, #0]
 pm10Llast = 50;
   d4408:	4a2f      	ldr	r2, [pc, #188]	; (d44c8 <setup+0x1c0>)
   d440a:	6011      	str	r1, [r2, #0]
 pm10Hlast = 100;
   d440c:	4a2f      	ldr	r2, [pc, #188]	; (d44cc <setup+0x1c4>)
   d440e:	6013      	str	r3, [r2, #0]
twist.setCount(pm1Llast);
   d4410:	f001 fcce 	bl	d5db0 <_ZN5TWIST8setCountEs>
encPosition = twist.getCount();
   d4414:	4821      	ldr	r0, [pc, #132]	; (d449c <setup+0x194>)
   d4416:	f001 fcac 	bl	d5d72 <_ZN5TWIST8getCountEv>
   d441a:	4b2d      	ldr	r3, [pc, #180]	; (d44d0 <setup+0x1c8>)
    pm1 = "PM1";
   d441c:	492d      	ldr	r1, [pc, #180]	; (d44d4 <setup+0x1cc>)
 pm25Llast = 50;
 pm25Hlast = 100;
 pm10Llast = 50;
 pm10Hlast = 100;
twist.setCount(pm1Llast);
encPosition = twist.getCount();
   d441e:	6018      	str	r0, [r3, #0]
    pm1 = "PM1";
   d4420:	482d      	ldr	r0, [pc, #180]	; (d44d8 <setup+0x1d0>)
   d4422:	f002 f8d3 	bl	d65cc <_ZN6StringaSEPKc>
    pm25 = "PM25";
   d4426:	492d      	ldr	r1, [pc, #180]	; (d44dc <setup+0x1d4>)
   d4428:	482d      	ldr	r0, [pc, #180]	; (d44e0 <setup+0x1d8>)
   d442a:	f002 f8cf 	bl	d65cc <_ZN6StringaSEPKc>
    pm10 = "PM10";
   d442e:	492d      	ldr	r1, [pc, #180]	; (d44e4 <setup+0x1dc>)
   d4430:	482d      	ldr	r0, [pc, #180]	; (d44e8 <setup+0x1e0>)
   d4432:	f002 f8cb 	bl	d65cc <_ZN6StringaSEPKc>
    pinMode(ledR, OUTPUT);
   d4436:	4b2d      	ldr	r3, [pc, #180]	; (d44ec <setup+0x1e4>)
   d4438:	2101      	movs	r1, #1
   d443a:	8818      	ldrh	r0, [r3, #0]
   d443c:	f003 f8f4 	bl	d7628 <pinMode>
    pinMode(ledY,OUTPUT);
   d4440:	4b2b      	ldr	r3, [pc, #172]	; (d44f0 <setup+0x1e8>)
   d4442:	2101      	movs	r1, #1
   d4444:	8818      	ldrh	r0, [r3, #0]
   d4446:	f003 f8ef 	bl	d7628 <pinMode>
    pinMode(ledG,OUTPUT);
   d444a:	4b2a      	ldr	r3, [pc, #168]	; (d44f4 <setup+0x1ec>)
   d444c:	2101      	movs	r1, #1
   d444e:	8818      	ldrh	r0, [r3, #0]
   d4450:	f003 f8ea 	bl	d7628 <pinMode>
    pinMode(buzzer,OUTPUT);
   d4454:	8820      	ldrh	r0, [r4, #0]
   d4456:	2101      	movs	r1, #1
   d4458:	f003 f8e6 	bl	d7628 <pinMode>
    delay(2000);
   d445c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
}
   d4460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pm10 = "PM10";
    pinMode(ledR, OUTPUT);
    pinMode(ledY,OUTPUT);
    pinMode(ledG,OUTPUT);
    pinMode(buzzer,OUTPUT);
    delay(2000);
   d4464:	f002 b978 	b.w	d6758 <delay>
   d4468:	000d7b5f 	.word	0x000d7b5f
   d446c:	2003ddcc 	.word	0x2003ddcc
   d4470:	000d7b9a 	.word	0x000d7b9a
   d4474:	2003e338 	.word	0x2003e338
   d4478:	000d7ba7 	.word	0x000d7ba7
   d447c:	000d7bbd 	.word	0x000d7bbd
   d4480:	2003e2ac 	.word	0x2003e2ac
   d4484:	000d7bc4 	.word	0x000d7bc4
   d4488:	000d4139 	.word	0x000d4139
   d448c:	2003e2d0 	.word	0x2003e2d0
   d4490:	000d40cd 	.word	0x000d40cd
   d4494:	000d419d 	.word	0x000d419d
   d4498:	2003e35c 	.word	0x2003e35c
   d449c:	2003e258 	.word	0x2003e258
   d44a0:	2003e288 	.word	0x2003e288
   d44a4:	2003e284 	.word	0x2003e284
   d44a8:	2003e2a8 	.word	0x2003e2a8
   d44ac:	2003e28c 	.word	0x2003e28c
   d44b0:	2003e33c 	.word	0x2003e33c
   d44b4:	2003e340 	.word	0x2003e340
   d44b8:	2003ddd8 	.word	0x2003ddd8
   d44bc:	2003ddc8 	.word	0x2003ddc8
   d44c0:	2003dda8 	.word	0x2003dda8
   d44c4:	2003dda0 	.word	0x2003dda0
   d44c8:	2003ddd0 	.word	0x2003ddd0
   d44cc:	2003ddd4 	.word	0x2003ddd4
   d44d0:	2003e334 	.word	0x2003e334
   d44d4:	000d7bd1 	.word	0x000d7bd1
   d44d8:	2003e290 	.word	0x2003e290
   d44dc:	000d7bd5 	.word	0x000d7bd5
   d44e0:	2003e3c0 	.word	0x2003e3c0
   d44e4:	000d7bda 	.word	0x000d7bda
   d44e8:	2003e34c 	.word	0x2003e34c
   d44ec:	2003dd98 	.word	0x2003dd98
   d44f0:	2003dda4 	.word	0x2003dda4
   d44f4:	2003dd9c 	.word	0x2003dd9c

000d44f8 <_Z9menuCheckv>:
        display.println(">");
        display.display();
    }
}

void menuCheck() {
   d44f8:	b538      	push	{r3, r4, r5, lr}
  if (menuCount < 0) {
    menuCount = 5;
  }
  if (menuCount >= 6) {
   d44fa:	4c33      	ldr	r4, [pc, #204]	; (d45c8 <_Z9menuCheckv+0xd0>)
   d44fc:	7823      	ldrb	r3, [r4, #0]
   d44fe:	2b05      	cmp	r3, #5
    menuCount = 0;
   d4500:	bf84      	itt	hi
   d4502:	2300      	movhi	r3, #0
   d4504:	7023      	strbhi	r3, [r4, #0]
  }
  if (menuCount == 0) {encPosition = twist.getCount();  
   d4506:	7823      	ldrb	r3, [r4, #0]
   d4508:	b963      	cbnz	r3, d4524 <_Z9menuCheckv+0x2c>
   d450a:	4830      	ldr	r0, [pc, #192]	; (d45cc <_Z9menuCheckv+0xd4>)
   d450c:	4d30      	ldr	r5, [pc, #192]	; (d45d0 <_Z9menuCheckv+0xd8>)
   d450e:	f001 fc30 	bl	d5d72 <_ZN5TWIST8getCountEv>
   d4512:	6028      	str	r0, [r5, #0]
    encPosition = twist.getCount();
   d4514:	482d      	ldr	r0, [pc, #180]	; (d45cc <_Z9menuCheckv+0xd4>)
   d4516:	f001 fc2c 	bl	d5d72 <_ZN5TWIST8getCountEv>
    pm1L = encPosition;
   d451a:	4b2e      	ldr	r3, [pc, #184]	; (d45d4 <_Z9menuCheckv+0xdc>)
  }
  if (menuCount >= 6) {
    menuCount = 0;
  }
  if (menuCount == 0) {encPosition = twist.getCount();  
    encPosition = twist.getCount();
   d451c:	6028      	str	r0, [r5, #0]
    pm1L = encPosition;
   d451e:	6018      	str	r0, [r3, #0]
    pm1Llast = pm1L;
   d4520:	4b2d      	ldr	r3, [pc, #180]	; (d45d8 <_Z9menuCheckv+0xe0>)
   d4522:	6018      	str	r0, [r3, #0]
  }
  if (menuCount == 1) {encPosition = twist.getCount();  
   d4524:	7823      	ldrb	r3, [r4, #0]
   d4526:	2b01      	cmp	r3, #1
   d4528:	d10c      	bne.n	d4544 <_Z9menuCheckv+0x4c>
   d452a:	4828      	ldr	r0, [pc, #160]	; (d45cc <_Z9menuCheckv+0xd4>)
   d452c:	4d28      	ldr	r5, [pc, #160]	; (d45d0 <_Z9menuCheckv+0xd8>)
   d452e:	f001 fc20 	bl	d5d72 <_ZN5TWIST8getCountEv>
   d4532:	6028      	str	r0, [r5, #0]
    encPosition = twist.getCount();
   d4534:	4825      	ldr	r0, [pc, #148]	; (d45cc <_Z9menuCheckv+0xd4>)
   d4536:	f001 fc1c 	bl	d5d72 <_ZN5TWIST8getCountEv>
    pm1H = encPosition;
   d453a:	4b28      	ldr	r3, [pc, #160]	; (d45dc <_Z9menuCheckv+0xe4>)
    encPosition = twist.getCount();
    pm1L = encPosition;
    pm1Llast = pm1L;
  }
  if (menuCount == 1) {encPosition = twist.getCount();  
    encPosition = twist.getCount();
   d453c:	6028      	str	r0, [r5, #0]
    pm1H = encPosition;
   d453e:	6018      	str	r0, [r3, #0]
    pm1Hlast = pm1H;
   d4540:	4b27      	ldr	r3, [pc, #156]	; (d45e0 <_Z9menuCheckv+0xe8>)
   d4542:	6018      	str	r0, [r3, #0]
  }
  if (menuCount == 2) {encPosition = twist.getCount();  
   d4544:	7823      	ldrb	r3, [r4, #0]
   d4546:	2b02      	cmp	r3, #2
   d4548:	d10c      	bne.n	d4564 <_Z9menuCheckv+0x6c>
   d454a:	4820      	ldr	r0, [pc, #128]	; (d45cc <_Z9menuCheckv+0xd4>)
   d454c:	4d20      	ldr	r5, [pc, #128]	; (d45d0 <_Z9menuCheckv+0xd8>)
   d454e:	f001 fc10 	bl	d5d72 <_ZN5TWIST8getCountEv>
   d4552:	6028      	str	r0, [r5, #0]
    encPosition = twist.getCount();
   d4554:	481d      	ldr	r0, [pc, #116]	; (d45cc <_Z9menuCheckv+0xd4>)
   d4556:	f001 fc0c 	bl	d5d72 <_ZN5TWIST8getCountEv>
    pm25L = encPosition;
   d455a:	4b22      	ldr	r3, [pc, #136]	; (d45e4 <_Z9menuCheckv+0xec>)
    encPosition = twist.getCount();
    pm1H = encPosition;
    pm1Hlast = pm1H;
  }
  if (menuCount == 2) {encPosition = twist.getCount();  
    encPosition = twist.getCount();
   d455c:	6028      	str	r0, [r5, #0]
    pm25L = encPosition;
   d455e:	6018      	str	r0, [r3, #0]
    pm25Llast = pm25L;
   d4560:	4b21      	ldr	r3, [pc, #132]	; (d45e8 <_Z9menuCheckv+0xf0>)
   d4562:	6018      	str	r0, [r3, #0]
  }
  if (menuCount == 3) {encPosition = twist.getCount();  
   d4564:	7823      	ldrb	r3, [r4, #0]
   d4566:	2b03      	cmp	r3, #3
   d4568:	d10c      	bne.n	d4584 <_Z9menuCheckv+0x8c>
   d456a:	4818      	ldr	r0, [pc, #96]	; (d45cc <_Z9menuCheckv+0xd4>)
   d456c:	4d18      	ldr	r5, [pc, #96]	; (d45d0 <_Z9menuCheckv+0xd8>)
   d456e:	f001 fc00 	bl	d5d72 <_ZN5TWIST8getCountEv>
   d4572:	6028      	str	r0, [r5, #0]
    encPosition = twist.getCount();
   d4574:	4815      	ldr	r0, [pc, #84]	; (d45cc <_Z9menuCheckv+0xd4>)
   d4576:	f001 fbfc 	bl	d5d72 <_ZN5TWIST8getCountEv>
    pm25H = encPosition;
   d457a:	4b1c      	ldr	r3, [pc, #112]	; (d45ec <_Z9menuCheckv+0xf4>)
    encPosition = twist.getCount();
    pm25L = encPosition;
    pm25Llast = pm25L;
  }
  if (menuCount == 3) {encPosition = twist.getCount();  
    encPosition = twist.getCount();
   d457c:	6028      	str	r0, [r5, #0]
    pm25H = encPosition;
   d457e:	6018      	str	r0, [r3, #0]
    pm25Hlast = pm25H;
   d4580:	4b1b      	ldr	r3, [pc, #108]	; (d45f0 <_Z9menuCheckv+0xf8>)
   d4582:	6018      	str	r0, [r3, #0]
  }
  if (menuCount == 4) {encPosition = twist.getCount(); 
   d4584:	7823      	ldrb	r3, [r4, #0]
   d4586:	2b04      	cmp	r3, #4
   d4588:	d10c      	bne.n	d45a4 <_Z9menuCheckv+0xac>
   d458a:	4810      	ldr	r0, [pc, #64]	; (d45cc <_Z9menuCheckv+0xd4>)
   d458c:	4d10      	ldr	r5, [pc, #64]	; (d45d0 <_Z9menuCheckv+0xd8>)
   d458e:	f001 fbf0 	bl	d5d72 <_ZN5TWIST8getCountEv>
   d4592:	6028      	str	r0, [r5, #0]
    encPosition = twist.getCount();
   d4594:	480d      	ldr	r0, [pc, #52]	; (d45cc <_Z9menuCheckv+0xd4>)
   d4596:	f001 fbec 	bl	d5d72 <_ZN5TWIST8getCountEv>
    pm10L = encPosition;
   d459a:	4b16      	ldr	r3, [pc, #88]	; (d45f4 <_Z9menuCheckv+0xfc>)
    encPosition = twist.getCount();
    pm25H = encPosition;
    pm25Hlast = pm25H;
  }
  if (menuCount == 4) {encPosition = twist.getCount(); 
    encPosition = twist.getCount();
   d459c:	6028      	str	r0, [r5, #0]
    pm10L = encPosition;
   d459e:	6018      	str	r0, [r3, #0]
    pm10Llast = pm10L;
   d45a0:	4b15      	ldr	r3, [pc, #84]	; (d45f8 <_Z9menuCheckv+0x100>)
   d45a2:	6018      	str	r0, [r3, #0]
  }
  if (menuCount == 5) {encPosition = twist.getCount();  
   d45a4:	7823      	ldrb	r3, [r4, #0]
   d45a6:	2b05      	cmp	r3, #5
   d45a8:	d10c      	bne.n	d45c4 <_Z9menuCheckv+0xcc>
   d45aa:	4808      	ldr	r0, [pc, #32]	; (d45cc <_Z9menuCheckv+0xd4>)
   d45ac:	4c08      	ldr	r4, [pc, #32]	; (d45d0 <_Z9menuCheckv+0xd8>)
   d45ae:	f001 fbe0 	bl	d5d72 <_ZN5TWIST8getCountEv>
   d45b2:	6020      	str	r0, [r4, #0]
    encPosition = twist.getCount();
   d45b4:	4805      	ldr	r0, [pc, #20]	; (d45cc <_Z9menuCheckv+0xd4>)
   d45b6:	f001 fbdc 	bl	d5d72 <_ZN5TWIST8getCountEv>
    pm10H = encPosition;
   d45ba:	4b10      	ldr	r3, [pc, #64]	; (d45fc <_Z9menuCheckv+0x104>)
    encPosition = twist.getCount();
    pm10L = encPosition;
    pm10Llast = pm10L;
  }
  if (menuCount == 5) {encPosition = twist.getCount();  
    encPosition = twist.getCount();
   d45bc:	6020      	str	r0, [r4, #0]
    pm10H = encPosition;
   d45be:	6018      	str	r0, [r3, #0]
    pm10Hlast = pm10H;
   d45c0:	4b0f      	ldr	r3, [pc, #60]	; (d4600 <_Z9menuCheckv+0x108>)
   d45c2:	6018      	str	r0, [r3, #0]
   d45c4:	bd38      	pop	{r3, r4, r5, pc}
   d45c6:	bf00      	nop
   d45c8:	2003e282 	.word	0x2003e282
   d45cc:	2003e258 	.word	0x2003e258
   d45d0:	2003e334 	.word	0x2003e334
   d45d4:	2003e288 	.word	0x2003e288
   d45d8:	2003ddd8 	.word	0x2003ddd8
   d45dc:	2003e284 	.word	0x2003e284
   d45e0:	2003ddc8 	.word	0x2003ddc8
   d45e4:	2003e2a8 	.word	0x2003e2a8
   d45e8:	2003dda8 	.word	0x2003dda8
   d45ec:	2003e28c 	.word	0x2003e28c
   d45f0:	2003dda0 	.word	0x2003dda0
   d45f4:	2003e33c 	.word	0x2003e33c
   d45f8:	2003ddd0 	.word	0x2003ddd0
   d45fc:	2003e340 	.word	0x2003e340
   d4600:	2003ddd4 	.word	0x2003ddd4

000d4604 <_ZN5Print5printIiLi0EEEjT_i>:

};

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
   d4604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4608:	4607      	mov	r7, r0
   d460a:	460c      	mov	r4, r1
{
    if (base == 0) {
   d460c:	4615      	mov	r5, r2
   d460e:	b92a      	cbnz	r2, d461c <_ZN5Print5printIiLi0EEEjT_i+0x18>
        return write(n);
   d4610:	6803      	ldr	r3, [r0, #0]
   d4612:	b2c9      	uxtb	r1, r1
   d4614:	689b      	ldr	r3, [r3, #8]
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
    }
}
   d4616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
   d461a:	4718      	bx	r3
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d461c:	2900      	cmp	r1, #0
   d461e:	da07      	bge.n	d4630 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
   d4620:	2a0a      	cmp	r2, #10
   d4622:	d105      	bne.n	d4630 <_ZN5Print5printIiLi0EEEjT_i+0x2c>
            t = print('-');
   d4624:	212d      	movs	r1, #45	; 0x2d
   d4626:	f002 f84b 	bl	d66c0 <_ZN5Print5printEc>
            val = -n;
   d462a:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d462c:	4606      	mov	r6, r0
            val = -n;
   d462e:	e001      	b.n	d4634 <_ZN5Print5printIiLi0EEEjT_i+0x30>
        } else {
            val = n;
   d4630:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d4632:	2600      	movs	r6, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4634:	b2ea      	uxtb	r2, r5
   d4636:	4638      	mov	r0, r7
   d4638:	f002 f85b 	bl	d66f2 <_ZN5Print11printNumberEmh>
    }
}
   d463c:	4430      	add	r0, r6
   d463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4642 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d4642:	b538      	push	{r3, r4, r5, lr}
   d4644:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d4646:	f7ff ffdd 	bl	d4604 <_ZN5Print5printIiLi0EEEjT_i>
   d464a:	4604      	mov	r4, r0
        n += println();
   d464c:	4628      	mov	r0, r5
   d464e:	f002 f83a 	bl	d66c6 <_ZN5Print7printlnEv>
        return n;
    }
   d4652:	4420      	add	r0, r4
   d4654:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4658 <_Z10Parametersv>:
    jw.insertKeyValue("Dust10", p10);
  }
  Particle.publish("DustReadings", jw.getBuffer(),PRIVATE) ;
}

void Parameters() {
   d4658:	b510      	push	{r4, lr}
    encPosition = twist.getCount();
   d465a:	4863      	ldr	r0, [pc, #396]	; (d47e8 <_Z10Parametersv+0x190>)
    while(menuState == true){
   d465c:	4c63      	ldr	r4, [pc, #396]	; (d47ec <_Z10Parametersv+0x194>)
  }
  Particle.publish("DustReadings", jw.getBuffer(),PRIVATE) ;
}

void Parameters() {
    encPosition = twist.getCount();
   d465e:	f001 fb88 	bl	d5d72 <_ZN5TWIST8getCountEv>
   d4662:	4b63      	ldr	r3, [pc, #396]	; (d47f0 <_Z10Parametersv+0x198>)
   d4664:	6018      	str	r0, [r3, #0]
    while(menuState == true){
   d4666:	7823      	ldrb	r3, [r4, #0]
   d4668:	2b00      	cmp	r3, #0
   d466a:	f000 80bb 	beq.w	d47e4 <_Z10Parametersv+0x18c>
        Serial.println("Im in the menu");
   d466e:	f002 fcc3 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4672:	4960      	ldr	r1, [pc, #384]	; (d47f4 <_Z10Parametersv+0x19c>)
   d4674:	f002 f833 	bl	d66de <_ZN5Print7printlnEPKc>
        menuCheck();
   d4678:	f7ff ff3e 	bl	d44f8 <_Z9menuCheckv>
        display.clearDisplay();
   d467c:	485e      	ldr	r0, [pc, #376]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d467e:	f000 fd3d 	bl	d50fc <_ZN16Adafruit_SSD130612clearDisplayEv>
        display.setTextSize(1);
   d4682:	2101      	movs	r1, #1
   d4684:	485c      	ldr	r0, [pc, #368]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4686:	f001 f8ab 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
        display.setCursor(10, 0);
   d468a:	2200      	movs	r2, #0
   d468c:	210a      	movs	r1, #10
   d468e:	485a      	ldr	r0, [pc, #360]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4690:	f001 f8a3 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.print("pm1.0 Low:");
   d4694:	4959      	ldr	r1, [pc, #356]	; (d47fc <_Z10Parametersv+0x1a4>)
   d4696:	4858      	ldr	r0, [pc, #352]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4698:	f002 f80e 	bl	d66b8 <_ZN5Print5printEPKc>
        display.setCursor(75, 0);
   d469c:	2200      	movs	r2, #0
   d469e:	214b      	movs	r1, #75	; 0x4b
   d46a0:	4855      	ldr	r0, [pc, #340]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d46a2:	f001 f89a 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println(pm1Llast);
   d46a6:	4b56      	ldr	r3, [pc, #344]	; (d4800 <_Z10Parametersv+0x1a8>)
   d46a8:	4853      	ldr	r0, [pc, #332]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d46aa:	6819      	ldr	r1, [r3, #0]
   d46ac:	220a      	movs	r2, #10
   d46ae:	f7ff ffc8 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
    menu.tick();menuB.tick();
   d46b2:	4854      	ldr	r0, [pc, #336]	; (d4804 <_Z10Parametersv+0x1ac>)
   d46b4:	f001 faff 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d46b8:	4853      	ldr	r0, [pc, #332]	; (d4808 <_Z10Parametersv+0x1b0>)
   d46ba:	f001 fafc 	bl	d5cb6 <_ZN9OneButton4tickEv>
        display.setCursor(10, 10);
   d46be:	220a      	movs	r2, #10
   d46c0:	4611      	mov	r1, r2
   d46c2:	484d      	ldr	r0, [pc, #308]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d46c4:	f001 f889 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println("pm1.0 High:");
   d46c8:	4950      	ldr	r1, [pc, #320]	; (d480c <_Z10Parametersv+0x1b4>)
   d46ca:	484b      	ldr	r0, [pc, #300]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d46cc:	f002 f807 	bl	d66de <_ZN5Print7printlnEPKc>
        display.setCursor(75, 10);
   d46d0:	220a      	movs	r2, #10
   d46d2:	214b      	movs	r1, #75	; 0x4b
   d46d4:	4848      	ldr	r0, [pc, #288]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d46d6:	f001 f880 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println(pm1Hlast);
   d46da:	4b4d      	ldr	r3, [pc, #308]	; (d4810 <_Z10Parametersv+0x1b8>)
   d46dc:	4846      	ldr	r0, [pc, #280]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d46de:	6819      	ldr	r1, [r3, #0]
   d46e0:	220a      	movs	r2, #10
   d46e2:	f7ff ffae 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
    menu.tick();menuB.tick();
   d46e6:	4847      	ldr	r0, [pc, #284]	; (d4804 <_Z10Parametersv+0x1ac>)
   d46e8:	f001 fae5 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d46ec:	4846      	ldr	r0, [pc, #280]	; (d4808 <_Z10Parametersv+0x1b0>)
   d46ee:	f001 fae2 	bl	d5cb6 <_ZN9OneButton4tickEv>
        display.setCursor(10, 20);
   d46f2:	2214      	movs	r2, #20
   d46f4:	210a      	movs	r1, #10
   d46f6:	4840      	ldr	r0, [pc, #256]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d46f8:	f001 f86f 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println("pm2.5 Low:");
   d46fc:	4945      	ldr	r1, [pc, #276]	; (d4814 <_Z10Parametersv+0x1bc>)
   d46fe:	483e      	ldr	r0, [pc, #248]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4700:	f001 ffed 	bl	d66de <_ZN5Print7printlnEPKc>
        display.setCursor(75, 20);
   d4704:	2214      	movs	r2, #20
   d4706:	214b      	movs	r1, #75	; 0x4b
   d4708:	483b      	ldr	r0, [pc, #236]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d470a:	f001 f866 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println(pm25Llast);
   d470e:	4b42      	ldr	r3, [pc, #264]	; (d4818 <_Z10Parametersv+0x1c0>)
   d4710:	4839      	ldr	r0, [pc, #228]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4712:	6819      	ldr	r1, [r3, #0]
   d4714:	220a      	movs	r2, #10
   d4716:	f7ff ff94 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
    menu.tick();menuB.tick();
   d471a:	483a      	ldr	r0, [pc, #232]	; (d4804 <_Z10Parametersv+0x1ac>)
   d471c:	f001 facb 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d4720:	4839      	ldr	r0, [pc, #228]	; (d4808 <_Z10Parametersv+0x1b0>)
   d4722:	f001 fac8 	bl	d5cb6 <_ZN9OneButton4tickEv>
        display.setCursor(10, 30);
   d4726:	221e      	movs	r2, #30
   d4728:	210a      	movs	r1, #10
   d472a:	4833      	ldr	r0, [pc, #204]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d472c:	f001 f855 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.print("pm2.5 High:");
   d4730:	493a      	ldr	r1, [pc, #232]	; (d481c <_Z10Parametersv+0x1c4>)
   d4732:	4831      	ldr	r0, [pc, #196]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4734:	f001 ffc0 	bl	d66b8 <_ZN5Print5printEPKc>
        display.setCursor(75, 30);
   d4738:	221e      	movs	r2, #30
   d473a:	214b      	movs	r1, #75	; 0x4b
   d473c:	482e      	ldr	r0, [pc, #184]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d473e:	f001 f84c 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println(pm25Hlast);
   d4742:	4b37      	ldr	r3, [pc, #220]	; (d4820 <_Z10Parametersv+0x1c8>)
   d4744:	482c      	ldr	r0, [pc, #176]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4746:	6819      	ldr	r1, [r3, #0]
   d4748:	220a      	movs	r2, #10
   d474a:	f7ff ff7a 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
    menu.tick();menuB.tick();
   d474e:	482d      	ldr	r0, [pc, #180]	; (d4804 <_Z10Parametersv+0x1ac>)
   d4750:	f001 fab1 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d4754:	482c      	ldr	r0, [pc, #176]	; (d4808 <_Z10Parametersv+0x1b0>)
   d4756:	f001 faae 	bl	d5cb6 <_ZN9OneButton4tickEv>
        display.setCursor(10, 40);
   d475a:	2228      	movs	r2, #40	; 0x28
   d475c:	210a      	movs	r1, #10
   d475e:	4826      	ldr	r0, [pc, #152]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4760:	f001 f83b 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println("pm10 Low:");
   d4764:	492f      	ldr	r1, [pc, #188]	; (d4824 <_Z10Parametersv+0x1cc>)
   d4766:	4824      	ldr	r0, [pc, #144]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4768:	f001 ffb9 	bl	d66de <_ZN5Print7printlnEPKc>
        display.setCursor(75, 40);
   d476c:	2228      	movs	r2, #40	; 0x28
   d476e:	214b      	movs	r1, #75	; 0x4b
   d4770:	4821      	ldr	r0, [pc, #132]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4772:	f001 f832 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println(pm10Llast);
   d4776:	4b2c      	ldr	r3, [pc, #176]	; (d4828 <_Z10Parametersv+0x1d0>)
   d4778:	481f      	ldr	r0, [pc, #124]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d477a:	6819      	ldr	r1, [r3, #0]
   d477c:	220a      	movs	r2, #10
   d477e:	f7ff ff60 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
    menu.tick();menuB.tick();
   d4782:	4820      	ldr	r0, [pc, #128]	; (d4804 <_Z10Parametersv+0x1ac>)
   d4784:	f001 fa97 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d4788:	481f      	ldr	r0, [pc, #124]	; (d4808 <_Z10Parametersv+0x1b0>)
   d478a:	f001 fa94 	bl	d5cb6 <_ZN9OneButton4tickEv>
        display.setCursor(10, 50);
   d478e:	2232      	movs	r2, #50	; 0x32
   d4790:	210a      	movs	r1, #10
   d4792:	4819      	ldr	r0, [pc, #100]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d4794:	f001 f821 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println("pm10 High:");
   d4798:	4924      	ldr	r1, [pc, #144]	; (d482c <_Z10Parametersv+0x1d4>)
   d479a:	4817      	ldr	r0, [pc, #92]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d479c:	f001 ff9f 	bl	d66de <_ZN5Print7printlnEPKc>
        display.setCursor(75, 50);
   d47a0:	2232      	movs	r2, #50	; 0x32
   d47a2:	214b      	movs	r1, #75	; 0x4b
   d47a4:	4814      	ldr	r0, [pc, #80]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d47a6:	f001 f818 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println(pm10Hlast);
   d47aa:	4b21      	ldr	r3, [pc, #132]	; (d4830 <_Z10Parametersv+0x1d8>)
   d47ac:	4812      	ldr	r0, [pc, #72]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d47ae:	6819      	ldr	r1, [r3, #0]
   d47b0:	220a      	movs	r2, #10
   d47b2:	f7ff ff46 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
    menu.tick();menuB.tick();
   d47b6:	4813      	ldr	r0, [pc, #76]	; (d4804 <_Z10Parametersv+0x1ac>)
   d47b8:	f001 fa7d 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d47bc:	4812      	ldr	r0, [pc, #72]	; (d4808 <_Z10Parametersv+0x1b0>)
   d47be:	f001 fa7a 	bl	d5cb6 <_ZN9OneButton4tickEv>
        display.setCursor(2, menuCount * 10);
   d47c2:	4b1c      	ldr	r3, [pc, #112]	; (d4834 <_Z10Parametersv+0x1dc>)
   d47c4:	480c      	ldr	r0, [pc, #48]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d47c6:	781a      	ldrb	r2, [r3, #0]
   d47c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   d47cc:	0052      	lsls	r2, r2, #1
   d47ce:	2102      	movs	r1, #2
   d47d0:	f001 f803 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
        display.println(">");
   d47d4:	4918      	ldr	r1, [pc, #96]	; (d4838 <_Z10Parametersv+0x1e0>)
   d47d6:	4808      	ldr	r0, [pc, #32]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d47d8:	f001 ff81 	bl	d66de <_ZN5Print7printlnEPKc>
        display.display();
   d47dc:	4806      	ldr	r0, [pc, #24]	; (d47f8 <_Z10Parametersv+0x1a0>)
   d47de:	f000 fdc7 	bl	d5370 <_ZN16Adafruit_SSD13067displayEv>
  Particle.publish("DustReadings", jw.getBuffer(),PRIVATE) ;
}

void Parameters() {
    encPosition = twist.getCount();
    while(menuState == true){
   d47e2:	e740      	b.n	d4666 <_Z10Parametersv+0xe>
   d47e4:	bd10      	pop	{r4, pc}
   d47e6:	bf00      	nop
   d47e8:	2003e258 	.word	0x2003e258
   d47ec:	2003e2a0 	.word	0x2003e2a0
   d47f0:	2003e334 	.word	0x2003e334
   d47f4:	000d7bdf 	.word	0x000d7bdf
   d47f8:	2003e2ac 	.word	0x2003e2ac
   d47fc:	000d7bee 	.word	0x000d7bee
   d4800:	2003ddd8 	.word	0x2003ddd8
   d4804:	2003e2d0 	.word	0x2003e2d0
   d4808:	2003e35c 	.word	0x2003e35c
   d480c:	000d7bf9 	.word	0x000d7bf9
   d4810:	2003ddc8 	.word	0x2003ddc8
   d4814:	000d7c05 	.word	0x000d7c05
   d4818:	2003dda8 	.word	0x2003dda8
   d481c:	000d7c10 	.word	0x000d7c10
   d4820:	2003dda0 	.word	0x2003dda0
   d4824:	000d7c1c 	.word	0x000d7c1c
   d4828:	2003ddd0 	.word	0x2003ddd0
   d482c:	000d7c26 	.word	0x000d7c26
   d4830:	2003ddd4 	.word	0x2003ddd4
   d4834:	2003e282 	.word	0x2003e282
   d4838:	000d7c31 	.word	0x000d7c31

000d483c <_Z9printDust6StringS_S_>:
        delay(500);
    }menu.tick();Parameters();
    createEventPayLoad (PM1, PM25, PM10) ;
}

void printDust(String pm1, String pm25, String pm10) {
   d483c:	b538      	push	{r3, r4, r5, lr}
    display.clearDisplay();
   d483e:	4c31      	ldr	r4, [pc, #196]	; (d4904 <_Z9printDust6StringS_S_+0xc8>)
    display.setCursor(0,0);
    display.print("PM1.0: ");
    display.setTextSize(2);
    display.print(PM1);
    display.setTextSize(1);
    display.println("ug/m3");
   d4840:	4d31      	ldr	r5, [pc, #196]	; (d4908 <_Z9printDust6StringS_S_+0xcc>)
    }menu.tick();Parameters();
    createEventPayLoad (PM1, PM25, PM10) ;
}

void printDust(String pm1, String pm25, String pm10) {
    display.clearDisplay();
   d4842:	4620      	mov	r0, r4
   d4844:	f000 fc5a 	bl	d50fc <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   d4848:	4620      	mov	r0, r4
   d484a:	2101      	movs	r1, #1
   d484c:	f000 ffc8 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setTextColor(WHITE);
   d4850:	4620      	mov	r0, r4
   d4852:	2101      	movs	r1, #1
   d4854:	f000 ffc9 	bl	d57ea <_ZN12Adafruit_GFX12setTextColorEt>
    display.setCursor(0,0);
   d4858:	2200      	movs	r2, #0
   d485a:	4611      	mov	r1, r2
   d485c:	4620      	mov	r0, r4
   d485e:	f000 ffbc 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
    display.print("PM1.0: ");
   d4862:	492a      	ldr	r1, [pc, #168]	; (d490c <_Z9printDust6StringS_S_+0xd0>)
   d4864:	4620      	mov	r0, r4
   d4866:	f001 ff27 	bl	d66b8 <_ZN5Print5printEPKc>
    display.setTextSize(2);
   d486a:	4620      	mov	r0, r4
   d486c:	2102      	movs	r1, #2
   d486e:	f000 ffb7 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.print(PM1);
   d4872:	4b27      	ldr	r3, [pc, #156]	; (d4910 <_Z9printDust6StringS_S_+0xd4>)
   d4874:	220a      	movs	r2, #10
   d4876:	6819      	ldr	r1, [r3, #0]
   d4878:	4620      	mov	r0, r4
   d487a:	f7ff fec3 	bl	d4604 <_ZN5Print5printIiLi0EEEjT_i>
    display.setTextSize(1);
   d487e:	4620      	mov	r0, r4
   d4880:	2101      	movs	r1, #1
   d4882:	f000 ffad 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.println("ug/m3");
   d4886:	4629      	mov	r1, r5
   d4888:	4620      	mov	r0, r4
   d488a:	f001 ff28 	bl	d66de <_ZN5Print7printlnEPKc>
    display.setCursor(0,25);
   d488e:	2219      	movs	r2, #25
   d4890:	4620      	mov	r0, r4
   d4892:	2100      	movs	r1, #0
   d4894:	f000 ffa1 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
    display.print("PM2.5: ");
   d4898:	491e      	ldr	r1, [pc, #120]	; (d4914 <_Z9printDust6StringS_S_+0xd8>)
   d489a:	4620      	mov	r0, r4
   d489c:	f001 ff0c 	bl	d66b8 <_ZN5Print5printEPKc>
    display.setTextSize(2);
   d48a0:	4620      	mov	r0, r4
   d48a2:	2102      	movs	r1, #2
   d48a4:	f000 ff9c 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.print(PM25);
   d48a8:	4b1b      	ldr	r3, [pc, #108]	; (d4918 <_Z9printDust6StringS_S_+0xdc>)
   d48aa:	220a      	movs	r2, #10
   d48ac:	6819      	ldr	r1, [r3, #0]
   d48ae:	4620      	mov	r0, r4
   d48b0:	f7ff fea8 	bl	d4604 <_ZN5Print5printIiLi0EEEjT_i>
    display.setTextSize(1);
   d48b4:	4620      	mov	r0, r4
   d48b6:	2101      	movs	r1, #1
   d48b8:	f000 ff92 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.println("ug/m3");
   d48bc:	4629      	mov	r1, r5
   d48be:	4620      	mov	r0, r4
   d48c0:	f001 ff0d 	bl	d66de <_ZN5Print7printlnEPKc>
    display.setCursor(0,50);
   d48c4:	2232      	movs	r2, #50	; 0x32
   d48c6:	4620      	mov	r0, r4
   d48c8:	2100      	movs	r1, #0
   d48ca:	f000 ff86 	bl	d57da <_ZN12Adafruit_GFX9setCursorEss>
    display.print("PM10:  ");
   d48ce:	4913      	ldr	r1, [pc, #76]	; (d491c <_Z9printDust6StringS_S_+0xe0>)
   d48d0:	4620      	mov	r0, r4
   d48d2:	f001 fef1 	bl	d66b8 <_ZN5Print5printEPKc>
    display.setTextSize(2);
   d48d6:	4620      	mov	r0, r4
   d48d8:	2102      	movs	r1, #2
   d48da:	f000 ff81 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.print(PM10);
   d48de:	4b10      	ldr	r3, [pc, #64]	; (d4920 <_Z9printDust6StringS_S_+0xe4>)
   d48e0:	220a      	movs	r2, #10
   d48e2:	6819      	ldr	r1, [r3, #0]
   d48e4:	4620      	mov	r0, r4
   d48e6:	f7ff fe8d 	bl	d4604 <_ZN5Print5printIiLi0EEEjT_i>
    display.setTextSize(1);
   d48ea:	4620      	mov	r0, r4
   d48ec:	2101      	movs	r1, #1
   d48ee:	f000 ff77 	bl	d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>
    display.println("ug/m3");
   d48f2:	4629      	mov	r1, r5
   d48f4:	4620      	mov	r0, r4
   d48f6:	f001 fef2 	bl	d66de <_ZN5Print7printlnEPKc>
    display.display();
   d48fa:	4620      	mov	r0, r4
}
   d48fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    display.print("PM10:  ");
    display.setTextSize(2);
    display.print(PM10);
    display.setTextSize(1);
    display.println("ug/m3");
    display.display();
   d4900:	f000 bd36 	b.w	d5370 <_ZN16Adafruit_SSD13067displayEv>
   d4904:	2003e2ac 	.word	0x2003e2ac
   d4908:	000d7c3b 	.word	0x000d7c3b
   d490c:	000d7c33 	.word	0x000d7c33
   d4910:	2003e2a4 	.word	0x2003e2a4
   d4914:	000d7c41 	.word	0x000d7c41
   d4918:	2003e348 	.word	0x2003e348
   d491c:	000d7c49 	.word	0x000d7c49
   d4920:	2003e260 	.word	0x2003e260

000d4924 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d4924:	b570      	push	{r4, r5, r6, lr}
   d4926:	4604      	mov	r4, r0
   d4928:	460e      	mov	r6, r1
   d492a:	4615      	mov	r5, r2
		insertCheckSeparator();
   d492c:	f001 f89a 	bl	d5a64 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4930:	2201      	movs	r2, #1
   d4932:	4631      	mov	r1, r6
   d4934:	4620      	mov	r0, r4
   d4936:	f001 f809 	bl	d594c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d493a:	4620      	mov	r0, r4
   d493c:	213a      	movs	r1, #58	; 0x3a
   d493e:	f000 ffb9 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d4942:	462a      	mov	r2, r5
   d4944:	4620      	mov	r0, r4
   d4946:	4902      	ldr	r1, [pc, #8]	; (d4950 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d4948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d494c:	f000 bff1 	b.w	d5932 <_ZN10JsonWriter13insertsprintfEPKcz>
   d4950:	000d7c51 	.word	0x000d7c51

000d4954 <_Z18createEventPayLoadiii>:
}

void createEventPayLoad (int p1 , int p25 , int p10 ) {
   d4954:	b570      	push	{r4, r5, r6, lr}
   d4956:	b0d2      	sub	sp, #328	; 0x148
   d4958:	4614      	mov	r4, r2
   d495a:	4606      	mov	r6, r0
   d495c:	460d      	mov	r5, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d495e:	f44f 7280 	mov.w	r2, #256	; 0x100
   d4962:	a912      	add	r1, sp, #72	; 0x48
   d4964:	a806      	add	r0, sp, #24
   d4966:	f000 ff93 	bl	d5890 <_ZN10JsonWriterC1EPcj>
   d496a:	4b1e      	ldr	r3, [pc, #120]	; (d49e4 <_Z18createEventPayLoadiii+0x90>)
   d496c:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d496e:	227d      	movs	r2, #125	; 0x7d
   d4970:	217b      	movs	r1, #123	; 0x7b
   d4972:	a806      	add	r0, sp, #24
   d4974:	f001 f881 	bl	d5a7a <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw; {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Dust1", p1);
   d4978:	4632      	mov	r2, r6
   d497a:	491b      	ldr	r1, [pc, #108]	; (d49e8 <_Z18createEventPayLoadiii+0x94>)
   d497c:	a806      	add	r0, sp, #24
   d497e:	f7ff ffd1 	bl	d4924 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Dust25", p25);
   d4982:	462a      	mov	r2, r5
   d4984:	4919      	ldr	r1, [pc, #100]	; (d49ec <_Z18createEventPayLoadiii+0x98>)
   d4986:	a806      	add	r0, sp, #24
   d4988:	f7ff ffcc 	bl	d4924 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Dust10", p10);
   d498c:	4622      	mov	r2, r4
   d498e:	4918      	ldr	r1, [pc, #96]	; (d49f0 <_Z18createEventPayLoadiii+0x9c>)
   d4990:	a806      	add	r0, sp, #24
   d4992:	f7ff ffc7 	bl	d4924 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d4996:	a806      	add	r0, sp, #24
   d4998:	f000 ff9a 	bl	d58d0 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d499c:	9b07      	ldr	r3, [sp, #28]
   d499e:	9303      	str	r3, [sp, #12]
   d49a0:	4b14      	ldr	r3, [pc, #80]	; (d49f4 <_Z18createEventPayLoadiii+0xa0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d49a2:	9a03      	ldr	r2, [sp, #12]
   d49a4:	781b      	ldrb	r3, [r3, #0]
   d49a6:	f88d 3000 	strb.w	r3, [sp]
   d49aa:	4913      	ldr	r1, [pc, #76]	; (d49f8 <_Z18createEventPayLoadiii+0xa4>)
   d49ac:	233c      	movs	r3, #60	; 0x3c
   d49ae:	a804      	add	r0, sp, #16
   d49b0:	f002 f8cc 	bl	d6b4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d49b4:	9c05      	ldr	r4, [sp, #20]
   d49b6:	b17c      	cbz	r4, d49d8 <_Z18createEventPayLoadiii+0x84>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d49b8:	6863      	ldr	r3, [r4, #4]
   d49ba:	3b01      	subs	r3, #1
   d49bc:	6063      	str	r3, [r4, #4]
   d49be:	b95b      	cbnz	r3, d49d8 <_Z18createEventPayLoadiii+0x84>
        {
          _M_dispose();
   d49c0:	6823      	ldr	r3, [r4, #0]
   d49c2:	4620      	mov	r0, r4
   d49c4:	689b      	ldr	r3, [r3, #8]
   d49c6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d49c8:	68a3      	ldr	r3, [r4, #8]
   d49ca:	3b01      	subs	r3, #1
   d49cc:	60a3      	str	r3, [r4, #8]
   d49ce:	b91b      	cbnz	r3, d49d8 <_Z18createEventPayLoadiii+0x84>
            _M_destroy();
   d49d0:	6823      	ldr	r3, [r4, #0]
   d49d2:	4620      	mov	r0, r4
   d49d4:	68db      	ldr	r3, [r3, #12]
   d49d6:	4798      	blx	r3
    display.println("ug/m3");
    display.display();
}

void createEventPayLoad (int p1 , int p25 , int p10 ) {
  JsonWriterStatic<256> jw; {
   d49d8:	a806      	add	r0, sp, #24
   d49da:	f7ff fc0d 	bl	d41f8 <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Dust1", p1);
    jw.insertKeyValue("Dust25", p25);
    jw.insertKeyValue("Dust10", p10);
  }
  Particle.publish("DustReadings", jw.getBuffer(),PRIVATE) ;
}
   d49de:	b052      	add	sp, #328	; 0x148
   d49e0:	bd70      	pop	{r4, r5, r6, pc}
   d49e2:	bf00      	nop
   d49e4:	000d7b38 	.word	0x000d7b38
   d49e8:	000d7c54 	.word	0x000d7c54
   d49ec:	000d7c5a 	.word	0x000d7c5a
   d49f0:	000d7c61 	.word	0x000d7c61
   d49f4:	2003e344 	.word	0x2003e344
   d49f8:	000d7c68 	.word	0x000d7c68

000d49fc <loop>:
    pinMode(ledG,OUTPUT);
    pinMode(buzzer,OUTPUT);
    delay(2000);
}

void loop() {
   d49fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for(int b = 0; b < 120; b++) {
        if (sensor.read_sensor_value(buf, 29)) {
   d4a00:	4c84      	ldr	r4, [pc, #528]	; (d4c14 <loop+0x218>)
   d4a02:	f8df 9268 	ldr.w	r9, [pc, #616]	; d4c6c <loop+0x270>
    pinMode(ledG,OUTPUT);
    pinMode(buzzer,OUTPUT);
    delay(2000);
}

void loop() {
   d4a06:	b08d      	sub	sp, #52	; 0x34
   d4a08:	f04f 0878 	mov.w	r8, #120	; 0x78
    for(int b = 0; b < 120; b++) {
        if (sensor.read_sensor_value(buf, 29)) {
   d4a0c:	221d      	movs	r2, #29
   d4a0e:	4981      	ldr	r1, [pc, #516]	; (d4c14 <loop+0x218>)
   d4a10:	4881      	ldr	r0, [pc, #516]	; (d4c18 <loop+0x21c>)
   d4a12:	f001 f87c 	bl	d5b0e <_ZN6HM330X17read_sensor_valueEPhm>
   d4a16:	b170      	cbz	r0, d4a36 <loop+0x3a>
            Serial.println("HM330X read result failed!!!");
   d4a18:	f002 faee 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4a1c:	497f      	ldr	r1, [pc, #508]	; (d4c1c <loop+0x220>)
   d4a1e:	f001 fe5e 	bl	d66de <_ZN5Print7printlnEPKc>
            digitalWrite(buzzer, HIGH);
   d4a22:	4b7f      	ldr	r3, [pc, #508]	; (d4c20 <loop+0x224>)
   d4a24:	2101      	movs	r1, #1
   d4a26:	8818      	ldrh	r0, [r3, #0]
   d4a28:	f002 fe0f 	bl	d764a <digitalWrite>
            Serial.println("lalala");
   d4a2c:	f002 fae4 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4a30:	497c      	ldr	r1, [pc, #496]	; (d4c24 <loop+0x228>)
   d4a32:	f001 fe54 	bl	d66de <_ZN5Print7printlnEPKc>
        }
        Serial.println("Starting Display");
   d4a36:	f002 fadf 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4a3a:	497b      	ldr	r1, [pc, #492]	; (d4c28 <loop+0x22c>)
        parse_result_value(buf);
        Serial.println("Printing Concentrations");
        parse_result(buf);
        Serial.println("PM2.5 Data");
        PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
   d4a3c:	4e7b      	ldr	r6, [pc, #492]	; (d4c2c <loop+0x230>)
        PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
        PM10 = (uint16_t) buf[7 *2] << 8 | buf[7 * 2 + 1];
   d4a3e:	4f7c      	ldr	r7, [pc, #496]	; (d4c30 <loop+0x234>)
        parse_result_value(buf);
        Serial.println("Printing Concentrations");
        parse_result(buf);
        Serial.println("PM2.5 Data");
        PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
        PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4a40:	4d7c      	ldr	r5, [pc, #496]	; (d4c34 <loop+0x238>)
   d4a42:	f8df b22c 	ldr.w	fp, [pc, #556]	; d4c70 <loop+0x274>
        if (sensor.read_sensor_value(buf, 29)) {
            Serial.println("HM330X read result failed!!!");
            digitalWrite(buzzer, HIGH);
            Serial.println("lalala");
        }
        Serial.println("Starting Display");
   d4a46:	f001 fe4a 	bl	d66de <_ZN5Print7printlnEPKc>
        parse_result_value(buf);
   d4a4a:	4872      	ldr	r0, [pc, #456]	; (d4c14 <loop+0x218>)
   d4a4c:	f7ff fc1a 	bl	d4284 <_Z18parse_result_valuePh>
        Serial.println("Printing Concentrations");
   d4a50:	f002 fad2 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4a54:	4978      	ldr	r1, [pc, #480]	; (d4c38 <loop+0x23c>)
   d4a56:	f001 fe42 	bl	d66de <_ZN5Print7printlnEPKc>
        parse_result(buf);
   d4a5a:	486e      	ldr	r0, [pc, #440]	; (d4c14 <loop+0x218>)
   d4a5c:	f7ff fbfa 	bl	d4254 <_Z12parse_resultPh>
        Serial.println("PM2.5 Data");
   d4a60:	f002 faca 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4a64:	4975      	ldr	r1, [pc, #468]	; (d4c3c <loop+0x240>)
   d4a66:	f001 fe3a 	bl	d66de <_ZN5Print7printlnEPKc>
        PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
   d4a6a:	7aa2      	ldrb	r2, [r4, #10]
   d4a6c:	7ae3      	ldrb	r3, [r4, #11]
        PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4a6e:	7b21      	ldrb	r1, [r4, #12]
        Serial.println("Starting Display");
        parse_result_value(buf);
        Serial.println("Printing Concentrations");
        parse_result(buf);
        Serial.println("PM2.5 Data");
        PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
   d4a70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4a74:	6033      	str	r3, [r6, #0]
        PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4a76:	7b63      	ldrb	r3, [r4, #13]
        PM10 = (uint16_t) buf[7 *2] << 8 | buf[7 * 2 + 1];
   d4a78:	7ba2      	ldrb	r2, [r4, #14]
        parse_result_value(buf);
        Serial.println("Printing Concentrations");
        parse_result(buf);
        Serial.println("PM2.5 Data");
        PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
        PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4a7a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
        PM10 = (uint16_t) buf[7 *2] << 8 | buf[7 * 2 + 1];
   d4a7e:	7be3      	ldrb	r3, [r4, #15]
        parse_result_value(buf);
        Serial.println("Printing Concentrations");
        parse_result(buf);
        Serial.println("PM2.5 Data");
        PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
        PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4a80:	6029      	str	r1, [r5, #0]
        PM10 = (uint16_t) buf[7 *2] << 8 | buf[7 * 2 + 1];
   d4a82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4a86:	603b      	str	r3, [r7, #0]
        print_result(str[6 - 1], PM25); menu.tick();Parameters();
   d4a88:	4b6d      	ldr	r3, [pc, #436]	; (d4c40 <loop+0x244>)
   d4a8a:	6958      	ldr	r0, [r3, #20]
   d4a8c:	f7ff fbc9 	bl	d4222 <_Z12print_resultPKct>
   d4a90:	486c      	ldr	r0, [pc, #432]	; (d4c44 <loop+0x248>)
   d4a92:	f001 f910 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d4a96:	f7ff fddf 	bl	d4658 <_Z10Parametersv>
        Serial.println("");Serial.println(PM1);Serial.println(PM25);Serial.println(PM10);
   d4a9a:	f002 faad 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4a9e:	496a      	ldr	r1, [pc, #424]	; (d4c48 <loop+0x24c>)
   d4aa0:	f001 fe1d 	bl	d66de <_ZN5Print7printlnEPKc>
   d4aa4:	f002 faa8 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4aa8:	220a      	movs	r2, #10
   d4aaa:	6831      	ldr	r1, [r6, #0]
   d4aac:	f7ff fdc9 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
   d4ab0:	f002 faa2 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4ab4:	220a      	movs	r2, #10
   d4ab6:	6829      	ldr	r1, [r5, #0]
   d4ab8:	f7ff fdc3 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
   d4abc:	f002 fa9c 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4ac0:	220a      	movs	r2, #10
   d4ac2:	6839      	ldr	r1, [r7, #0]
   d4ac4:	f7ff fdbd 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
        printDust(pm1,pm25,pm10);
   d4ac8:	4960      	ldr	r1, [pc, #384]	; (d4c4c <loop+0x250>)
   d4aca:	4668      	mov	r0, sp
   d4acc:	f001 fd73 	bl	d65b6 <_ZN6StringC1ERKS_>
   d4ad0:	495f      	ldr	r1, [pc, #380]	; (d4c50 <loop+0x254>)
   d4ad2:	a804      	add	r0, sp, #16
   d4ad4:	f001 fd6f 	bl	d65b6 <_ZN6StringC1ERKS_>
   d4ad8:	495e      	ldr	r1, [pc, #376]	; (d4c54 <loop+0x258>)
   d4ada:	a808      	add	r0, sp, #32
   d4adc:	f001 fd6b 	bl	d65b6 <_ZN6StringC1ERKS_>
   d4ae0:	aa08      	add	r2, sp, #32
   d4ae2:	a904      	add	r1, sp, #16
   d4ae4:	4668      	mov	r0, sp
   d4ae6:	f7ff fea9 	bl	d483c <_Z9printDust6StringS_S_>
   d4aea:	a808      	add	r0, sp, #32
   d4aec:	f001 fcfa 	bl	d64e4 <_ZN6StringD1Ev>
   d4af0:	a804      	add	r0, sp, #16
   d4af2:	f001 fcf7 	bl	d64e4 <_ZN6StringD1Ev>
   d4af6:	4668      	mov	r0, sp
   d4af8:	f001 fcf4 	bl	d64e4 <_ZN6StringD1Ev>
        if(PM25 > 0 && PM25 <= pm25L) {
   d4afc:	682b      	ldr	r3, [r5, #0]
   d4afe:	2b00      	cmp	r3, #0
   d4b00:	46aa      	mov	sl, r5
   d4b02:	dd1b      	ble.n	d4b3c <loop+0x140>
   d4b04:	f8db 2000 	ldr.w	r2, [fp]
   d4b08:	4293      	cmp	r3, r2
   d4b0a:	dc17      	bgt.n	d4b3c <loop+0x140>
            digitalWrite(ledR, LOW);
   d4b0c:	4b52      	ldr	r3, [pc, #328]	; (d4c58 <loop+0x25c>)
   d4b0e:	2100      	movs	r1, #0
   d4b10:	8818      	ldrh	r0, [r3, #0]
   d4b12:	f002 fd9a 	bl	d764a <digitalWrite>
            digitalWrite(ledY, LOW);
   d4b16:	4b51      	ldr	r3, [pc, #324]	; (d4c5c <loop+0x260>)
   d4b18:	2100      	movs	r1, #0
   d4b1a:	8818      	ldrh	r0, [r3, #0]
   d4b1c:	f002 fd95 	bl	d764a <digitalWrite>
            digitalWrite(ledG, HIGH);
   d4b20:	4b4f      	ldr	r3, [pc, #316]	; (d4c60 <loop+0x264>)
   d4b22:	2101      	movs	r1, #1
   d4b24:	8818      	ldrh	r0, [r3, #0]
   d4b26:	f002 fd90 	bl	d764a <digitalWrite>
            digitalWrite(D5, LOW);menu.tick();Parameters();
   d4b2a:	2100      	movs	r1, #0
   d4b2c:	2005      	movs	r0, #5
   d4b2e:	f002 fd8c 	bl	d764a <digitalWrite>
   d4b32:	4844      	ldr	r0, [pc, #272]	; (d4c44 <loop+0x248>)
   d4b34:	f001 f8bf 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d4b38:	f7ff fd8e 	bl	d4658 <_Z10Parametersv>
        }
        if(PM25 > pm25L && PM25 <= pm25H) {
   d4b3c:	682b      	ldr	r3, [r5, #0]
   d4b3e:	f8db 2000 	ldr.w	r2, [fp]
   d4b42:	4293      	cmp	r3, r2
   d4b44:	dd1b      	ble.n	d4b7e <loop+0x182>
   d4b46:	f8d9 2000 	ldr.w	r2, [r9]
   d4b4a:	4293      	cmp	r3, r2
   d4b4c:	dc17      	bgt.n	d4b7e <loop+0x182>
            digitalWrite(ledR, LOW);
   d4b4e:	4b42      	ldr	r3, [pc, #264]	; (d4c58 <loop+0x25c>)
   d4b50:	2100      	movs	r1, #0
   d4b52:	8818      	ldrh	r0, [r3, #0]
   d4b54:	f002 fd79 	bl	d764a <digitalWrite>
            digitalWrite(ledY, HIGH);
   d4b58:	4b40      	ldr	r3, [pc, #256]	; (d4c5c <loop+0x260>)
   d4b5a:	2101      	movs	r1, #1
   d4b5c:	8818      	ldrh	r0, [r3, #0]
   d4b5e:	f002 fd74 	bl	d764a <digitalWrite>
            digitalWrite(ledG, LOW);
   d4b62:	4b3f      	ldr	r3, [pc, #252]	; (d4c60 <loop+0x264>)
   d4b64:	2100      	movs	r1, #0
   d4b66:	8818      	ldrh	r0, [r3, #0]
   d4b68:	f002 fd6f 	bl	d764a <digitalWrite>
            digitalWrite(D5, LOW);menu.tick();Parameters();
   d4b6c:	2100      	movs	r1, #0
   d4b6e:	2005      	movs	r0, #5
   d4b70:	f002 fd6b 	bl	d764a <digitalWrite>
   d4b74:	4833      	ldr	r0, [pc, #204]	; (d4c44 <loop+0x248>)
   d4b76:	f001 f89e 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d4b7a:	f7ff fd6d 	bl	d4658 <_Z10Parametersv>
        }
        if(PM25 > pm25H) {
   d4b7e:	682a      	ldr	r2, [r5, #0]
   d4b80:	f8d9 3000 	ldr.w	r3, [r9]
   d4b84:	429a      	cmp	r2, r3
   d4b86:	dd21      	ble.n	d4bcc <loop+0x1d0>
            digitalWrite(ledR, HIGH);
   d4b88:	4b33      	ldr	r3, [pc, #204]	; (d4c58 <loop+0x25c>)
   d4b8a:	2101      	movs	r1, #1
   d4b8c:	8818      	ldrh	r0, [r3, #0]
   d4b8e:	f002 fd5c 	bl	d764a <digitalWrite>
            digitalWrite(ledY, LOW);
   d4b92:	4b32      	ldr	r3, [pc, #200]	; (d4c5c <loop+0x260>)
   d4b94:	2100      	movs	r1, #0
   d4b96:	8818      	ldrh	r0, [r3, #0]
   d4b98:	f002 fd57 	bl	d764a <digitalWrite>
            digitalWrite(ledG, LOW);
   d4b9c:	4b30      	ldr	r3, [pc, #192]	; (d4c60 <loop+0x264>)
   d4b9e:	2100      	movs	r1, #0
   d4ba0:	8818      	ldrh	r0, [r3, #0]
   d4ba2:	f002 fd52 	bl	d764a <digitalWrite>
            digitalWrite(D5, HIGH);menu.tick();
   d4ba6:	2101      	movs	r1, #1
   d4ba8:	2005      	movs	r0, #5
   d4baa:	f002 fd4e 	bl	d764a <digitalWrite>
   d4bae:	4825      	ldr	r0, [pc, #148]	; (d4c44 <loop+0x248>)
   d4bb0:	f001 f881 	bl	d5cb6 <_ZN9OneButton4tickEv>
            Serial.print("lastPm25h");Serial.println(pm25H);
   d4bb4:	f002 fa20 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4bb8:	492a      	ldr	r1, [pc, #168]	; (d4c64 <loop+0x268>)
   d4bba:	f001 fd7d 	bl	d66b8 <_ZN5Print5printEPKc>
   d4bbe:	f002 fa1b 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d4bc2:	220a      	movs	r2, #10
   d4bc4:	f8d9 1000 	ldr.w	r1, [r9]
   d4bc8:	f7ff fd3b 	bl	d4642 <_ZN5Print7printlnIiLi0EEEjT_i>
        }Serial.println(menuCount);Parameters();
   d4bcc:	f002 fa14 	bl	d6ff8 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4bd0:	4b25      	ldr	r3, [pc, #148]	; (d4c68 <loop+0x26c>)
   d4bd2:	220a      	movs	r2, #10
   d4bd4:	7819      	ldrb	r1, [r3, #0]
   d4bd6:	4605      	mov	r5, r0
   d4bd8:	f001 fd8b 	bl	d66f2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4bdc:	4628      	mov	r0, r5
   d4bde:	f001 fd72 	bl	d66c6 <_ZN5Print7printlnEv>
   d4be2:	f7ff fd39 	bl	d4658 <_Z10Parametersv>
        delay(500);
   d4be6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4bea:	f001 fdb5 	bl	d6758 <delay>
    pinMode(buzzer,OUTPUT);
    delay(2000);
}

void loop() {
    for(int b = 0; b < 120; b++) {
   d4bee:	f1b8 0801 	subs.w	r8, r8, #1
   d4bf2:	f47f af0b 	bne.w	d4a0c <loop+0x10>
            digitalWrite(ledG, LOW);
            digitalWrite(D5, HIGH);menu.tick();
            Serial.print("lastPm25h");Serial.println(pm25H);
        }Serial.println(menuCount);Parameters();
        delay(500);
    }menu.tick();Parameters();
   d4bf6:	4813      	ldr	r0, [pc, #76]	; (d4c44 <loop+0x248>)
   d4bf8:	f001 f85d 	bl	d5cb6 <_ZN9OneButton4tickEv>
   d4bfc:	f7ff fd2c 	bl	d4658 <_Z10Parametersv>
    createEventPayLoad (PM1, PM25, PM10) ;
   d4c00:	683a      	ldr	r2, [r7, #0]
   d4c02:	f8da 1000 	ldr.w	r1, [sl]
   d4c06:	6830      	ldr	r0, [r6, #0]
   d4c08:	f7ff fea4 	bl	d4954 <_Z18createEventPayLoadiii>
}
   d4c0c:	b00d      	add	sp, #52	; 0x34
   d4c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4c12:	bf00      	nop
   d4c14:	2003e264 	.word	0x2003e264
   d4c18:	2003e338 	.word	0x2003e338
   d4c1c:	000d7c75 	.word	0x000d7c75
   d4c20:	2003ddcc 	.word	0x2003ddcc
   d4c24:	000d7bbd 	.word	0x000d7bbd
   d4c28:	000d7c92 	.word	0x000d7c92
   d4c2c:	2003e2a4 	.word	0x2003e2a4
   d4c30:	2003e260 	.word	0x2003e260
   d4c34:	2003e348 	.word	0x2003e348
   d4c38:	000d7ca3 	.word	0x000d7ca3
   d4c3c:	000d7cbb 	.word	0x000d7cbb
   d4c40:	2003ddac 	.word	0x2003ddac
   d4c44:	2003e2d0 	.word	0x2003e2d0
   d4c48:	000d84f0 	.word	0x000d84f0
   d4c4c:	2003e290 	.word	0x2003e290
   d4c50:	2003e3c0 	.word	0x2003e3c0
   d4c54:	2003e34c 	.word	0x2003e34c
   d4c58:	2003dd98 	.word	0x2003dd98
   d4c5c:	2003dda4 	.word	0x2003dda4
   d4c60:	2003dd9c 	.word	0x2003dd9c
   d4c64:	000d7cc6 	.word	0x000d7cc6
   d4c68:	2003e282 	.word	0x2003e282
   d4c6c:	2003e28c 	.word	0x2003e28c
   d4c70:	2003e2a8 	.word	0x2003e2a8

000d4c74 <_ZN16Adafruit_SSD1306D0Ev>:
   d4c74:	b510      	push	{r4, lr}
   d4c76:	2124      	movs	r1, #36	; 0x24
   d4c78:	4604      	mov	r4, r0
   d4c7a:	f002 fd83 	bl	d7784 <_ZdlPvj>
   d4c7e:	4620      	mov	r0, r4
   d4c80:	bd10      	pop	{r4, pc}
	...

000d4c84 <_GLOBAL__sub_I_sensor>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c84:	4b25      	ldr	r3, [pc, #148]	; (d4d1c <_GLOBAL__sub_I_sensor+0x98>)
    {   display.clearDisplay();
        display.setCursor(30,20);
        display.setTextSize(2);
        display.println("RETURN");
        display.display();}
    delay(1500);}
   d4c86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c8a:	2501      	movs	r5, #1
    Serial.println("");
    return NO_ERROR1;
}
/********************** SetUp Oled Display **********************/
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
   d4c8c:	4e24      	ldr	r6, [pc, #144]	; (d4d20 <_GLOBAL__sub_I_sensor+0x9c>)
   d4c8e:	701d      	strb	r5, [r3, #0]
   d4c90:	4c24      	ldr	r4, [pc, #144]	; (d4d24 <_GLOBAL__sub_I_sensor+0xa0>)
#define SSD1306_128_64
String pm1;
   d4c92:	4f25      	ldr	r7, [pc, #148]	; (d4d28 <_GLOBAL__sub_I_sensor+0xa4>)
   d4c94:	f8df 80ac 	ldr.w	r8, [pc, #172]	; d4d44 <_GLOBAL__sub_I_sensor+0xc0>

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c98:	f001 f8a0 	bl	d5ddc <HAL_Pin_Map>
#include <JsonParserGeneratorRK.h>
#include <OneButton.h>
#include <SparkFun_Qwiic_Twist_Arduino_Library.h>

/****************SetUp HM330X**************/
HM330X sensor;
   d4c9c:	2140      	movs	r1, #64	; 0x40
   d4c9e:	4823      	ldr	r0, [pc, #140]	; (d4d2c <_GLOBAL__sub_I_sensor+0xa8>)
   d4ca0:	f000 ff21 	bl	d5ae6 <_ZN6HM330XC1Eh>
    Serial.println("");
    return NO_ERROR1;
}
/********************** SetUp Oled Display **********************/
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
   d4ca4:	f04f 31ff 	mov.w	r1, #4294967295
   d4ca8:	4630      	mov	r0, r6
   d4caa:	f000 fa11 	bl	d50d0 <_ZN16Adafruit_SSD1306C1Ea>
   d4cae:	4622      	mov	r2, r4
   d4cb0:	491f      	ldr	r1, [pc, #124]	; (d4d30 <_GLOBAL__sub_I_sensor+0xac>)
   d4cb2:	4630      	mov	r0, r6
   d4cb4:	f002 fd58 	bl	d7768 <__aeabi_atexit>
#define SSD1306_128_64
String pm1;
   d4cb8:	4e1e      	ldr	r6, [pc, #120]	; (d4d34 <_GLOBAL__sub_I_sensor+0xb0>)
   d4cba:	4639      	mov	r1, r7
   d4cbc:	4640      	mov	r0, r8
   d4cbe:	f001 fc58 	bl	d6572 <_ZN6StringC1EPK19__FlashStringHelper>
   d4cc2:	4640      	mov	r0, r8
String pm25;
   d4cc4:	f8df 8080 	ldr.w	r8, [pc, #128]	; d4d48 <_GLOBAL__sub_I_sensor+0xc4>
}
/********************** SetUp Oled Display **********************/
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
#define SSD1306_128_64
String pm1;
   d4cc8:	4622      	mov	r2, r4
   d4cca:	4631      	mov	r1, r6
   d4ccc:	f002 fd4c 	bl	d7768 <__aeabi_atexit>
String pm25;
   d4cd0:	4639      	mov	r1, r7
   d4cd2:	4640      	mov	r0, r8
   d4cd4:	f001 fc4d 	bl	d6572 <_ZN6StringC1EPK19__FlashStringHelper>
   d4cd8:	4640      	mov	r0, r8
String pm10;
   d4cda:	f8df 8070 	ldr.w	r8, [pc, #112]	; d4d4c <_GLOBAL__sub_I_sensor+0xc8>
/********************** SetUp Oled Display **********************/
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
#define SSD1306_128_64
String pm1;
String pm25;
   d4cde:	4622      	mov	r2, r4
   d4ce0:	4631      	mov	r1, r6
   d4ce2:	f002 fd41 	bl	d7768 <__aeabi_atexit>
String pm10;
   d4ce6:	4639      	mov	r1, r7
   d4ce8:	4640      	mov	r0, r8
   d4cea:	f001 fc42 	bl	d6572 <_ZN6StringC1EPK19__FlashStringHelper>
   d4cee:	4622      	mov	r2, r4
   d4cf0:	4631      	mov	r1, r6
   d4cf2:	4640      	mov	r0, r8
   d4cf4:	f002 fd38 	bl	d7768 <__aeabi_atexit>
/*********************** OneButton SetUP  *************************/
OneButton menu(A5, false);
   d4cf8:	462b      	mov	r3, r5
   d4cfa:	2200      	movs	r2, #0
   d4cfc:	210e      	movs	r1, #14
   d4cfe:	480e      	ldr	r0, [pc, #56]	; (d4d38 <_GLOBAL__sub_I_sensor+0xb4>)
   d4d00:	f000 ff2e 	bl	d5b60 <_ZN9OneButtonC1Eiib>
OneButton menuB(A4, false);
   d4d04:	462b      	mov	r3, r5
   d4d06:	2200      	movs	r2, #0
   d4d08:	210f      	movs	r1, #15
   d4d0a:	480c      	ldr	r0, [pc, #48]	; (d4d3c <_GLOBAL__sub_I_sensor+0xb8>)
   d4d0c:	f000 ff28 	bl	d5b60 <_ZN9OneButtonC1Eiib>
/************Declare Variables*************/
TWIST twist;
   d4d10:	480b      	ldr	r0, [pc, #44]	; (d4d40 <_GLOBAL__sub_I_sensor+0xbc>)
    {   display.clearDisplay();
        display.setCursor(30,20);
        display.setTextSize(2);
        display.println("RETURN");
        display.display();}
    delay(1500);}
   d4d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
String pm10;
/*********************** OneButton SetUP  *************************/
OneButton menu(A5, false);
OneButton menuB(A4, false);
/************Declare Variables*************/
TWIST twist;
   d4d16:	f000 bfe6 	b.w	d5ce6 <_ZN5TWISTC1Ev>
   d4d1a:	bf00      	nop
   d4d1c:	2003e344 	.word	0x2003e344
   d4d20:	2003e2ac 	.word	0x2003e2ac
   d4d24:	2003e254 	.word	0x2003e254
   d4d28:	000d84f0 	.word	0x000d84f0
   d4d2c:	2003e338 	.word	0x2003e338
   d4d30:	000d40c9 	.word	0x000d40c9
   d4d34:	000d64e5 	.word	0x000d64e5
   d4d38:	2003e2d0 	.word	0x2003e2d0
   d4d3c:	2003e35c 	.word	0x2003e35c
   d4d40:	2003e258 	.word	0x2003e258
   d4d44:	2003e290 	.word	0x2003e290
   d4d48:	2003e3c0 	.word	0x2003e3c0
   d4d4c:	2003e34c 	.word	0x2003e34c

000d4d50 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4d50:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d4d52:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4d54:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4d58:	2c02      	cmp	r4, #2
   d4d5a:	d008      	beq.n	d4d6e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4d5c:	2c03      	cmp	r4, #3
   d4d5e:	d00f      	beq.n	d4d80 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d4d60:	2c01      	cmp	r4, #1
   d4d62:	d170      	bne.n	d4e46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4d64:	8904      	ldrh	r4, [r0, #8]
   d4d66:	3c01      	subs	r4, #1
   d4d68:	1aa2      	subs	r2, r4, r2
   d4d6a:	b212      	sxth	r2, r2
      break;
   d4d6c:	e00c      	b.n	d4d88 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4d6e:	8944      	ldrh	r4, [r0, #10]
   d4d70:	3c01      	subs	r4, #1
   d4d72:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4d74:	8904      	ldrh	r4, [r0, #8]
   d4d76:	1ae4      	subs	r4, r4, r3
   d4d78:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4d7a:	b212      	sxth	r2, r2
      x -= (w-1);
   d4d7c:	b209      	sxth	r1, r1
      break;
   d4d7e:	e062      	b.n	d4e46 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d4d80:	8944      	ldrh	r4, [r0, #10]
   d4d82:	1ae4      	subs	r4, r4, r3
   d4d84:	1a61      	subs	r1, r4, r1
   d4d86:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4d88:	2a00      	cmp	r2, #0
   d4d8a:	db5b      	blt.n	d4e44 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4d8c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4d90:	4294      	cmp	r4, r2
   d4d92:	f340 8090 	ble.w	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4d96:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4d98:	bfbe      	ittt	lt
   d4d9a:	185b      	addlt	r3, r3, r1
   d4d9c:	b21b      	sxthlt	r3, r3
    __y = 0;
   d4d9e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4da0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4da4:	18cc      	adds	r4, r1, r3
   d4da6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4da8:	bfc4      	itt	gt
   d4daa:	1a43      	subgt	r3, r0, r1
   d4dac:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4dae:	2b00      	cmp	r3, #0
   d4db0:	f340 8081 	ble.w	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4db4:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4db6:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4db8:	4f3f      	ldr	r7, [pc, #252]	; (d4eb8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4dba:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4dbe:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4dc2:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4dc4:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4dc8:	d017      	beq.n	d4dfa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4dca:	f1c1 0108 	rsb	r1, r1, #8
   d4dce:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4dd0:	493a      	ldr	r1, [pc, #232]	; (d4ebc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4dd2:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4dd4:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4dd6:	bf3f      	itttt	cc
   d4dd8:	ebc3 0e00 	rsbcc	lr, r3, r0
   d4ddc:	21ff      	movcc	r1, #255	; 0xff
   d4dde:	fa41 f10e 	asrcc.w	r1, r1, lr
   d4de2:	400e      	andcc	r6, r1
   d4de4:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d4de6:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4de8:	bf0c      	ite	eq
   d4dea:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d4dec:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4dee:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4df0:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4df2:	d360      	bcc.n	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d4df4:	1a18      	subs	r0, r3, r0
   d4df6:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d4df8:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4dfa:	2b07      	cmp	r3, #7
   d4dfc:	d917      	bls.n	d4e2e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4dfe:	2d01      	cmp	r5, #1
   d4e00:	bf0c      	ite	eq
   d4e02:	20ff      	moveq	r0, #255	; 0xff
   d4e04:	2000      	movne	r0, #0
   d4e06:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d4e0a:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4e0c:	3a08      	subs	r2, #8
   d4e0e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d4e10:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4e12:	f801 0c80 	strb.w	r0, [r1, #-128]
   d4e16:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4e1a:	d8f7      	bhi.n	d4e0c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d4e1c:	f1a3 0208 	sub.w	r2, r3, #8
   d4e20:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4e24:	3201      	adds	r2, #1
   d4e26:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4e2a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4e2e:	2b00      	cmp	r3, #0
   d4e30:	d041      	beq.n	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4e32:	4a23      	ldr	r2, [pc, #140]	; (d4ec0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4e34:	5cd2      	ldrb	r2, [r2, r3]
   d4e36:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4e38:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4e3a:	bf0c      	ite	eq
   d4e3c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d4e3e:	4393      	bicne	r3, r2
   d4e40:	7023      	strb	r3, [r4, #0]
   d4e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4e46:	2a00      	cmp	r2, #0
   d4e48:	db35      	blt.n	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4e4a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4e4e:	4294      	cmp	r4, r2
   d4e50:	dd31      	ble.n	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4e52:	2900      	cmp	r1, #0
    w += x;
   d4e54:	bfbc      	itt	lt
   d4e56:	18c9      	addlt	r1, r1, r3
   d4e58:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4e5a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4e5e:	bfb8      	it	lt
   d4e60:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4e62:	18ce      	adds	r6, r1, r3
   d4e64:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4e66:	bfc4      	itt	gt
   d4e68:	1a63      	subgt	r3, r4, r1
   d4e6a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4e6c:	2b00      	cmp	r3, #0
   d4e6e:	dd22      	ble.n	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4e70:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d4e72:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4e76:	4810      	ldr	r0, [pc, #64]	; (d4eb8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4e78:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4e7c:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d4e7e:	2001      	movs	r0, #1
   d4e80:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4e84:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4e86:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4e88:	d109      	bne.n	d4e9e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4e8a:	3b01      	subs	r3, #1
   d4e8c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d4e8e:	1c5c      	adds	r4, r3, #1
   d4e90:	d011      	beq.n	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4e92:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4e96:	4310      	orrs	r0, r2
   d4e98:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4e9c:	e7f5      	b.n	d4e8a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d4e9e:	43d2      	mvns	r2, r2
   d4ea0:	b2d2      	uxtb	r2, r2
   d4ea2:	3b01      	subs	r3, #1
   d4ea4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4ea6:	1c58      	adds	r0, r3, #1
   d4ea8:	d005      	beq.n	d4eb6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4eaa:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4eae:	4010      	ands	r0, r2
   d4eb0:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4eb4:	e7f5      	b.n	d4ea2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4eb8:	2003ddec 	.word	0x2003ddec
   d4ebc:	2003dde4 	.word	0x2003dde4
   d4ec0:	2003dddc 	.word	0x2003dddc

000d4ec4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d4ec6:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d4ec8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d4ecc:	2c02      	cmp	r4, #2
   d4ece:	d008      	beq.n	d4ee2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d4ed0:	2c03      	cmp	r4, #3
   d4ed2:	d00f      	beq.n	d4ef4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d4ed4:	2c01      	cmp	r4, #1
   d4ed6:	d112      	bne.n	d4efe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d4ed8:	8904      	ldrh	r4, [r0, #8]
   d4eda:	1ae4      	subs	r4, r4, r3
   d4edc:	1aa2      	subs	r2, r4, r2
   d4ede:	b212      	sxth	r2, r2
      break;
   d4ee0:	e06d      	b.n	d4fbe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4ee2:	8904      	ldrh	r4, [r0, #8]
   d4ee4:	3c01      	subs	r4, #1
   d4ee6:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4ee8:	8944      	ldrh	r4, [r0, #10]
   d4eea:	1ae4      	subs	r4, r4, r3
   d4eec:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d4eee:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d4ef0:	b212      	sxth	r2, r2
      break;
   d4ef2:	e004      	b.n	d4efe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d4ef4:	8944      	ldrh	r4, [r0, #10]
   d4ef6:	3c01      	subs	r4, #1
   d4ef8:	1a61      	subs	r1, r4, r1
   d4efa:	b209      	sxth	r1, r1
      break;
   d4efc:	e05f      	b.n	d4fbe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4efe:	2900      	cmp	r1, #0
   d4f00:	db5c      	blt.n	d4fbc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d4f02:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d4f06:	428c      	cmp	r4, r1
   d4f08:	f340 8091 	ble.w	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4f0c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4f0e:	bfbc      	itt	lt
   d4f10:	18d2      	addlt	r2, r2, r3
   d4f12:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4f14:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d4f18:	bfb8      	it	lt
   d4f1a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d4f1c:	18d4      	adds	r4, r2, r3
   d4f1e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4f20:	bfc4      	itt	gt
   d4f22:	1a83      	subgt	r3, r0, r2
   d4f24:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4f26:	2b00      	cmp	r3, #0
   d4f28:	f340 8081 	ble.w	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4f2c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4f2e:	4e40      	ldr	r6, [pc, #256]	; (d5030 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d4f30:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4f32:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4f34:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4f38:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4f3c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4f40:	d017      	beq.n	d4f72 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d4f42:	f1c4 0408 	rsb	r4, r4, #8
   d4f46:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4f48:	4c3a      	ldr	r4, [pc, #232]	; (d5034 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4f4a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4f4c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d4f4e:	bf3f      	itttt	cc
   d4f50:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4f54:	24ff      	movcc	r4, #255	; 0xff
   d4f56:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4f5a:	4027      	andcc	r7, r4
   d4f5c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d4f5e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4f60:	bf0c      	ite	eq
   d4f62:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4f64:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4f66:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4f68:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4f6a:	d360      	bcc.n	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4f6c:	1a10      	subs	r0, r2, r0
   d4f6e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d4f70:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d4f72:	2a07      	cmp	r2, #7
   d4f74:	d917      	bls.n	d4fa6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4f76:	2d01      	cmp	r5, #1
   d4f78:	bf0c      	ite	eq
   d4f7a:	24ff      	moveq	r4, #255	; 0xff
   d4f7c:	2400      	movne	r4, #0
   d4f7e:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d4f82:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4f84:	3908      	subs	r1, #8
   d4f86:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4f88:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4f8a:	f800 4c80 	strb.w	r4, [r0, #-128]
   d4f8e:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d4f92:	d8f7      	bhi.n	d4f84 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4f94:	f1a2 0108 	sub.w	r1, r2, #8
   d4f98:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4f9c:	3101      	adds	r1, #1
   d4f9e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d4fa2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4fa6:	2a00      	cmp	r2, #0
   d4fa8:	d041      	beq.n	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4faa:	4923      	ldr	r1, [pc, #140]	; (d5038 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4fac:	5c89      	ldrb	r1, [r1, r2]
   d4fae:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d4fb0:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4fb2:	bf0c      	ite	eq
   d4fb4:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4fb6:	438a      	bicne	r2, r1
   d4fb8:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4fbe:	2900      	cmp	r1, #0
   d4fc0:	db35      	blt.n	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d4fc2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d4fc6:	428c      	cmp	r4, r1
   d4fc8:	dd31      	ble.n	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d4fca:	2a00      	cmp	r2, #0
    w += x;
   d4fcc:	bfbc      	itt	lt
   d4fce:	18d2      	addlt	r2, r2, r3
   d4fd0:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4fd2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d4fd6:	bfb8      	it	lt
   d4fd8:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4fda:	18d6      	adds	r6, r2, r3
   d4fdc:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4fde:	bfc4      	itt	gt
   d4fe0:	1aa3      	subgt	r3, r4, r2
   d4fe2:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4fe4:	2b00      	cmp	r3, #0
   d4fe6:	dd22      	ble.n	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4fe8:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4fea:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d4fee:	4810      	ldr	r0, [pc, #64]	; (d5030 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d4ff0:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4ff4:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d4ff6:	2201      	movs	r2, #1
   d4ff8:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d4ffc:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4ffe:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d5000:	d109      	bne.n	d5016 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d5002:	1e5a      	subs	r2, r3, #1
   d5004:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d5006:	1c5c      	adds	r4, r3, #1
   d5008:	d011      	beq.n	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d500a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d500e:	430a      	orrs	r2, r1
   d5010:	f800 2c01 	strb.w	r2, [r0, #-1]
   d5014:	e7f5      	b.n	d5002 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d5016:	43c9      	mvns	r1, r1
   d5018:	b2c9      	uxtb	r1, r1
   d501a:	1e5a      	subs	r2, r3, #1
   d501c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d501e:	1c5a      	adds	r2, r3, #1
   d5020:	d005      	beq.n	d502e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d5022:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5026:	400a      	ands	r2, r1
   d5028:	f800 2c01 	strb.w	r2, [r0, #-1]
   d502c:	e7f5      	b.n	d501a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d502e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5030:	2003ddec 	.word	0x2003ddec
   d5034:	2003dde4 	.word	0x2003dde4
   d5038:	2003dddc 	.word	0x2003dddc

000d503c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d503e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d5040:	4606      	mov	r6, r0
   d5042:	4614      	mov	r4, r2
   d5044:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d5046:	db3f      	blt.n	d50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5048:	f000 fbe3 	bl	d5812 <_ZN12Adafruit_GFX5widthEv>
   d504c:	4285      	cmp	r5, r0
   d504e:	da3b      	bge.n	d50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5050:	2c00      	cmp	r4, #0
   d5052:	db39      	blt.n	d50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d5054:	4630      	mov	r0, r6
   d5056:	f000 fbdf 	bl	d5818 <_ZN12Adafruit_GFX6heightEv>
   d505a:	4284      	cmp	r4, r0
   d505c:	da34      	bge.n	d50c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d505e:	4630      	mov	r0, r6
   d5060:	f000 fbc6 	bl	d57f0 <_ZN12Adafruit_GFX11getRotationEv>
   d5064:	2802      	cmp	r0, #2
   d5066:	d127      	bne.n	d50b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5068:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d506a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d506c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d506e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5070:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d5072:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d5074:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d5076:	b204      	sxth	r4, r0
   d5078:	e006      	b.n	d5088 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d507a:	2801      	cmp	r0, #1
   d507c:	d104      	bne.n	d5088 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d507e:	8933      	ldrh	r3, [r6, #8]
   d5080:	3b01      	subs	r3, #1
   d5082:	1b1b      	subs	r3, r3, r4
   d5084:	462c      	mov	r4, r5
   d5086:	b21d      	sxth	r5, r3
   d5088:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d508a:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d508c:	fb94 f0f0 	sdiv	r0, r4, r0
   d5090:	b200      	sxth	r0, r0
   d5092:	4b0e      	ldr	r3, [pc, #56]	; (d50cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d5094:	f004 0207 	and.w	r2, r4, #7
   d5098:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d509c:	d104      	bne.n	d50a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d509e:	4097      	lsls	r7, r2
   d50a0:	5c5a      	ldrb	r2, [r3, r1]
   d50a2:	4317      	orrs	r7, r2
   d50a4:	545f      	strb	r7, [r3, r1]
   d50a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d50a8:	5c58      	ldrb	r0, [r3, r1]
   d50aa:	2701      	movs	r7, #1
   d50ac:	fa07 f202 	lsl.w	r2, r7, r2
   d50b0:	ea20 0202 	bic.w	r2, r0, r2
   d50b4:	545a      	strb	r2, [r3, r1]
   d50b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d50b8:	2803      	cmp	r0, #3
   d50ba:	d1de      	bne.n	d507a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d50bc:	8973      	ldrh	r3, [r6, #10]
   d50be:	3b01      	subs	r3, #1
   d50c0:	1b5b      	subs	r3, r3, r5
   d50c2:	4625      	mov	r5, r4
   d50c4:	b21c      	sxth	r4, r3
   d50c6:	e7df      	b.n	d5088 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d50c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d50ca:	bf00      	nop
   d50cc:	2003ddec 	.word	0x2003ddec

000d50d0 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d50d0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d50d2:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d50d4:	4604      	mov	r4, r0
   d50d6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d50d8:	2180      	movs	r1, #128	; 0x80
   d50da:	f000 fa9f 	bl	d561c <_ZN12Adafruit_GFXC1Ess>
   d50de:	4b06      	ldr	r3, [pc, #24]	; (d50f8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d50e0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d50e2:	23ff      	movs	r3, #255	; 0xff
   d50e4:	7763      	strb	r3, [r4, #29]
   d50e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d50ea:	77e3      	strb	r3, [r4, #31]
   d50ec:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d50ee:	f884 5020 	strb.w	r5, [r4, #32]
}
   d50f2:	4620      	mov	r0, r4
   d50f4:	bd38      	pop	{r3, r4, r5, pc}
   d50f6:	bf00      	nop
   d50f8:	000d7e5c 	.word	0x000d7e5c

000d50fc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  }
}

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d50fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d5100:	2100      	movs	r1, #0
   d5102:	4801      	ldr	r0, [pc, #4]	; (d5108 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d5104:	f002 bcb5 	b.w	d7a72 <memset>
   d5108:	2003ddec 	.word	0x2003ddec

000d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d510c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d510e:	4d09      	ldr	r5, [pc, #36]	; (d5134 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d5110:	6829      	ldr	r1, [r5, #0]
   d5112:	f011 0401 	ands.w	r4, r1, #1
   d5116:	d10a      	bne.n	d512e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d5118:	4628      	mov	r0, r5
   d511a:	f7fe ffcd 	bl	d40b8 <__cxa_guard_acquire>
   d511e:	b130      	cbz	r0, d512e <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d5120:	4621      	mov	r1, r4
   d5122:	4805      	ldr	r0, [pc, #20]	; (d5138 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d5124:	f001 f902 	bl	d632c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5128:	4628      	mov	r0, r5
   d512a:	f7fe ffca 	bl	d40c2 <__cxa_guard_release>
        return instance;
    }
   d512e:	4802      	ldr	r0, [pc, #8]	; (d5138 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d5130:	bd38      	pop	{r3, r4, r5, pc}
   d5132:	bf00      	nop
   d5134:	2003e3d0 	.word	0x2003e3d0
   d5138:	2003e3d4 	.word	0x2003e3d4

000d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d513c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d513e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d5142:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d5144:	4604      	mov	r4, r0
   d5146:	460d      	mov	r5, r1
  if (sid != -1)
   d5148:	d028      	beq.n	d519c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d514a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d514e:	2101      	movs	r1, #1
   d5150:	b280      	uxth	r0, r0
   d5152:	f002 fa7a 	bl	d764a <digitalWrite>
    digitalWrite(dc, LOW);
   d5156:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d515a:	2100      	movs	r1, #0
   d515c:	b280      	uxth	r0, r0
   d515e:	f002 fa74 	bl	d764a <digitalWrite>
    digitalWrite(cs, LOW);
   d5162:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5166:	2100      	movs	r1, #0
   d5168:	b280      	uxth	r0, r0
   d516a:	f002 fa6e 	bl	d764a <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d516e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5172:	b12b      	cbz	r3, d5180 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5174:	f7ff ffca 	bl	d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5178:	4629      	mov	r1, r5
   d517a:	f001 f981 	bl	d6480 <_ZN8SPIClass8transferEh>
   d517e:	e005      	b.n	d518c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d5180:	462b      	mov	r3, r5
   d5182:	2201      	movs	r2, #1
   d5184:	7fa1      	ldrb	r1, [r4, #30]
   d5186:	7f60      	ldrb	r0, [r4, #29]
   d5188:	f002 fa8b 	bl	d76a2 <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d518c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5190:	2101      	movs	r1, #1
   d5192:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d5194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d5198:	f002 ba57 	b.w	d764a <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d519c:	f002 fabe 	bl	d771c <_Z19__fetch_global_Wirev>
   d51a0:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d51a4:	f002 f85d 	bl	d7262 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d51a8:	f002 fab8 	bl	d771c <_Z19__fetch_global_Wirev>
   d51ac:	6803      	ldr	r3, [r0, #0]
   d51ae:	2100      	movs	r1, #0
   d51b0:	689b      	ldr	r3, [r3, #8]
   d51b2:	4798      	blx	r3
    Wire.write(c);
   d51b4:	f002 fab2 	bl	d771c <_Z19__fetch_global_Wirev>
   d51b8:	6803      	ldr	r3, [r0, #0]
   d51ba:	4629      	mov	r1, r5
   d51bc:	689b      	ldr	r3, [r3, #8]
   d51be:	4798      	blx	r3
    Wire.endTransmission();
   d51c0:	f002 faac 	bl	d771c <_Z19__fetch_global_Wirev>
  }
}
   d51c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d51c8:	f002 b852 	b.w	d7270 <_ZN7TwoWire15endTransmissionEv>

000d51cc <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d51cc:	b538      	push	{r3, r4, r5, lr}
   d51ce:	4604      	mov	r4, r0
   d51d0:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d51d2:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d51d4:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d51d8:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d51da:	3301      	adds	r3, #1
   d51dc:	d037      	beq.n	d524e <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d51de:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d51e2:	2101      	movs	r1, #1
   d51e4:	b280      	uxth	r0, r0
   d51e6:	f002 fa1f 	bl	d7628 <pinMode>
    pinMode(cs, OUTPUT);
   d51ea:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d51ee:	2101      	movs	r1, #1
   d51f0:	b280      	uxth	r0, r0
   d51f2:	f002 fa19 	bl	d7628 <pinMode>
    if (!hwSPI){
   d51f6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d51fa:	b95b      	cbnz	r3, d5214 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d51fc:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d5200:	2101      	movs	r1, #1
   d5202:	b280      	uxth	r0, r0
   d5204:	f002 fa10 	bl	d7628 <pinMode>
    	pinMode(sclk, OUTPUT);
   d5208:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d520c:	2101      	movs	r1, #1
   d520e:	b280      	uxth	r0, r0
   d5210:	f002 fa0a 	bl	d7628 <pinMode>
    	}
    if (hwSPI){
   d5214:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d5218:	b1eb      	cbz	r3, d5256 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d521a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d521e:	2101      	movs	r1, #1
   d5220:	b280      	uxth	r0, r0
   d5222:	f002 fa12 	bl	d764a <digitalWrite>
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d5226:	f7ff ff71 	bl	d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d522a:	2101      	movs	r1, #1
   d522c:	f001 f899 	bl	d6362 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDividerReference(unsigned value, unsigned scale=HZ) {
        instance().setClockDividerReference(value, scale);
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
   d5230:	f7ff ff6c 	bl	d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5234:	2110      	movs	r1, #16
   d5236:	f001 f8ff 	bl	d6438 <_ZN8SPIClass15setClockDividerEh>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d523a:	f7ff ff67 	bl	d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d523e:	2100      	movs	r1, #0
   d5240:	f001 f8a0 	bl	d6384 <_ZN8SPIClass11setDataModeEh>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d5244:	f7ff ff62 	bl	d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d5248:	f001 f87a 	bl	d6340 <_ZN8SPIClass5beginEv>
   d524c:	e003      	b.n	d5256 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d524e:	f002 fa65 	bl	d771c <_Z19__fetch_global_Wirev>
   d5252:	f001 ffcb 	bl	d71ec <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d5256:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d525a:	2101      	movs	r1, #1
   d525c:	b280      	uxth	r0, r0
   d525e:	f002 f9e3 	bl	d7628 <pinMode>
  digitalWrite(rst, HIGH);
   d5262:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5266:	2101      	movs	r1, #1
   d5268:	b280      	uxth	r0, r0
   d526a:	f002 f9ee 	bl	d764a <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d526e:	2001      	movs	r0, #1
   d5270:	f001 fa72 	bl	d6758 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d5274:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d5278:	2100      	movs	r1, #0
   d527a:	b280      	uxth	r0, r0
   d527c:	f002 f9e5 	bl	d764a <digitalWrite>
  // wait 10ms
  delay(10);
   d5280:	200a      	movs	r0, #10
   d5282:	f001 fa69 	bl	d6758 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d5286:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d528a:	2101      	movs	r1, #1
   d528c:	b280      	uxth	r0, r0
   d528e:	f002 f9dc 	bl	d764a <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d5292:	4620      	mov	r0, r4
   d5294:	21ae      	movs	r1, #174	; 0xae
   d5296:	f7ff ff51 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d529a:	4620      	mov	r0, r4
   d529c:	21d5      	movs	r1, #213	; 0xd5
   d529e:	f7ff ff4d 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d52a2:	4620      	mov	r0, r4
   d52a4:	2180      	movs	r1, #128	; 0x80
   d52a6:	f7ff ff49 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d52aa:	4620      	mov	r0, r4
   d52ac:	21a8      	movs	r1, #168	; 0xa8
   d52ae:	f7ff ff45 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d52b2:	4620      	mov	r0, r4
   d52b4:	213f      	movs	r1, #63	; 0x3f
   d52b6:	f7ff ff41 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d52ba:	4620      	mov	r0, r4
   d52bc:	21d3      	movs	r1, #211	; 0xd3
   d52be:	f7ff ff3d 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d52c2:	4620      	mov	r0, r4
   d52c4:	2100      	movs	r1, #0
   d52c6:	f7ff ff39 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d52ca:	4620      	mov	r0, r4
   d52cc:	2140      	movs	r1, #64	; 0x40
   d52ce:	f7ff ff35 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d52d2:	218d      	movs	r1, #141	; 0x8d
   d52d4:	4620      	mov	r0, r4
   d52d6:	f7ff ff31 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d52da:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d52dc:	bf0c      	ite	eq
   d52de:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d52e0:	2114      	movne	r1, #20
   d52e2:	4620      	mov	r0, r4
   d52e4:	f7ff ff2a 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d52e8:	4620      	mov	r0, r4
   d52ea:	2120      	movs	r1, #32
   d52ec:	f7ff ff26 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d52f0:	4620      	mov	r0, r4
   d52f2:	2100      	movs	r1, #0
   d52f4:	f7ff ff22 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d52f8:	4620      	mov	r0, r4
   d52fa:	21a1      	movs	r1, #161	; 0xa1
   d52fc:	f7ff ff1e 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d5300:	4620      	mov	r0, r4
   d5302:	21c8      	movs	r1, #200	; 0xc8
   d5304:	f7ff ff1a 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d5308:	4620      	mov	r0, r4
   d530a:	21da      	movs	r1, #218	; 0xda
   d530c:	f7ff ff16 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d5310:	4620      	mov	r0, r4
   d5312:	2112      	movs	r1, #18
   d5314:	f7ff ff12 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d5318:	2181      	movs	r1, #129	; 0x81
   d531a:	4620      	mov	r0, r4
   d531c:	f7ff ff0e 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5320:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d5322:	bf0c      	ite	eq
   d5324:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d5326:	21cf      	movne	r1, #207	; 0xcf
   d5328:	4620      	mov	r0, r4
   d532a:	f7ff ff07 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d532e:	21d9      	movs	r1, #217	; 0xd9
   d5330:	4620      	mov	r0, r4
   d5332:	f7ff ff03 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d5336:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d5338:	bf0c      	ite	eq
   d533a:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d533c:	21f1      	movne	r1, #241	; 0xf1
   d533e:	4620      	mov	r0, r4
   d5340:	f7ff fefc 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d5344:	4620      	mov	r0, r4
   d5346:	21db      	movs	r1, #219	; 0xdb
   d5348:	f7ff fef8 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d534c:	4620      	mov	r0, r4
   d534e:	2140      	movs	r1, #64	; 0x40
   d5350:	f7ff fef4 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d5354:	4620      	mov	r0, r4
   d5356:	21a4      	movs	r1, #164	; 0xa4
   d5358:	f7ff fef0 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d535c:	4620      	mov	r0, r4
   d535e:	21a6      	movs	r1, #166	; 0xa6
   d5360:	f7ff feec 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d5364:	4620      	mov	r0, r4
   d5366:	21af      	movs	r1, #175	; 0xaf
}
   d5368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d536c:	f7ff bee6 	b.w	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d5370 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d5374:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d5376:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d5378:	f7ff fee0 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d537c:	2100      	movs	r1, #0
   d537e:	4620      	mov	r0, r4
   d5380:	f7ff fedc 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d5384:	217f      	movs	r1, #127	; 0x7f
   d5386:	4620      	mov	r0, r4
   d5388:	f7ff fed8 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d538c:	2122      	movs	r1, #34	; 0x22
   d538e:	4620      	mov	r0, r4
   d5390:	f7ff fed4 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d5394:	2100      	movs	r1, #0
   d5396:	4620      	mov	r0, r4
   d5398:	f7ff fed0 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d539c:	2107      	movs	r1, #7
   d539e:	4620      	mov	r0, r4
   d53a0:	f7ff fecc 	bl	d513c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d53a4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d53a8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d5468 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d53ac:	3301      	adds	r3, #1
   d53ae:	d035      	beq.n	d541c <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d53b0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53b4:	2101      	movs	r1, #1
   d53b6:	b280      	uxth	r0, r0
   d53b8:	f002 f947 	bl	d764a <digitalWrite>
    digitalWrite(dc, HIGH);
   d53bc:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d53c0:	2101      	movs	r1, #1
   d53c2:	b280      	uxth	r0, r0
   d53c4:	f002 f941 	bl	d764a <digitalWrite>
    digitalWrite(cs, LOW);
   d53c8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d53cc:	2100      	movs	r1, #0
   d53ce:	b280      	uxth	r0, r0
   d53d0:	f002 f93b 	bl	d764a <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d53d4:	2001      	movs	r0, #1
   d53d6:	f000 fd81 	bl	d5edc <HAL_Delay_Microseconds>
   d53da:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d53dc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d53e0:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d53e4:	b12b      	cbz	r3, d53f2 <_ZN16Adafruit_SSD13067displayEv+0x82>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d53e6:	f7ff fe91 	bl	d510c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d53ea:	4631      	mov	r1, r6
   d53ec:	f001 f848 	bl	d6480 <_ZN8SPIClass8transferEh>
   d53f0:	e005      	b.n	d53fe <_ZN16Adafruit_SSD13067displayEv+0x8e>
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d53f2:	4633      	mov	r3, r6
   d53f4:	2201      	movs	r2, #1
   d53f6:	7fa1      	ldrb	r1, [r4, #30]
   d53f8:	7f60      	ldrb	r0, [r4, #29]
   d53fa:	f002 f952 	bl	d76a2 <shiftOut>
   d53fe:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d5400:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5404:	d1ea      	bne.n	d53dc <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d5406:	2001      	movs	r0, #1
   d5408:	f000 fd68 	bl	d5edc <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d540c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d5410:	2101      	movs	r1, #1
   d5412:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d5418:	f002 b917 	b.w	d764a <digitalWrite>
   d541c:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d541e:	f002 f97d 	bl	d771c <_Z19__fetch_global_Wirev>
   d5422:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d5426:	f001 ff1c 	bl	d7262 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d542a:	f002 f977 	bl	d771c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d542e:	6803      	ldr	r3, [r0, #0]
   d5430:	2140      	movs	r1, #64	; 0x40
   d5432:	689b      	ldr	r3, [r3, #8]
   d5434:	4798      	blx	r3
   d5436:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d5438:	f002 f970 	bl	d771c <_Z19__fetch_global_Wirev>
   d543c:	19af      	adds	r7, r5, r6
   d543e:	6803      	ldr	r3, [r0, #0]
   d5440:	b2bf      	uxth	r7, r7
   d5442:	689b      	ldr	r3, [r3, #8]
   d5444:	f818 1007 	ldrb.w	r1, [r8, r7]
   d5448:	3601      	adds	r6, #1
   d544a:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d544c:	2e10      	cmp	r6, #16
   d544e:	d1f3      	bne.n	d5438 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d5450:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d5452:	f002 f963 	bl	d771c <_Z19__fetch_global_Wirev>
   d5456:	b2ad      	uxth	r5, r5
   d5458:	f001 ff0a 	bl	d7270 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d545c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d5460:	d1dd      	bne.n	d541e <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d5462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5466:	bf00      	nop
   d5468:	2003ddec 	.word	0x2003ddec

000d546c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d546c:	f000 bcb6 	b.w	d5ddc <HAL_Pin_Map>

000d5470 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5474:	b085      	sub	sp, #20
   d5476:	461e      	mov	r6, r3
   d5478:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d547c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d5480:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d5482:	1a9a      	subs	r2, r3, r2
   d5484:	2a00      	cmp	r2, #0
   d5486:	bfb8      	it	lt
   d5488:	4252      	neglt	r2, r2
   d548a:	9200      	str	r2, [sp, #0]
   d548c:	1a72      	subs	r2, r6, r1
   d548e:	2a00      	cmp	r2, #0
   d5490:	bfb8      	it	lt
   d5492:	4252      	neglt	r2, r2
   d5494:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d5496:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d5498:	9a00      	ldr	r2, [sp, #0]
   d549a:	9901      	ldr	r1, [sp, #4]
   d549c:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d549e:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d54a0:	dd05      	ble.n	d54ae <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d54a2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d54a4:	461e      	mov	r6, r3
   d54a6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d54a8:	4622      	mov	r2, r4
    swap(x0, y0);
   d54aa:	462c      	mov	r4, r5
   d54ac:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d54ae:	42b4      	cmp	r4, r6
   d54b0:	dd05      	ble.n	d54be <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d54b2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d54b4:	461d      	mov	r5, r3
   d54b6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d54b8:	4622      	mov	r2, r4
   d54ba:	4634      	mov	r4, r6
   d54bc:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d54be:	1b5a      	subs	r2, r3, r5
   d54c0:	2a00      	cmp	r2, #0
   d54c2:	bfb8      	it	lt
   d54c4:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d54c6:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d54ca:	429d      	cmp	r5, r3
   d54cc:	bfb4      	ite	lt
   d54ce:	2301      	movlt	r3, #1
   d54d0:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d54d4:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d54d8:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d54da:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d54dc:	fa0f f788 	sxth.w	r7, r8
   d54e0:	2202      	movs	r2, #2
   d54e2:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d54e6:	42b4      	cmp	r4, r6
   d54e8:	dc1f      	bgt.n	d552a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d54ea:	9a01      	ldr	r2, [sp, #4]
   d54ec:	9b00      	ldr	r3, [sp, #0]
   d54ee:	4293      	cmp	r3, r2
   d54f0:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d54f4:	bfc8      	it	gt
   d54f6:	4622      	movgt	r2, r4
   d54f8:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d54fc:	bfc8      	it	gt
   d54fe:	4629      	movgt	r1, r5
   d5500:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d5502:	bfdc      	itt	le
   d5504:	462a      	movle	r2, r5
   d5506:	4621      	movle	r1, r4
   d5508:	4648      	mov	r0, r9
   d550a:	47d8      	blx	fp
    }
    err -= dy;
   d550c:	9b03      	ldr	r3, [sp, #12]
   d550e:	1aff      	subs	r7, r7, r3
   d5510:	b2bb      	uxth	r3, r7
   d5512:	b21f      	sxth	r7, r3
    if (err < 0) {
   d5514:	2f00      	cmp	r7, #0
   d5516:	da05      	bge.n	d5524 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d5518:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d551a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d551e:	4415      	add	r5, r2
   d5520:	b22d      	sxth	r5, r5
      err += dx;
   d5522:	b23f      	sxth	r7, r7
   d5524:	3401      	adds	r4, #1
   d5526:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d5528:	e7dd      	b.n	d54e6 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d552a:	b005      	add	sp, #20
   d552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5530 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5530:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5534:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d5538:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d553a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d553e:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5540:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d5542:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d5544:	4691      	mov	r9, r2
   d5546:	460d      	mov	r5, r1
   d5548:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d554a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d554c:	6823      	ldr	r3, [r4, #0]
   d554e:	9600      	str	r6, [sp, #0]
   d5550:	f10a 32ff 	add.w	r2, sl, #4294967295
   d5554:	444a      	add	r2, r9
   d5556:	69df      	ldr	r7, [r3, #28]
   d5558:	4629      	mov	r1, r5
   d555a:	4643      	mov	r3, r8
   d555c:	4620      	mov	r0, r4
   d555e:	b212      	sxth	r2, r2
   d5560:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d5562:	6823      	ldr	r3, [r4, #0]
   d5564:	9600      	str	r6, [sp, #0]
   d5566:	699f      	ldr	r7, [r3, #24]
   d5568:	464a      	mov	r2, r9
   d556a:	4653      	mov	r3, sl
   d556c:	4629      	mov	r1, r5
   d556e:	4620      	mov	r0, r4
   d5570:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d5572:	6823      	ldr	r3, [r4, #0]
   d5574:	960a      	str	r6, [sp, #40]	; 0x28
   d5576:	f108 31ff 	add.w	r1, r8, #4294967295
   d557a:	4429      	add	r1, r5
   d557c:	699d      	ldr	r5, [r3, #24]
   d557e:	464a      	mov	r2, r9
   d5580:	4653      	mov	r3, sl
   d5582:	b209      	sxth	r1, r1
   d5584:	4620      	mov	r0, r4
   d5586:	46ac      	mov	ip, r5
}
   d5588:	b002      	add	sp, #8
   d558a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d558e:	4760      	bx	ip

000d5590 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d5590:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d5592:	3b01      	subs	r3, #1
   d5594:	4413      	add	r3, r2
   d5596:	6804      	ldr	r4, [r0, #0]
   d5598:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d559c:	9501      	str	r5, [sp, #4]
   d559e:	b21b      	sxth	r3, r3
   d55a0:	9300      	str	r3, [sp, #0]
   d55a2:	6964      	ldr	r4, [r4, #20]
   d55a4:	460b      	mov	r3, r1
   d55a6:	47a0      	blx	r4
}
   d55a8:	b003      	add	sp, #12
   d55aa:	bd30      	pop	{r4, r5, pc}

000d55ac <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d55ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d55ae:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d55b2:	6804      	ldr	r4, [r0, #0]
   d55b4:	e88d 0024 	stmia.w	sp, {r2, r5}
   d55b8:	3b01      	subs	r3, #1
   d55ba:	440b      	add	r3, r1
   d55bc:	6964      	ldr	r4, [r4, #20]
   d55be:	b21b      	sxth	r3, r3
   d55c0:	47a0      	blx	r4
}
   d55c2:	b003      	add	sp, #12
   d55c4:	bd30      	pop	{r4, r5, pc}

000d55c6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d55c6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d55ca:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d55ce:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d55d2:	4605      	mov	r5, r0
   d55d4:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d55d6:	460c      	mov	r4, r1
   d55d8:	eb01 0a03 	add.w	sl, r1, r3
   d55dc:	4554      	cmp	r4, sl
   d55de:	da0b      	bge.n	d55f8 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d55e0:	682b      	ldr	r3, [r5, #0]
   d55e2:	f8cd 9000 	str.w	r9, [sp]
   d55e6:	699e      	ldr	r6, [r3, #24]
   d55e8:	4621      	mov	r1, r4
   d55ea:	4643      	mov	r3, r8
   d55ec:	463a      	mov	r2, r7
   d55ee:	4628      	mov	r0, r5
   d55f0:	3401      	adds	r4, #1
   d55f2:	47b0      	blx	r6
   d55f4:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d55f6:	e7f1      	b.n	d55dc <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d55f8:	b002      	add	sp, #8
   d55fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d55fe <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d55fe:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d5600:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d5604:	6804      	ldr	r4, [r0, #0]
   d5606:	9101      	str	r1, [sp, #4]
   d5608:	9200      	str	r2, [sp, #0]
   d560a:	2200      	movs	r2, #0
   d560c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d5610:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d5612:	4611      	mov	r1, r2
   d5614:	47a0      	blx	r4
}
   d5616:	b002      	add	sp, #8
   d5618:	bd10      	pop	{r4, pc}

000d561a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d561a:	4770      	bx	lr

000d561c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d561c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d561e:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5620:	2400      	movs	r4, #0
   d5622:	4d08      	ldr	r5, [pc, #32]	; (d5644 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d5624:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d5626:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d5628:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d562a:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d562e:	2201      	movs	r2, #1
   d5630:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d5632:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d5634:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d5636:	8204      	strh	r4, [r0, #16]
   d5638:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d563a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d563c:	82c1      	strh	r1, [r0, #22]
   d563e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d5640:	7682      	strb	r2, [r0, #26]
}
   d5642:	bd30      	pop	{r4, r5, pc}
   d5644:	000d7e94 	.word	0x000d7e94

000d5648 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d564c:	b08f      	sub	sp, #60	; 0x3c
   d564e:	4605      	mov	r5, r0
   d5650:	9106      	str	r1, [sp, #24]
   d5652:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d5656:	9107      	str	r1, [sp, #28]
   d5658:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d565c:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d565e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d5662:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d5664:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d5668:	4281      	cmp	r1, r0
   d566a:	dd7c      	ble.n	d5766 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d566c:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d5670:	4291      	cmp	r1, r2
   d5672:	dd78      	ble.n	d5766 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d5674:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d5676:	fb11 0008 	smlabb	r0, r1, r8, r0
   d567a:	2800      	cmp	r0, #0
   d567c:	dd73      	ble.n	d5766 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d567e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d5682:	2800      	cmp	r0, #0
   d5684:	dd6f      	ble.n	d5766 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d5686:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d568a:	b296      	uxth	r6, r2
   d568c:	930c      	str	r3, [sp, #48]	; 0x30
   d568e:	f106 0308 	add.w	r3, r6, #8
   d5692:	b29b      	uxth	r3, r3
   d5694:	9109      	str	r1, [sp, #36]	; 0x24
   d5696:	2400      	movs	r4, #0
   d5698:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d569a:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d569c:	bf1c      	itt	ne
   d569e:	4b33      	ldrne	r3, [pc, #204]	; (d576c <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d56a0:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56a2:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d56a4:	bf16      	itet	ne
   d56a6:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d56a8:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d56ac:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56b0:	9604      	str	r6, [sp, #16]
   d56b2:	fa1f f388 	uxth.w	r3, r8
   d56b6:	9303      	str	r3, [sp, #12]
   d56b8:	9a03      	ldr	r2, [sp, #12]
   d56ba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d56be:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d56c2:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56c6:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d56c8:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56ca:	920a      	str	r2, [sp, #40]	; 0x28
   d56cc:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d56ce:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d56d2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d56d4:	f019 0f01 	tst.w	r9, #1
   d56d8:	d011      	beq.n	d56fe <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d56da:	f1b8 0f01 	cmp.w	r8, #1
   d56de:	682b      	ldr	r3, [r5, #0]
   d56e0:	d103      	bne.n	d56ea <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d56e2:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d56e6:	9b07      	ldr	r3, [sp, #28]
   d56e8:	e014      	b.n	d5714 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d56ea:	9a07      	ldr	r2, [sp, #28]
   d56ec:	9201      	str	r2, [sp, #4]
   d56ee:	f8cd a000 	str.w	sl, [sp]
   d56f2:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d56f6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d56fa:	4653      	mov	r3, sl
   d56fc:	e018      	b.n	d5730 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d56fe:	9b07      	ldr	r3, [sp, #28]
   d5700:	9a08      	ldr	r2, [sp, #32]
   d5702:	4293      	cmp	r3, r2
   d5704:	d017      	beq.n	d5736 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d5706:	f1b8 0f01 	cmp.w	r8, #1
   d570a:	682b      	ldr	r3, [r5, #0]
   d570c:	d107      	bne.n	d571e <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d570e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d5712:	4613      	mov	r3, r2
   d5714:	b23a      	sxth	r2, r7
   d5716:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d5718:	4628      	mov	r0, r5
   d571a:	47d8      	blx	fp
   d571c:	e00b      	b.n	d5736 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d571e:	9a08      	ldr	r2, [sp, #32]
   d5720:	9201      	str	r2, [sp, #4]
   d5722:	f8cd a000 	str.w	sl, [sp]
   d5726:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d572a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d572e:	4653      	mov	r3, sl
   d5730:	990a      	ldr	r1, [sp, #40]	; 0x28
   d5732:	4628      	mov	r0, r5
   d5734:	47d8      	blx	fp
   d5736:	9b04      	ldr	r3, [sp, #16]
   d5738:	9a03      	ldr	r2, [sp, #12]
   d573a:	4413      	add	r3, r2
   d573c:	b29b      	uxth	r3, r3
   d573e:	9304      	str	r3, [sp, #16]
   d5740:	9b05      	ldr	r3, [sp, #20]
   d5742:	4413      	add	r3, r2
   d5744:	b29b      	uxth	r3, r3
   d5746:	3701      	adds	r7, #1
   d5748:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d574a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d574c:	b2bf      	uxth	r7, r7
   d574e:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d5750:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5754:	d1be      	bne.n	d56d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d5756:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5758:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d575a:	3401      	adds	r4, #1
   d575c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d5760:	b264      	sxtb	r4, r4
   d5762:	9309      	str	r3, [sp, #36]	; 0x24
   d5764:	d199      	bne.n	d569a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d5766:	b00f      	add	sp, #60	; 0x3c
   d5768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d576c:	000d7ec4 	.word	0x000d7ec4

000d5770 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5770:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d5772:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5774:	b085      	sub	sp, #20
   d5776:	4604      	mov	r4, r0
   d5778:	460b      	mov	r3, r1

  if (c == '\n') {
   d577a:	d104      	bne.n	d5786 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d577c:	7e02      	ldrb	r2, [r0, #24]
   d577e:	8a43      	ldrh	r3, [r0, #18]
   d5780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5784:	e023      	b.n	d57ce <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d5786:	290d      	cmp	r1, #13
   d5788:	d024      	beq.n	d57d4 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d578a:	7e05      	ldrb	r5, [r0, #24]
   d578c:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d5790:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5794:	9502      	str	r5, [sp, #8]
   d5796:	8ac5      	ldrh	r5, [r0, #22]
   d5798:	9501      	str	r5, [sp, #4]
   d579a:	8a85      	ldrh	r5, [r0, #20]
   d579c:	9500      	str	r5, [sp, #0]
   d579e:	f7ff ff53 	bl	d5648 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d57a2:	7e22      	ldrb	r2, [r4, #24]
   d57a4:	8a23      	ldrh	r3, [r4, #16]
   d57a6:	b291      	uxth	r1, r2
   d57a8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d57ac:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d57b0:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d57b2:	b21b      	sxth	r3, r3
   d57b4:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d57b6:	b168      	cbz	r0, d57d4 <_ZN12Adafruit_GFX5writeEh+0x64>
   d57b8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d57bc:	f06f 0505 	mvn.w	r5, #5
   d57c0:	fb05 0202 	mla	r2, r5, r2, r0
   d57c4:	4293      	cmp	r3, r2
   d57c6:	dd05      	ble.n	d57d4 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d57c8:	8a63      	ldrh	r3, [r4, #18]
   d57ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d57ce:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d57d0:	2300      	movs	r3, #0
   d57d2:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d57d4:	2001      	movs	r0, #1
   d57d6:	b005      	add	sp, #20
   d57d8:	bd30      	pop	{r4, r5, pc}

000d57da <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d57da:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d57dc:	8242      	strh	r2, [r0, #18]
   d57de:	4770      	bx	lr

000d57e0 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d57e0:	2900      	cmp	r1, #0
   d57e2:	bf08      	it	eq
   d57e4:	2101      	moveq	r1, #1
   d57e6:	7601      	strb	r1, [r0, #24]
   d57e8:	4770      	bx	lr

000d57ea <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d57ea:	82c1      	strh	r1, [r0, #22]
   d57ec:	8281      	strh	r1, [r0, #20]
   d57ee:	4770      	bx	lr

000d57f0 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d57f0:	7e40      	ldrb	r0, [r0, #25]
   d57f2:	4770      	bx	lr

000d57f4 <_ZN12Adafruit_GFX11setRotationEh>:

void Adafruit_GFX::setRotation(uint8_t x) {
  rotation = (x & 3);
   d57f4:	f001 0103 	and.w	r1, r1, #3
  switch(rotation) {
   d57f8:	2901      	cmp	r1, #1
uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}

void Adafruit_GFX::setRotation(uint8_t x) {
  rotation = (x & 3);
   d57fa:	7641      	strb	r1, [r0, #25]
   d57fc:	8903      	ldrh	r3, [r0, #8]
   d57fe:	8942      	ldrh	r2, [r0, #10]
  switch(rotation) {
   d5800:	d004      	beq.n	d580c <_ZN12Adafruit_GFX11setRotationEh+0x18>
   d5802:	2903      	cmp	r1, #3
   d5804:	d002      	beq.n	d580c <_ZN12Adafruit_GFX11setRotationEh+0x18>
   case 0:
   case 2:
    _width  = WIDTH;
   d5806:	8183      	strh	r3, [r0, #12]
    _height = HEIGHT;
   d5808:	81c2      	strh	r2, [r0, #14]
    break;
   d580a:	4770      	bx	lr
   case 1:
   case 3:
    _width  = HEIGHT;
   d580c:	8182      	strh	r2, [r0, #12]
    _height = WIDTH;
   d580e:	81c3      	strh	r3, [r0, #14]
   d5810:	4770      	bx	lr

000d5812 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d5812:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d5816:	4770      	bx	lr

000d5818 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d5818:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d581c:	4770      	bx	lr

000d581e <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d581e:	f000 badd 	b.w	d5ddc <HAL_Pin_Map>
	...

000d5824 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5824:	b510      	push	{r4, lr}
   d5826:	4b05      	ldr	r3, [pc, #20]	; (d583c <_ZN10JsonBufferD1Ev+0x18>)
   d5828:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d582a:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d582c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d582e:	b91b      	cbnz	r3, d5838 <_ZN10JsonBufferD1Ev+0x14>
   d5830:	6840      	ldr	r0, [r0, #4]
   d5832:	b108      	cbz	r0, d5838 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5834:	f000 fd0e 	bl	d6254 <free>
	}
}
   d5838:	4620      	mov	r0, r4
   d583a:	bd10      	pop	{r4, pc}
   d583c:	000d83c8 	.word	0x000d83c8

000d5840 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5840:	b510      	push	{r4, lr}
   d5842:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5844:	f7ff ffee 	bl	d5824 <_ZN10JsonBufferD1Ev>
   d5848:	4620      	mov	r0, r4
   d584a:	2114      	movs	r1, #20
   d584c:	f001 ff9a 	bl	d7784 <_ZdlPvj>
   d5850:	4620      	mov	r0, r4
   d5852:	bd10      	pop	{r4, pc}

000d5854 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5854:	b510      	push	{r4, lr}
   d5856:	4b03      	ldr	r3, [pc, #12]	; (d5864 <_ZN10JsonWriterD1Ev+0x10>)
   d5858:	6003      	str	r3, [r0, #0]
   d585a:	4604      	mov	r4, r0
   d585c:	f7ff ffe2 	bl	d5824 <_ZN10JsonBufferD1Ev>

}
   d5860:	4620      	mov	r0, r4
   d5862:	bd10      	pop	{r4, pc}
   d5864:	000d83d8 	.word	0x000d83d8

000d5868 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5868:	b510      	push	{r4, lr}
   d586a:	4604      	mov	r4, r0

}
   d586c:	f7ff fff2 	bl	d5854 <_ZN10JsonWriterD1Ev>
   d5870:	4620      	mov	r0, r4
   d5872:	2130      	movs	r1, #48	; 0x30
   d5874:	f001 ff86 	bl	d7784 <_ZdlPvj>
   d5878:	4620      	mov	r0, r4
   d587a:	bd10      	pop	{r4, pc}

000d587c <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d587c:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d587e:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d5880:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d5882:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d5884:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d5886:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d5888:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d588c:	4770      	bx	lr
	...

000d5890 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5890:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d5892:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d5894:	60c3      	str	r3, [r0, #12]
   d5896:	2301      	movs	r3, #1
   d5898:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d589a:	4b05      	ldr	r3, [pc, #20]	; (d58b0 <_ZN10JsonWriterC1EPcj+0x20>)
   d589c:	6003      	str	r3, [r0, #0]
   d589e:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d58a2:	6041      	str	r1, [r0, #4]
   d58a4:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d58a6:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d58a8:	f7ff ffe8 	bl	d587c <_ZN10JsonWriter4initEv>
}
   d58ac:	bd10      	pop	{r4, pc}
   d58ae:	bf00      	nop
   d58b0:	000d83d8 	.word	0x000d83d8

000d58b4 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d58b4:	68c3      	ldr	r3, [r0, #12]
   d58b6:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d58b8:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d58ba:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d58bc:	bf3f      	itttt	cc
   d58be:	6842      	ldrcc	r2, [r0, #4]
   d58c0:	1c5c      	addcc	r4, r3, #1
   d58c2:	60c4      	strcc	r4, [r0, #12]
   d58c4:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d58c6:	bf24      	itt	cs
   d58c8:	2301      	movcs	r3, #1
   d58ca:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d58ce:	bd10      	pop	{r4, pc}

000d58d0 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d58d0:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d58d2:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d58d4:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d58d6:	b143      	cbz	r3, d58ea <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d58d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d58dc:	7e59      	ldrb	r1, [r3, #25]
   d58de:	b109      	cbz	r1, d58e4 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d58e0:	f7ff ffe8 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d58e4:	6963      	ldr	r3, [r4, #20]
   d58e6:	3b01      	subs	r3, #1
   d58e8:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d58ea:	68a3      	ldr	r3, [r4, #8]
   d58ec:	68e0      	ldr	r0, [r4, #12]
   d58ee:	6861      	ldr	r1, [r4, #4]
   d58f0:	4298      	cmp	r0, r3
   d58f2:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d58f6:	bf2a      	itet	cs
   d58f8:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d58fa:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d58fc:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5900:	bd10      	pop	{r4, pc}

000d5902 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5902:	b570      	push	{r4, r5, r6, lr}
   d5904:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5906:	68c0      	ldr	r0, [r0, #12]
   d5908:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d590a:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d590c:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d590e:	4613      	mov	r3, r2
   d5910:	4430      	add	r0, r6
   d5912:	460a      	mov	r2, r1
   d5914:	4629      	mov	r1, r5
   d5916:	f000 fcad 	bl	d6274 <vsnprintf>
	if (count <= spaceAvailable) {
   d591a:	4285      	cmp	r5, r0
		offset += count;
   d591c:	bf2d      	iteet	cs
   d591e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5920:	68a3      	ldrcc	r3, [r4, #8]
   d5922:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5924:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5926:	bf36      	itet	cc
   d5928:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d592a:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d592c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5930:	bd70      	pop	{r4, r5, r6, pc}

000d5932 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5932:	b40e      	push	{r1, r2, r3}
   d5934:	b503      	push	{r0, r1, lr}
   d5936:	aa03      	add	r2, sp, #12
   d5938:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d593c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d593e:	f7ff ffe0 	bl	d5902 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5942:	b002      	add	sp, #8
   d5944:	f85d eb04 	ldr.w	lr, [sp], #4
   d5948:	b003      	add	sp, #12
   d594a:	4770      	bx	lr

000d594c <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5950:	4604      	mov	r4, r0
   d5952:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5954:	4617      	mov	r7, r2
   d5956:	b112      	cbz	r2, d595e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5958:	2122      	movs	r1, #34	; 0x22
   d595a:	f7ff ffab 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d595e:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5960:	5d71      	ldrb	r1, [r6, r5]
   d5962:	eb06 0805 	add.w	r8, r6, r5
   d5966:	2900      	cmp	r1, #0
   d5968:	d071      	beq.n	d5a4e <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d596a:	68e2      	ldr	r2, [r4, #12]
   d596c:	68a3      	ldr	r3, [r4, #8]
   d596e:	429a      	cmp	r2, r3
   d5970:	d26d      	bcs.n	d5a4e <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d5972:	060b      	lsls	r3, r1, #24
   d5974:	d533      	bpl.n	d59de <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d5976:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d597a:	2be0      	cmp	r3, #224	; 0xe0
   d597c:	d117      	bne.n	d59ae <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d597e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d5982:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5986:	2a80      	cmp	r2, #128	; 0x80
   d5988:	d111      	bne.n	d59ae <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d598a:	f105 0802 	add.w	r8, r5, #2
   d598e:	f816 2008 	ldrb.w	r2, [r6, r8]
   d5992:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d5996:	2880      	cmp	r0, #128	; 0x80
   d5998:	d109      	bne.n	d59ae <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d599a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d599e:	019b      	lsls	r3, r3, #6
   d59a0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d59a4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d59a8:	431a      	orrs	r2, r3
   d59aa:	b292      	uxth	r2, r2
   d59ac:	e011      	b.n	d59d2 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d59ae:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d59b2:	2bc0      	cmp	r3, #192	; 0xc0
   d59b4:	d146      	bne.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d59b6:	f105 0801 	add.w	r8, r5, #1
   d59ba:	f816 3008 	ldrb.w	r3, [r6, r8]
   d59be:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d59c2:	2a80      	cmp	r2, #128	; 0x80
   d59c4:	d13e      	bne.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d59c6:	0189      	lsls	r1, r1, #6
   d59c8:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d59cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d59d0:	431a      	orrs	r2, r3
   d59d2:	4923      	ldr	r1, [pc, #140]	; (d5a60 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d59d4:	4620      	mov	r0, r4
   d59d6:	f7ff ffac 	bl	d5932 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d59da:	4645      	mov	r5, r8
   d59dc:	e035      	b.n	d5a4a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d59de:	290c      	cmp	r1, #12
   d59e0:	d018      	beq.n	d5a14 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d59e2:	d80b      	bhi.n	d59fc <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d59e4:	2909      	cmp	r1, #9
   d59e6:	d021      	beq.n	d5a2c <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d59e8:	290a      	cmp	r1, #10
   d59ea:	d019      	beq.n	d5a20 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d59ec:	2908      	cmp	r1, #8
   d59ee:	d129      	bne.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d59f0:	215c      	movs	r1, #92	; 0x5c
   d59f2:	4620      	mov	r0, r4
   d59f4:	f7ff ff5e 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d59f8:	2162      	movs	r1, #98	; 0x62
   d59fa:	e023      	b.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d59fc:	2922      	cmp	r1, #34	; 0x22
   d59fe:	d01b      	beq.n	d5a38 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5a00:	295c      	cmp	r1, #92	; 0x5c
   d5a02:	d019      	beq.n	d5a38 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5a04:	290d      	cmp	r1, #13
   d5a06:	d11d      	bne.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d5a08:	215c      	movs	r1, #92	; 0x5c
   d5a0a:	4620      	mov	r0, r4
   d5a0c:	f7ff ff52 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5a10:	2172      	movs	r1, #114	; 0x72
   d5a12:	e017      	b.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5a14:	215c      	movs	r1, #92	; 0x5c
   d5a16:	4620      	mov	r0, r4
   d5a18:	f7ff ff4c 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d5a1c:	2166      	movs	r1, #102	; 0x66
   d5a1e:	e011      	b.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5a20:	215c      	movs	r1, #92	; 0x5c
   d5a22:	4620      	mov	r0, r4
   d5a24:	f7ff ff46 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5a28:	216e      	movs	r1, #110	; 0x6e
   d5a2a:	e00b      	b.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d5a2c:	215c      	movs	r1, #92	; 0x5c
   d5a2e:	4620      	mov	r0, r4
   d5a30:	f7ff ff40 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5a34:	2174      	movs	r1, #116	; 0x74
   d5a36:	e005      	b.n	d5a44 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5a38:	215c      	movs	r1, #92	; 0x5c
   d5a3a:	4620      	mov	r0, r4
   d5a3c:	f7ff ff3a 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5a40:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5a44:	4620      	mov	r0, r4
   d5a46:	f7ff ff35 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d5a4a:	3501      	adds	r5, #1
   d5a4c:	e788      	b.n	d5960 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d5a4e:	b12f      	cbz	r7, d5a5c <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5a50:	4620      	mov	r0, r4
   d5a52:	2122      	movs	r1, #34	; 0x22
	}

}
   d5a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5a58:	f7ff bf2c 	b.w	d58b4 <_ZN10JsonWriter10insertCharEc>
   d5a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a60:	000d83e9 	.word	0x000d83e9

000d5a64 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d5a64:	6942      	ldr	r2, [r0, #20]
   d5a66:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d5a6a:	7e1a      	ldrb	r2, [r3, #24]
   d5a6c:	b112      	cbz	r2, d5a74 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d5a6e:	2200      	movs	r2, #0
   d5a70:	761a      	strb	r2, [r3, #24]
   d5a72:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d5a74:	212c      	movs	r1, #44	; 0x2c
   d5a76:	f7ff bf1d 	b.w	d58b4 <_ZN10JsonWriter10insertCharEc>

000d5a7a <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5a7c:	6943      	ldr	r3, [r0, #20]
   d5a7e:	3301      	adds	r3, #1
   d5a80:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d5a82:	460e      	mov	r6, r1
   d5a84:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d5a86:	d80e      	bhi.n	d5aa6 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d5a88:	f7ff ffec 	bl	d5a64 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d5a8c:	6943      	ldr	r3, [r0, #20]
   d5a8e:	1c5a      	adds	r2, r3, #1
   d5a90:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d5a94:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d5a96:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d5a98:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d5a9a:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d5a9c:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d5a9e:	f7ff ff09 	bl	d58b4 <_ZN10JsonWriter10insertCharEc>
   d5aa2:	4620      	mov	r0, r4
   d5aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d5aa6:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d5aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5aaa <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d5aaa:	f000 b997 	b.w	d5ddc <HAL_Pin_Map>

000d5aae <_ZN13I2COperations12set_iic_addrEh>:
/**
    @brief change the I2C address from default.
    @param IIC_ADDR: I2C address to be set
*/
void I2COperations::set_iic_addr(uint8_t IIC_ADDR) {
    _IIC_ADDR = IIC_ADDR;
   d5aae:	7001      	strb	r1, [r0, #0]
   d5ab0:	4770      	bx	lr

000d5ab2 <_ZN13I2COperations12IIC_SEND_CMDEh>:
}

HM330XErrorCode I2COperations::IIC_SEND_CMD(uint8_t CMD) {
   d5ab2:	b538      	push	{r3, r4, r5, lr}
   d5ab4:	4605      	mov	r5, r0
   d5ab6:	460c      	mov	r4, r1
    Wire.beginTransmission(_IIC_ADDR);
   d5ab8:	f001 fe30 	bl	d771c <_Z19__fetch_global_Wirev>
   d5abc:	7829      	ldrb	r1, [r5, #0]
   d5abe:	f001 fbcc 	bl	d725a <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(CMD);
   d5ac2:	f001 fe2b 	bl	d771c <_Z19__fetch_global_Wirev>
   d5ac6:	6803      	ldr	r3, [r0, #0]
   d5ac8:	4621      	mov	r1, r4
   d5aca:	689b      	ldr	r3, [r3, #8]
   d5acc:	4798      	blx	r3
    byte ret = Wire.endTransmission();
   d5ace:	f001 fe25 	bl	d771c <_Z19__fetch_global_Wirev>
   d5ad2:	f001 fbcd 	bl	d7270 <_ZN7TwoWire15endTransmissionEv>
    if (ret == 0) {
   d5ad6:	2800      	cmp	r0, #0
        return NO_ERROR1;
    } else {
        return ERROR_COMM;
    }
}
   d5ad8:	bf14      	ite	ne
   d5ada:	f06f 0001 	mvnne.w	r0, #1
   d5ade:	2000      	moveq	r0, #0
   d5ae0:	bd38      	pop	{r3, r4, r5, pc}

000d5ae2 <_GLOBAL__sub_I__ZN13I2COperations14IIC_write_byteEhh>:
   d5ae2:	f000 b97b 	b.w	d5ddc <HAL_Pin_Map>

000d5ae6 <_ZN6HM330XC1Eh>:
    THE SOFTWARE.
*/

#include "Seeed_HM330X.h"

HM330X::HM330X(uint8_t IIC_ADDR) {
   d5ae6:	b510      	push	{r4, lr}
   d5ae8:	4604      	mov	r4, r0
    set_iic_addr(IIC_ADDR);
   d5aea:	f7ff ffe0 	bl	d5aae <_ZN13I2COperations12set_iic_addrEh>
}
   d5aee:	4620      	mov	r0, r4
   d5af0:	bd10      	pop	{r4, pc}

000d5af2 <_ZN6HM330X11select_commEv>:

HM330XErrorCode HM330X::select_comm() {
    return IIC_SEND_CMD(SELECT_COMM_CMD);
   d5af2:	2188      	movs	r1, #136	; 0x88
   d5af4:	f7ff bfdd 	b.w	d5ab2 <_ZN13I2COperations12IIC_SEND_CMDEh>

000d5af8 <_ZN6HM330X4initEv>:
}

HM330XErrorCode HM330X::init() {
   d5af8:	b510      	push	{r4, lr}
   d5afa:	4604      	mov	r4, r0
    Wire.begin();
   d5afc:	f001 fe0e 	bl	d771c <_Z19__fetch_global_Wirev>
   d5b00:	f001 fb74 	bl	d71ec <_ZN7TwoWire5beginEv>
    return select_comm();
   d5b04:	4620      	mov	r0, r4
}
   d5b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return IIC_SEND_CMD(SELECT_COMM_CMD);
}

HM330XErrorCode HM330X::init() {
    Wire.begin();
    return select_comm();
   d5b0a:	f7ff bff2 	b.w	d5af2 <_ZN6HM330X11select_commEv>

000d5b0e <_ZN6HM330X17read_sensor_valueEPhm>:
}

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
   d5b0e:	b570      	push	{r4, r5, r6, lr}
   d5b10:	460c      	mov	r4, r1
   d5b12:	4615      	mov	r5, r2
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
   d5b14:	f001 fe02 	bl	d771c <_Z19__fetch_global_Wirev>
   d5b18:	221d      	movs	r2, #29
   d5b1a:	2140      	movs	r1, #64	; 0x40
   d5b1c:	f001 fb9a 	bl	d7254 <_ZN7TwoWire11requestFromEhj>
   d5b20:	260b      	movs	r6, #11
    while (data_len != Wire.available()) {
   d5b22:	f001 fdfb 	bl	d771c <_Z19__fetch_global_Wirev>
   d5b26:	6803      	ldr	r3, [r0, #0]
   d5b28:	691b      	ldr	r3, [r3, #16]
   d5b2a:	4798      	blx	r3
   d5b2c:	42a8      	cmp	r0, r5
   d5b2e:	d005      	beq.n	d5b3c <_ZN6HM330X17read_sensor_valueEPhm+0x2e>
        time_out_count++;
        if (time_out_count > 10) {
   d5b30:	3e01      	subs	r6, #1
   d5b32:	d00e      	beq.n	d5b52 <_ZN6HM330X17read_sensor_valueEPhm+0x44>
            return ERROR_COMM;
        }
        delay(1);
   d5b34:	2001      	movs	r0, #1
   d5b36:	f000 fe0f 	bl	d6758 <delay>

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
   d5b3a:	e7f2      	b.n	d5b22 <_ZN6HM330X17read_sensor_valueEPhm+0x14>
   d5b3c:	4425      	add	r5, r4
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d5b3e:	42a5      	cmp	r5, r4
   d5b40:	d00a      	beq.n	d5b58 <_ZN6HM330X17read_sensor_valueEPhm+0x4a>
        data[i] = Wire.read();
   d5b42:	f001 fdeb 	bl	d771c <_Z19__fetch_global_Wirev>
   d5b46:	6803      	ldr	r3, [r0, #0]
   d5b48:	695b      	ldr	r3, [r3, #20]
   d5b4a:	4798      	blx	r3
   d5b4c:	f804 0b01 	strb.w	r0, [r4], #1
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d5b50:	e7f5      	b.n	d5b3e <_ZN6HM330X17read_sensor_valueEPhm+0x30>
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
        time_out_count++;
        if (time_out_count > 10) {
            return ERROR_COMM;
   d5b52:	f06f 0001 	mvn.w	r0, #1
   d5b56:	bd70      	pop	{r4, r5, r6, pc}
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
        data[i] = Wire.read();
    }
    return ret;
   d5b58:	2000      	movs	r0, #0
}
   d5b5a:	bd70      	pop	{r4, r5, r6, pc}

000d5b5c <_GLOBAL__sub_I__ZN6HM330XC2Eh>:
   d5b5c:	f000 b93e 	b.w	d5ddc <HAL_Pin_Map>

000d5b60 <_ZN9OneButtonC1Eiib>:
{
  _pin = -1;
  // further initialization has moved to OneButton.h
}

OneButton::OneButton(int pin, int activeLow, bool pullupActive)
   d5b60:	b538      	push	{r3, r4, r5, lr}
   d5b62:	4604      	mov	r4, r0
   d5b64:	4608      	mov	r0, r1
   d5b66:	2132      	movs	r1, #50	; 0x32
   d5b68:	6061      	str	r1, [r4, #4]
   d5b6a:	f44f 7116 	mov.w	r1, #600	; 0x258
   d5b6e:	2500      	movs	r5, #0
   d5b70:	60a1      	str	r1, [r4, #8]
   d5b72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5b76:	60e1      	str	r1, [r4, #12]
   d5b78:	7525      	strb	r5, [r4, #20]
   d5b7a:	61a5      	str	r5, [r4, #24]
   d5b7c:	61e5      	str	r5, [r4, #28]
   d5b7e:	6225      	str	r5, [r4, #32]
   d5b80:	6265      	str	r5, [r4, #36]	; 0x24
   d5b82:	62a5      	str	r5, [r4, #40]	; 0x28
   d5b84:	62e5      	str	r5, [r4, #44]	; 0x2c
   d5b86:	6325      	str	r5, [r4, #48]	; 0x30
   d5b88:	6365      	str	r5, [r4, #52]	; 0x34
   d5b8a:	63a5      	str	r5, [r4, #56]	; 0x38
   d5b8c:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5b8e:	6425      	str	r5, [r4, #64]	; 0x40
   d5b90:	6465      	str	r5, [r4, #68]	; 0x44
   d5b92:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5b94:	6525      	str	r5, [r4, #80]	; 0x50
   d5b96:	6565      	str	r5, [r4, #84]	; 0x54
   d5b98:	65a5      	str	r5, [r4, #88]	; 0x58
{
  // OneButton();
  _pin = pin;
   d5b9a:	6020      	str	r0, [r4, #0]

  if (activeLow) {
   d5b9c:	b10a      	cbz	r2, d5ba2 <_ZN9OneButtonC1Eiib+0x42>
    // the button connects the input pin to GND when pressed.
    _buttonPressed = LOW;
   d5b9e:	6125      	str	r5, [r4, #16]
   d5ba0:	e001      	b.n	d5ba6 <_ZN9OneButtonC1Eiib+0x46>

  } else {
    // the button connects the input pin to VCC when pressed.
    _buttonPressed = HIGH;
   d5ba2:	2201      	movs	r2, #1
   d5ba4:	6122      	str	r2, [r4, #16]
   d5ba6:	b280      	uxth	r0, r0
  } // if

  if (pullupActive) {
   d5ba8:	b10b      	cbz	r3, d5bae <_ZN9OneButtonC1Eiib+0x4e>
    // use the given pin as input and activate internal PULLUP resistor.
    pinMode(pin, INPUT_PULLUP);
   d5baa:	2102      	movs	r1, #2
   d5bac:	e000      	b.n	d5bb0 <_ZN9OneButtonC1Eiib+0x50>
  } else {
    // use the given pin as input
    pinMode(pin, INPUT);
   d5bae:	4619      	mov	r1, r3
   d5bb0:	f001 fd3a 	bl	d7628 <pinMode>
  } // if
} // OneButton
   d5bb4:	4620      	mov	r0, r4
   d5bb6:	bd38      	pop	{r3, r4, r5, pc}

000d5bb8 <_ZN9OneButton13setPressTicksEi>:

// explicitly set the number of millisec that have to pass by before a long
// button press is detected.
void OneButton::setPressTicks(int ticks)
{
  _pressTicks = ticks;
   d5bb8:	60c1      	str	r1, [r0, #12]
   d5bba:	4770      	bx	lr

000d5bbc <_ZN9OneButton11attachClickEPFvvE>:


// save function for click event
void OneButton::attachClick(callbackFunction newFunction)
{
  _clickFunc = newFunction;
   d5bbc:	6181      	str	r1, [r0, #24]
   d5bbe:	4770      	bx	lr

000d5bc0 <_ZN9OneButton21attachDuringLongPressEPFvvE>:
} // attachLongPressStop

// save function for during longPress event
void OneButton::attachDuringLongPress(callbackFunction newFunction)
{
  _duringLongPressFunc = newFunction;
   d5bc0:	64c1      	str	r1, [r0, #76]	; 0x4c
   d5bc2:	4770      	bx	lr

000d5bc4 <_ZN9OneButton4tickEb>:

/**
 * @brief Advance the finite state machine (FSM) using the given level.
 */
void OneButton::tick(bool activeLevel)
{
   d5bc4:	b570      	push	{r4, r5, r6, lr}
   d5bc6:	4604      	mov	r4, r0
   d5bc8:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5bca:	f000 f98f 	bl	d5eec <HAL_Timer_Get_Milli_Seconds>
  unsigned long now = millis(); // current (relative) time in msecs.

  // Implementation of the state machine

  if (_state == 0) { // waiting for menu pin being pressed.
   d5bce:	6da3      	ldr	r3, [r4, #88]	; 0x58
   d5bd0:	4605      	mov	r5, r0
   d5bd2:	b91b      	cbnz	r3, d5bdc <_ZN9OneButton4tickEb+0x18>
    if (activeLevel) {
   d5bd4:	2e00      	cmp	r6, #0
   d5bd6:	d06d      	beq.n	d5cb4 <_ZN9OneButton4tickEb+0xf0>
      _state = 1; // step to state 1
   d5bd8:	2301      	movs	r3, #1
   d5bda:	e03f      	b.n	d5c5c <_ZN9OneButton4tickEb+0x98>
      _startTime = now; // remember starting time
    } // if

  } else if (_state == 1) { // waiting for menu pin being released.
   d5bdc:	2b01      	cmp	r3, #1
   d5bde:	d121      	bne.n	d5c24 <_ZN9OneButton4tickEb+0x60>
   d5be0:	6de2      	ldr	r2, [r4, #92]	; 0x5c

    if ((!activeLevel) &&
   d5be2:	1a82      	subs	r2, r0, r2
   d5be4:	b93e      	cbnz	r6, d5bf6 <_ZN9OneButton4tickEb+0x32>
   d5be6:	6863      	ldr	r3, [r4, #4]
   d5be8:	429a      	cmp	r2, r3
   d5bea:	d202      	bcs.n	d5bf2 <_ZN9OneButton4tickEb+0x2e>
        ((unsigned long)(now - _startTime) < _debounceTicks)) {
      // button was released to quickly so I assume some debouncing.
      // go back to state 0 without calling a function.
      _state = 0;
   d5bec:	2300      	movs	r3, #0
   d5bee:	65a3      	str	r3, [r4, #88]	; 0x58
   d5bf0:	bd70      	pop	{r4, r5, r6, pc}

    } else if (!activeLevel) {
      _state = 2; // step to state 2
   d5bf2:	2302      	movs	r3, #2
   d5bf4:	e050      	b.n	d5c98 <_ZN9OneButton4tickEb+0xd4>
      _stopTime = now; // remember stopping time

    } else if ((activeLevel) &&
   d5bf6:	68e1      	ldr	r1, [r4, #12]
   d5bf8:	428a      	cmp	r2, r1
   d5bfa:	d95b      	bls.n	d5cb4 <_ZN9OneButton4tickEb+0xf0>
               ((unsigned long)(now - _startTime) > _pressTicks)) {
      _isLongPressed = true; // Keep track of long press state
   d5bfc:	7523      	strb	r3, [r4, #20]
      if (_pressFunc)
   d5bfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   d5c00:	b103      	cbz	r3, d5c04 <_ZN9OneButton4tickEb+0x40>
        _pressFunc();
   d5c02:	4798      	blx	r3
      if (_longPressStartFunc)
   d5c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5c06:	b103      	cbz	r3, d5c0a <_ZN9OneButton4tickEb+0x46>
        _longPressStartFunc();
   d5c08:	4798      	blx	r3
      if (_paramLongPressStartFunc)
   d5c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5c0c:	b10b      	cbz	r3, d5c12 <_ZN9OneButton4tickEb+0x4e>
        _paramLongPressStartFunc(_longPressStartFuncParam);
   d5c0e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   d5c10:	4798      	blx	r3
      if (_duringLongPressFunc)
   d5c12:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d5c14:	b103      	cbz	r3, d5c18 <_ZN9OneButton4tickEb+0x54>
        _duringLongPressFunc();
   d5c16:	4798      	blx	r3
      if (_paramDuringLongPressFunc)
   d5c18:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5c1a:	b10b      	cbz	r3, d5c20 <_ZN9OneButton4tickEb+0x5c>
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d5c1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   d5c1e:	4798      	blx	r3
      _state = 6; // step to state 6
   d5c20:	2306      	movs	r3, #6
   d5c22:	e039      	b.n	d5c98 <_ZN9OneButton4tickEb+0xd4>
      _stopTime = now; // remember stopping time
    } else {
      // wait. Stay in this state.
    } // if

  } else if (_state == 2) {
   d5c24:	2b02      	cmp	r3, #2
   d5c26:	d11c      	bne.n	d5c62 <_ZN9OneButton4tickEb+0x9e>
    // waiting for menu pin being pressed the second time or timeout.
    if ((_doubleClickFunc == NULL && _paramDoubleClickFunc == NULL) ||
   d5c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c2a:	b90b      	cbnz	r3, d5c30 <_ZN9OneButton4tickEb+0x6c>
   d5c2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5c2e:	b123      	cbz	r3, d5c3a <_ZN9OneButton4tickEb+0x76>
   d5c30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   d5c32:	68a2      	ldr	r2, [r4, #8]
   d5c34:	1aeb      	subs	r3, r5, r3
   d5c36:	4293      	cmp	r3, r2
   d5c38:	d908      	bls.n	d5c4c <_ZN9OneButton4tickEb+0x88>
        (unsigned long)(now - _startTime) > _clickTicks) {
      // this was only a single short click
      if (_clickFunc)
   d5c3a:	69a3      	ldr	r3, [r4, #24]
   d5c3c:	b103      	cbz	r3, d5c40 <_ZN9OneButton4tickEb+0x7c>
        _clickFunc();
   d5c3e:	4798      	blx	r3
      if (_paramClickFunc)
   d5c40:	69e3      	ldr	r3, [r4, #28]
   d5c42:	2b00      	cmp	r3, #0
   d5c44:	d0d2      	beq.n	d5bec <_ZN9OneButton4tickEb+0x28>
        _paramClickFunc(_clickFuncParam);
   d5c46:	6a20      	ldr	r0, [r4, #32]
   d5c48:	4798      	blx	r3
   d5c4a:	e7cf      	b.n	d5bec <_ZN9OneButton4tickEb+0x28>
      _state = 0; // restart.

    } else if ((activeLevel) &&
   d5c4c:	2e00      	cmp	r6, #0
   d5c4e:	d031      	beq.n	d5cb4 <_ZN9OneButton4tickEb+0xf0>
   d5c50:	6e23      	ldr	r3, [r4, #96]	; 0x60
   d5c52:	6862      	ldr	r2, [r4, #4]
   d5c54:	1aeb      	subs	r3, r5, r3
   d5c56:	4293      	cmp	r3, r2
   d5c58:	d92c      	bls.n	d5cb4 <_ZN9OneButton4tickEb+0xf0>
               ((unsigned long)(now - _stopTime) > _debounceTicks)) {
      _state = 3; // step to state 3
   d5c5a:	2303      	movs	r3, #3
   d5c5c:	65a3      	str	r3, [r4, #88]	; 0x58
      _startTime = now; // remember starting time
   d5c5e:	65e5      	str	r5, [r4, #92]	; 0x5c
   d5c60:	bd70      	pop	{r4, r5, r6, pc}
    } // if

  } else if (_state == 3) { // waiting for menu pin being released finally.
   d5c62:	2b03      	cmp	r3, #3
   d5c64:	d10c      	bne.n	d5c80 <_ZN9OneButton4tickEb+0xbc>
    // Stay here for at least _debounceTicks because else we might end up in
    // state 1 if the button bounces for too long.
    if ((!activeLevel) &&
   d5c66:	bb2e      	cbnz	r6, d5cb4 <_ZN9OneButton4tickEb+0xf0>
   d5c68:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   d5c6a:	6862      	ldr	r2, [r4, #4]
   d5c6c:	1ac3      	subs	r3, r0, r3
   d5c6e:	4293      	cmp	r3, r2
   d5c70:	d920      	bls.n	d5cb4 <_ZN9OneButton4tickEb+0xf0>
        ((unsigned long)(now - _startTime) > _debounceTicks)) {
      // this was a 2 click sequence.
      if (_doubleClickFunc)
   d5c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5c74:	b103      	cbz	r3, d5c78 <_ZN9OneButton4tickEb+0xb4>
        _doubleClickFunc();
   d5c76:	4798      	blx	r3
      if (_paramDoubleClickFunc)
   d5c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5c7a:	b163      	cbz	r3, d5c96 <_ZN9OneButton4tickEb+0xd2>
        _paramDoubleClickFunc(_doubleClickFuncParam);
   d5c7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d5c7e:	e009      	b.n	d5c94 <_ZN9OneButton4tickEb+0xd0>
      _state = 0; // restart.
      _stopTime = now; // remember stopping time
    } // if

  } else if (_state == 6) {
   d5c80:	2b06      	cmp	r3, #6
   d5c82:	d117      	bne.n	d5cb4 <_ZN9OneButton4tickEb+0xf0>
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
   d5c84:	b95e      	cbnz	r6, d5c9e <_ZN9OneButton4tickEb+0xda>
      _isLongPressed = false; // Keep track of long press state
      if (_longPressStopFunc)
   d5c86:	6c23      	ldr	r3, [r4, #64]	; 0x40
    } // if

  } else if (_state == 6) {
    // waiting for menu pin being release after long press.
    if (!activeLevel) {
      _isLongPressed = false; // Keep track of long press state
   d5c88:	7526      	strb	r6, [r4, #20]
      if (_longPressStopFunc)
   d5c8a:	b103      	cbz	r3, d5c8e <_ZN9OneButton4tickEb+0xca>
        _longPressStopFunc();
   d5c8c:	4798      	blx	r3
      if (_paramLongPressStopFunc)
   d5c8e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d5c90:	b10b      	cbz	r3, d5c96 <_ZN9OneButton4tickEb+0xd2>
        _paramLongPressStopFunc(_longPressStopFuncParam);
   d5c92:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d5c94:	4798      	blx	r3
      _state = 0; // restart.
   d5c96:	2300      	movs	r3, #0
   d5c98:	65a3      	str	r3, [r4, #88]	; 0x58
      _stopTime = now; // remember stopping time
   d5c9a:	6625      	str	r5, [r4, #96]	; 0x60
   d5c9c:	bd70      	pop	{r4, r5, r6, pc}
    } else {
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
   d5c9e:	2301      	movs	r3, #1
   d5ca0:	7523      	strb	r3, [r4, #20]
      if (_duringLongPressFunc)
   d5ca2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d5ca4:	b103      	cbz	r3, d5ca8 <_ZN9OneButton4tickEb+0xe4>
        _duringLongPressFunc();
   d5ca6:	4798      	blx	r3
      if (_paramDuringLongPressFunc)
   d5ca8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5caa:	b11b      	cbz	r3, d5cb4 <_ZN9OneButton4tickEb+0xf0>
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d5cac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    } // if

  } // if
} // OneButton.tick()
   d5cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      // button is being long pressed
      _isLongPressed = true; // Keep track of long press state
      if (_duringLongPressFunc)
        _duringLongPressFunc();
      if (_paramDuringLongPressFunc)
        _paramDuringLongPressFunc(_duringLongPressFuncParam);
   d5cb2:	4718      	bx	r3
   d5cb4:	bd70      	pop	{r4, r5, r6, pc}

000d5cb6 <_ZN9OneButton4tickEv>:
/**
 * @brief Check input of the configured pin and then advance the finite state
 * machine (FSM).
 */
void OneButton::tick(void)
{
   d5cb6:	b510      	push	{r4, lr}
   d5cb8:	4604      	mov	r4, r0
  if (_pin >= 0) {
   d5cba:	6800      	ldr	r0, [r0, #0]
   d5cbc:	2800      	cmp	r0, #0
   d5cbe:	db0b      	blt.n	d5cd8 <_ZN9OneButton4tickEv+0x22>
    tick(digitalRead(_pin) == _buttonPressed);
   d5cc0:	b280      	uxth	r0, r0
   d5cc2:	f001 fcdb 	bl	d767c <digitalRead>
   d5cc6:	6921      	ldr	r1, [r4, #16]
   d5cc8:	1a0b      	subs	r3, r1, r0
   d5cca:	4259      	negs	r1, r3
   d5ccc:	4620      	mov	r0, r4
   d5cce:	4159      	adcs	r1, r3
  }
}
   d5cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * machine (FSM).
 */
void OneButton::tick(void)
{
  if (_pin >= 0) {
    tick(digitalRead(_pin) == _buttonPressed);
   d5cd4:	f7ff bf76 	b.w	d5bc4 <_ZN9OneButton4tickEb>
   d5cd8:	bd10      	pop	{r4, pc}

000d5cda <_GLOBAL__sub_I__ZN9OneButtonC2Ev>:
   d5cda:	f000 b87f 	b.w	d5ddc <HAL_Pin_Map>

000d5cde <_ZN7TwoWire5writeEi>:
   d5cde:	6803      	ldr	r3, [r0, #0]
   d5ce0:	b2c9      	uxtb	r1, r1
   d5ce2:	689b      	ldr	r3, [r3, #8]
   d5ce4:	4718      	bx	r3

000d5ce6 <_ZN5TWISTC1Ev>:
#include "Arduino.h"

//Constructor
TWIST::TWIST()
{
}
   d5ce6:	4770      	bx	lr

000d5ce8 <_ZN5TWIST11isConnectedEv>:
  return (true); //We're all setup!
}

//Returns true if I2C device ack's
boolean TWIST::isConnected()
{
   d5ce8:	b510      	push	{r4, lr}
   d5cea:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)_deviceAddress);
   d5cec:	7901      	ldrb	r1, [r0, #4]
   d5cee:	6800      	ldr	r0, [r0, #0]
   d5cf0:	f001 fab3 	bl	d725a <_ZN7TwoWire17beginTransmissionEh>
  if (_i2cPort->endTransmission() != 0)
   d5cf4:	6820      	ldr	r0, [r4, #0]
   d5cf6:	f001 fabb 	bl	d7270 <_ZN7TwoWire15endTransmissionEv>
    return (false); //Sensor did not ACK
  return (true);
}
   d5cfa:	fab0 f080 	clz	r0, r0
   d5cfe:	0940      	lsrs	r0, r0, #5
   d5d00:	bd10      	pop	{r4, pc}

000d5d02 <_ZN5TWIST5beginER7TwoWireh>:
}

//Initializes the sensor with basic settings
//Returns false if sensor is not detected
boolean TWIST::begin(TwoWire &wirePort, uint8_t deviceAddress)
{
   d5d02:	b538      	push	{r3, r4, r5, lr}
   d5d04:	4604      	mov	r4, r0
   d5d06:	4615      	mov	r5, r2
  _i2cPort = &wirePort;
   d5d08:	6001      	str	r1, [r0, #0]
  _i2cPort->begin(); //This resets any setClock() the user may have done
   d5d0a:	4608      	mov	r0, r1
   d5d0c:	f001 fa6e 	bl	d71ec <_ZN7TwoWire5beginEv>

  _deviceAddress = deviceAddress;
   d5d10:	7125      	strb	r5, [r4, #4]

  if (isConnected() == false)
   d5d12:	4620      	mov	r0, r4
    return (false); //Check for sensor presence

  return (true); //We're all setup!
}
   d5d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  _i2cPort = &wirePort;
  _i2cPort->begin(); //This resets any setClock() the user may have done

  _deviceAddress = deviceAddress;

  if (isConnected() == false)
   d5d18:	f7ff bfe6 	b.w	d5ce8 <_ZN5TWIST11isConnectedEv>

000d5d1c <_ZN5TWIST14readRegister16Eh>:
  return (0); //Device failed to respond
}

//Reads an int from a given location from the Twist
int16_t TWIST::readRegister16(uint8_t addr)
{
   d5d1c:	b538      	push	{r3, r4, r5, lr}
   d5d1e:	4604      	mov	r4, r0
   d5d20:	460d      	mov	r5, r1
  _i2cPort->beginTransmission((uint8_t)_deviceAddress);
   d5d22:	7901      	ldrb	r1, [r0, #4]
   d5d24:	6800      	ldr	r0, [r0, #0]
   d5d26:	f001 fa98 	bl	d725a <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(addr);
   d5d2a:	6820      	ldr	r0, [r4, #0]
   d5d2c:	6803      	ldr	r3, [r0, #0]
   d5d2e:	4629      	mov	r1, r5
   d5d30:	689b      	ldr	r3, [r3, #8]
   d5d32:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   d5d34:	6820      	ldr	r0, [r4, #0]
   d5d36:	f001 fa9b 	bl	d7270 <_ZN7TwoWire15endTransmissionEv>
   d5d3a:	b108      	cbz	r0, d5d40 <_ZN5TWIST14readRegister16Eh+0x24>
  {
    //Serial.println("No ack!");
    return (0); //Device failed to ack
   d5d3c:	2000      	movs	r0, #0
   d5d3e:	bd38      	pop	{r3, r4, r5, pc}
  }

  _i2cPort->requestFrom((uint8_t)_deviceAddress, (uint8_t)2);
   d5d40:	2202      	movs	r2, #2
   d5d42:	7921      	ldrb	r1, [r4, #4]
   d5d44:	6820      	ldr	r0, [r4, #0]
   d5d46:	f001 fa85 	bl	d7254 <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d5d4a:	6820      	ldr	r0, [r4, #0]
   d5d4c:	6803      	ldr	r3, [r0, #0]
   d5d4e:	691b      	ldr	r3, [r3, #16]
   d5d50:	4798      	blx	r3
   d5d52:	2800      	cmp	r0, #0
   d5d54:	d0f2      	beq.n	d5d3c <_ZN5TWIST14readRegister16Eh+0x20>
  {
    uint8_t lsb = _i2cPort->read();
   d5d56:	6820      	ldr	r0, [r4, #0]
   d5d58:	6803      	ldr	r3, [r0, #0]
   d5d5a:	695b      	ldr	r3, [r3, #20]
   d5d5c:	4798      	blx	r3
   d5d5e:	4605      	mov	r5, r0
    uint8_t msb = _i2cPort->read();
   d5d60:	6820      	ldr	r0, [r4, #0]
   d5d62:	6803      	ldr	r3, [r0, #0]
   d5d64:	695b      	ldr	r3, [r3, #20]
   d5d66:	4798      	blx	r3
    return ((int16_t)msb << 8 | lsb);
   d5d68:	b2ed      	uxtb	r5, r5
   d5d6a:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
   d5d6e:	b200      	sxth	r0, r0
  }

  //Serial.println("No ack!");
  return (0); //Device failed to respond
}
   d5d70:	bd38      	pop	{r3, r4, r5, pc}

000d5d72 <_ZN5TWIST8getCountEv>:
}

//Returns the number of indents the user has twisted the knob
int16_t TWIST::getCount()
{
  return (readRegister16(TWIST_COUNT));
   d5d72:	2105      	movs	r1, #5
   d5d74:	f7ff bfd2 	b.w	d5d1c <_ZN5TWIST14readRegister16Eh>

000d5d78 <_ZN5TWIST15writeRegister16Eht>:
  return (true);
}

//Write a 2 byte value to a spot in the Twist
boolean TWIST::writeRegister16(uint8_t addr, uint16_t val)
{
   d5d78:	b570      	push	{r4, r5, r6, lr}
   d5d7a:	4604      	mov	r4, r0
   d5d7c:	460e      	mov	r6, r1
  _i2cPort->beginTransmission((uint8_t)_deviceAddress);
   d5d7e:	7901      	ldrb	r1, [r0, #4]
   d5d80:	6800      	ldr	r0, [r0, #0]
  return (true);
}

//Write a 2 byte value to a spot in the Twist
boolean TWIST::writeRegister16(uint8_t addr, uint16_t val)
{
   d5d82:	4615      	mov	r5, r2
  _i2cPort->beginTransmission((uint8_t)_deviceAddress);
   d5d84:	f001 fa69 	bl	d725a <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(addr);
   d5d88:	6820      	ldr	r0, [r4, #0]
   d5d8a:	6803      	ldr	r3, [r0, #0]
   d5d8c:	4631      	mov	r1, r6
   d5d8e:	689b      	ldr	r3, [r3, #8]
   d5d90:	4798      	blx	r3
  _i2cPort->write(val & 0xFF); //LSB
   d5d92:	b2e9      	uxtb	r1, r5
   d5d94:	6820      	ldr	r0, [r4, #0]
   d5d96:	f7ff ffa2 	bl	d5cde <_ZN7TwoWire5writeEi>
  _i2cPort->write(val >> 8);   //MSB
   d5d9a:	0a29      	lsrs	r1, r5, #8
   d5d9c:	6820      	ldr	r0, [r4, #0]
   d5d9e:	f7ff ff9e 	bl	d5cde <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d5da2:	6820      	ldr	r0, [r4, #0]
   d5da4:	f001 fa64 	bl	d7270 <_ZN7TwoWire15endTransmissionEv>
    //Serial.println("No ack!");
    return (false); //Device failed to ack
  }

  return (true);
}
   d5da8:	fab0 f080 	clz	r0, r0
   d5dac:	0940      	lsrs	r0, r0, #5
   d5dae:	bd70      	pop	{r4, r5, r6, pc}

000d5db0 <_ZN5TWIST8setCountEs>:
}

//Set the encoder count to a specific amount
boolean TWIST::setCount(int16_t amount)
{
  return (writeRegister16(TWIST_COUNT, amount));
   d5db0:	b28a      	uxth	r2, r1
   d5db2:	2105      	movs	r1, #5
   d5db4:	f7ff bfe0 	b.w	d5d78 <_ZN5TWIST15writeRegister16Eht>

000d5db8 <_GLOBAL__sub_I__ZN5TWISTC2Ev>:
   d5db8:	f000 b810 	b.w	d5ddc <HAL_Pin_Map>

000d5dbc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <netdb_freeaddrinfo+0xc>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	689b      	ldr	r3, [r3, #8]
   d5dc4:	9301      	str	r3, [sp, #4]
   d5dc6:	bd08      	pop	{r3, pc}
   d5dc8:	00030268 	.word	0x00030268

000d5dcc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5dcc:	b508      	push	{r3, lr}
   d5dce:	4b02      	ldr	r3, [pc, #8]	; (d5dd8 <netdb_getaddrinfo+0xc>)
   d5dd0:	681b      	ldr	r3, [r3, #0]
   d5dd2:	68db      	ldr	r3, [r3, #12]
   d5dd4:	9301      	str	r3, [sp, #4]
   d5dd6:	bd08      	pop	{r3, pc}
   d5dd8:	00030268 	.word	0x00030268

000d5ddc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5ddc:	b508      	push	{r3, lr}
   d5dde:	4b02      	ldr	r3, [pc, #8]	; (d5de8 <HAL_Pin_Map+0xc>)
   d5de0:	681b      	ldr	r3, [r3, #0]
   d5de2:	681b      	ldr	r3, [r3, #0]
   d5de4:	9301      	str	r3, [sp, #4]
   d5de6:	bd08      	pop	{r3, pc}
   d5de8:	0003022c 	.word	0x0003022c

000d5dec <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5dec:	b508      	push	{r3, lr}
   d5dee:	4b02      	ldr	r3, [pc, #8]	; (d5df8 <HAL_Pin_Mode+0xc>)
   d5df0:	681b      	ldr	r3, [r3, #0]
   d5df2:	689b      	ldr	r3, [r3, #8]
   d5df4:	9301      	str	r3, [sp, #4]
   d5df6:	bd08      	pop	{r3, pc}
   d5df8:	0003022c 	.word	0x0003022c

000d5dfc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5dfc:	b508      	push	{r3, lr}
   d5dfe:	4b02      	ldr	r3, [pc, #8]	; (d5e08 <HAL_Get_Pin_Mode+0xc>)
   d5e00:	681b      	ldr	r3, [r3, #0]
   d5e02:	68db      	ldr	r3, [r3, #12]
   d5e04:	9301      	str	r3, [sp, #4]
   d5e06:	bd08      	pop	{r3, pc}
   d5e08:	0003022c 	.word	0x0003022c

000d5e0c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5e0c:	b508      	push	{r3, lr}
   d5e0e:	4b02      	ldr	r3, [pc, #8]	; (d5e18 <HAL_GPIO_Write+0xc>)
   d5e10:	681b      	ldr	r3, [r3, #0]
   d5e12:	691b      	ldr	r3, [r3, #16]
   d5e14:	9301      	str	r3, [sp, #4]
   d5e16:	bd08      	pop	{r3, pc}
   d5e18:	0003022c 	.word	0x0003022c

000d5e1c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b02      	ldr	r3, [pc, #8]	; (d5e28 <HAL_GPIO_Read+0xc>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	695b      	ldr	r3, [r3, #20]
   d5e24:	9301      	str	r3, [sp, #4]
   d5e26:	bd08      	pop	{r3, pc}
   d5e28:	0003022c 	.word	0x0003022c

000d5e2c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5e2c:	b508      	push	{r3, lr}
   d5e2e:	4b02      	ldr	r3, [pc, #8]	; (d5e38 <HAL_SPI_Begin+0xc>)
   d5e30:	681b      	ldr	r3, [r3, #0]
   d5e32:	681b      	ldr	r3, [r3, #0]
   d5e34:	9301      	str	r3, [sp, #4]
   d5e36:	bd08      	pop	{r3, pc}
   d5e38:	00030230 	.word	0x00030230

000d5e3c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5e3c:	b508      	push	{r3, lr}
   d5e3e:	4b02      	ldr	r3, [pc, #8]	; (d5e48 <HAL_SPI_Set_Bit_Order+0xc>)
   d5e40:	681b      	ldr	r3, [r3, #0]
   d5e42:	689b      	ldr	r3, [r3, #8]
   d5e44:	9301      	str	r3, [sp, #4]
   d5e46:	bd08      	pop	{r3, pc}
   d5e48:	00030230 	.word	0x00030230

000d5e4c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5e4c:	b508      	push	{r3, lr}
   d5e4e:	4b02      	ldr	r3, [pc, #8]	; (d5e58 <HAL_SPI_Set_Data_Mode+0xc>)
   d5e50:	681b      	ldr	r3, [r3, #0]
   d5e52:	68db      	ldr	r3, [r3, #12]
   d5e54:	9301      	str	r3, [sp, #4]
   d5e56:	bd08      	pop	{r3, pc}
   d5e58:	00030230 	.word	0x00030230

000d5e5c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5e5c:	b508      	push	{r3, lr}
   d5e5e:	4b02      	ldr	r3, [pc, #8]	; (d5e68 <HAL_SPI_Set_Clock_Divider+0xc>)
   d5e60:	681b      	ldr	r3, [r3, #0]
   d5e62:	691b      	ldr	r3, [r3, #16]
   d5e64:	9301      	str	r3, [sp, #4]
   d5e66:	bd08      	pop	{r3, pc}
   d5e68:	00030230 	.word	0x00030230

000d5e6c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5e6c:	b508      	push	{r3, lr}
   d5e6e:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <HAL_SPI_Send_Receive_Data+0xc>)
   d5e70:	681b      	ldr	r3, [r3, #0]
   d5e72:	695b      	ldr	r3, [r3, #20]
   d5e74:	9301      	str	r3, [sp, #4]
   d5e76:	bd08      	pop	{r3, pc}
   d5e78:	00030230 	.word	0x00030230

000d5e7c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5e7c:	b508      	push	{r3, lr}
   d5e7e:	4b02      	ldr	r3, [pc, #8]	; (d5e88 <HAL_SPI_Init+0xc>)
   d5e80:	681b      	ldr	r3, [r3, #0]
   d5e82:	69db      	ldr	r3, [r3, #28]
   d5e84:	9301      	str	r3, [sp, #4]
   d5e86:	bd08      	pop	{r3, pc}
   d5e88:	00030230 	.word	0x00030230

000d5e8c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5e8c:	b508      	push	{r3, lr}
   d5e8e:	4b02      	ldr	r3, [pc, #8]	; (d5e98 <HAL_SPI_Is_Enabled+0xc>)
   d5e90:	681b      	ldr	r3, [r3, #0]
   d5e92:	6a1b      	ldr	r3, [r3, #32]
   d5e94:	9301      	str	r3, [sp, #4]
   d5e96:	bd08      	pop	{r3, pc}
   d5e98:	00030230 	.word	0x00030230

000d5e9c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5e9c:	b508      	push	{r3, lr}
   d5e9e:	4b02      	ldr	r3, [pc, #8]	; (d5ea8 <HAL_SPI_Info+0xc>)
   d5ea0:	681b      	ldr	r3, [r3, #0]
   d5ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ea4:	9301      	str	r3, [sp, #4]
   d5ea6:	bd08      	pop	{r3, pc}
   d5ea8:	00030230 	.word	0x00030230

000d5eac <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b02      	ldr	r3, [pc, #8]	; (d5eb8 <HAL_SPI_Acquire+0xc>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5eb4:	9301      	str	r3, [sp, #4]
   d5eb6:	bd08      	pop	{r3, pc}
   d5eb8:	00030230 	.word	0x00030230

000d5ebc <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5ebc:	b508      	push	{r3, lr}
   d5ebe:	4b02      	ldr	r3, [pc, #8]	; (d5ec8 <HAL_SPI_Release+0xc>)
   d5ec0:	681b      	ldr	r3, [r3, #0]
   d5ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ec4:	9301      	str	r3, [sp, #4]
   d5ec6:	bd08      	pop	{r3, pc}
   d5ec8:	00030230 	.word	0x00030230

000d5ecc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ecc:	b508      	push	{r3, lr}
   d5ece:	4b02      	ldr	r3, [pc, #8]	; (d5ed8 <HAL_RNG_GetRandomNumber+0xc>)
   d5ed0:	681b      	ldr	r3, [r3, #0]
   d5ed2:	685b      	ldr	r3, [r3, #4]
   d5ed4:	9301      	str	r3, [sp, #4]
   d5ed6:	bd08      	pop	{r3, pc}
   d5ed8:	00030218 	.word	0x00030218

000d5edc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5edc:	b508      	push	{r3, lr}
   d5ede:	4b02      	ldr	r3, [pc, #8]	; (d5ee8 <HAL_Delay_Microseconds+0xc>)
   d5ee0:	681b      	ldr	r3, [r3, #0]
   d5ee2:	68db      	ldr	r3, [r3, #12]
   d5ee4:	9301      	str	r3, [sp, #4]
   d5ee6:	bd08      	pop	{r3, pc}
   d5ee8:	00030218 	.word	0x00030218

000d5eec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4b02      	ldr	r3, [pc, #8]	; (d5ef8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5ef0:	681b      	ldr	r3, [r3, #0]
   d5ef2:	695b      	ldr	r3, [r3, #20]
   d5ef4:	9301      	str	r3, [sp, #4]
   d5ef6:	bd08      	pop	{r3, pc}
   d5ef8:	00030218 	.word	0x00030218

000d5efc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5efc:	b508      	push	{r3, lr}
   d5efe:	4b02      	ldr	r3, [pc, #8]	; (d5f08 <os_thread_is_current+0xc>)
   d5f00:	681b      	ldr	r3, [r3, #0]
   d5f02:	689b      	ldr	r3, [r3, #8]
   d5f04:	9301      	str	r3, [sp, #4]
   d5f06:	bd08      	pop	{r3, pc}
   d5f08:	00030248 	.word	0x00030248

000d5f0c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5f0c:	b508      	push	{r3, lr}
   d5f0e:	4b02      	ldr	r3, [pc, #8]	; (d5f18 <os_thread_join+0xc>)
   d5f10:	681b      	ldr	r3, [r3, #0]
   d5f12:	691b      	ldr	r3, [r3, #16]
   d5f14:	9301      	str	r3, [sp, #4]
   d5f16:	bd08      	pop	{r3, pc}
   d5f18:	00030248 	.word	0x00030248

000d5f1c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5f1c:	b508      	push	{r3, lr}
   d5f1e:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <os_thread_cleanup+0xc>)
   d5f20:	681b      	ldr	r3, [r3, #0]
   d5f22:	695b      	ldr	r3, [r3, #20]
   d5f24:	9301      	str	r3, [sp, #4]
   d5f26:	bd08      	pop	{r3, pc}
   d5f28:	00030248 	.word	0x00030248

000d5f2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b02      	ldr	r3, [pc, #8]	; (d5f38 <os_mutex_recursive_create+0xc>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f34:	9301      	str	r3, [sp, #4]
   d5f36:	bd08      	pop	{r3, pc}
   d5f38:	00030248 	.word	0x00030248

000d5f3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5f3c:	b508      	push	{r3, lr}
   d5f3e:	4b02      	ldr	r3, [pc, #8]	; (d5f48 <os_mutex_recursive_destroy+0xc>)
   d5f40:	681b      	ldr	r3, [r3, #0]
   d5f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5f44:	9301      	str	r3, [sp, #4]
   d5f46:	bd08      	pop	{r3, pc}
   d5f48:	00030248 	.word	0x00030248

000d5f4c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5f4c:	b508      	push	{r3, lr}
   d5f4e:	4b02      	ldr	r3, [pc, #8]	; (d5f58 <inet_inet_ntop+0xc>)
   d5f50:	681b      	ldr	r3, [r3, #0]
   d5f52:	695b      	ldr	r3, [r3, #20]
   d5f54:	9301      	str	r3, [sp, #4]
   d5f56:	bd08      	pop	{r3, pc}
   d5f58:	00030264 	.word	0x00030264

000d5f5c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5f5c:	b508      	push	{r3, lr}
   d5f5e:	4b02      	ldr	r3, [pc, #8]	; (d5f68 <HAL_USART_Init+0xc>)
   d5f60:	681b      	ldr	r3, [r3, #0]
   d5f62:	681b      	ldr	r3, [r3, #0]
   d5f64:	9301      	str	r3, [sp, #4]
   d5f66:	bd08      	pop	{r3, pc}
   d5f68:	0003023c 	.word	0x0003023c

000d5f6c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5f6c:	b508      	push	{r3, lr}
   d5f6e:	4b02      	ldr	r3, [pc, #8]	; (d5f78 <HAL_USART_Write_Data+0xc>)
   d5f70:	681b      	ldr	r3, [r3, #0]
   d5f72:	68db      	ldr	r3, [r3, #12]
   d5f74:	9301      	str	r3, [sp, #4]
   d5f76:	bd08      	pop	{r3, pc}
   d5f78:	0003023c 	.word	0x0003023c

000d5f7c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5f7c:	b508      	push	{r3, lr}
   d5f7e:	4b02      	ldr	r3, [pc, #8]	; (d5f88 <HAL_USART_Available_Data+0xc>)
   d5f80:	681b      	ldr	r3, [r3, #0]
   d5f82:	691b      	ldr	r3, [r3, #16]
   d5f84:	9301      	str	r3, [sp, #4]
   d5f86:	bd08      	pop	{r3, pc}
   d5f88:	0003023c 	.word	0x0003023c

000d5f8c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <HAL_USART_Read_Data+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	695b      	ldr	r3, [r3, #20]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	0003023c 	.word	0x0003023c

000d5f9c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <HAL_USART_Peek_Data+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	699b      	ldr	r3, [r3, #24]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	0003023c 	.word	0x0003023c

000d5fac <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <HAL_USART_Flush_Data+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	69db      	ldr	r3, [r3, #28]
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	0003023c 	.word	0x0003023c

000d5fbc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <HAL_USART_Is_Enabled+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	6a1b      	ldr	r3, [r3, #32]
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	0003023c 	.word	0x0003023c

000d5fcc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <HAL_USART_Available_Data_For_Write+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	0003023c 	.word	0x0003023c

000d5fdc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <HAL_I2C_Begin+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	68db      	ldr	r3, [r3, #12]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	00030228 	.word	0x00030228

000d5fec <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <HAL_I2C_Begin_Transmission+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	699b      	ldr	r3, [r3, #24]
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	00030228 	.word	0x00030228

000d5ffc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <HAL_I2C_End_Transmission+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	69db      	ldr	r3, [r3, #28]
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030228 	.word	0x00030228

000d600c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <HAL_I2C_Write_Data+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	6a1b      	ldr	r3, [r3, #32]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030228 	.word	0x00030228

000d601c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <HAL_I2C_Available_Data+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030228 	.word	0x00030228

000d602c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <HAL_I2C_Read_Data+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030228 	.word	0x00030228

000d603c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <HAL_I2C_Peek_Data+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030228 	.word	0x00030228

000d604c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <HAL_I2C_Flush_Data+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030228 	.word	0x00030228

000d605c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <HAL_I2C_Is_Enabled+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030228 	.word	0x00030228

000d606c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <HAL_I2C_Init+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	00030228 	.word	0x00030228

000d607c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <HAL_I2C_Request_Data_Ex+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	00030228 	.word	0x00030228

000d608c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <HAL_USB_USART_Init+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	681b      	ldr	r3, [r3, #0]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	0003024c 	.word	0x0003024c

000d609c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <HAL_USB_USART_Begin+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	685b      	ldr	r3, [r3, #4]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	0003024c 	.word	0x0003024c

000d60ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <HAL_USB_USART_Available_Data+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	691b      	ldr	r3, [r3, #16]
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	0003024c 	.word	0x0003024c

000d60bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	695b      	ldr	r3, [r3, #20]
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	0003024c 	.word	0x0003024c

000d60cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <HAL_USB_USART_Receive_Data+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	699b      	ldr	r3, [r3, #24]
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	0003024c 	.word	0x0003024c

000d60dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <HAL_USB_USART_Send_Data+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	69db      	ldr	r3, [r3, #28]
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	0003024c 	.word	0x0003024c

000d60ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <HAL_USB_USART_Flush_Data+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	6a1b      	ldr	r3, [r3, #32]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	0003024c 	.word	0x0003024c

000d60fc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <panic_+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	00030260 	.word	0x00030260

000d610c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <set_system_mode+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	685b      	ldr	r3, [r3, #4]
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	00030220 	.word	0x00030220

000d611c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <system_delay_ms+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	695b      	ldr	r3, [r3, #20]
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	00030220 	.word	0x00030220

000d612c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <application_thread_current+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	00030220 	.word	0x00030220

000d613c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <application_thread_invoke+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	00030220 	.word	0x00030220

000d614c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b03      	ldr	r3, [pc, #12]	; (d615c <system_ctrl_set_app_request_handler+0x10>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6156:	9301      	str	r3, [sp, #4]
   d6158:	bd08      	pop	{r3, pc}
   d615a:	0000      	.short	0x0000
   d615c:	00030220 	.word	0x00030220

000d6160 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6160:	b508      	push	{r3, lr}
   d6162:	4b03      	ldr	r3, [pc, #12]	; (d6170 <system_ctrl_set_result+0x10>)
   d6164:	681b      	ldr	r3, [r3, #0]
   d6166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d616a:	9301      	str	r3, [sp, #4]
   d616c:	bd08      	pop	{r3, pc}
   d616e:	0000      	.short	0x0000
   d6170:	00030220 	.word	0x00030220

000d6174 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6174:	b508      	push	{r3, lr}
   d6176:	4b02      	ldr	r3, [pc, #8]	; (d6180 <network_connect+0xc>)
   d6178:	681b      	ldr	r3, [r3, #0]
   d617a:	685b      	ldr	r3, [r3, #4]
   d617c:	9301      	str	r3, [sp, #4]
   d617e:	bd08      	pop	{r3, pc}
   d6180:	00030240 	.word	0x00030240

000d6184 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6184:	b508      	push	{r3, lr}
   d6186:	4b02      	ldr	r3, [pc, #8]	; (d6190 <network_connecting+0xc>)
   d6188:	681b      	ldr	r3, [r3, #0]
   d618a:	689b      	ldr	r3, [r3, #8]
   d618c:	9301      	str	r3, [sp, #4]
   d618e:	bd08      	pop	{r3, pc}
   d6190:	00030240 	.word	0x00030240

000d6194 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6194:	b508      	push	{r3, lr}
   d6196:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <network_disconnect+0xc>)
   d6198:	681b      	ldr	r3, [r3, #0]
   d619a:	68db      	ldr	r3, [r3, #12]
   d619c:	9301      	str	r3, [sp, #4]
   d619e:	bd08      	pop	{r3, pc}
   d61a0:	00030240 	.word	0x00030240

000d61a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d61a4:	b508      	push	{r3, lr}
   d61a6:	4b02      	ldr	r3, [pc, #8]	; (d61b0 <network_ready+0xc>)
   d61a8:	681b      	ldr	r3, [r3, #0]
   d61aa:	691b      	ldr	r3, [r3, #16]
   d61ac:	9301      	str	r3, [sp, #4]
   d61ae:	bd08      	pop	{r3, pc}
   d61b0:	00030240 	.word	0x00030240

000d61b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d61b4:	b508      	push	{r3, lr}
   d61b6:	4b02      	ldr	r3, [pc, #8]	; (d61c0 <network_on+0xc>)
   d61b8:	681b      	ldr	r3, [r3, #0]
   d61ba:	695b      	ldr	r3, [r3, #20]
   d61bc:	9301      	str	r3, [sp, #4]
   d61be:	bd08      	pop	{r3, pc}
   d61c0:	00030240 	.word	0x00030240

000d61c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d61c4:	b508      	push	{r3, lr}
   d61c6:	4b02      	ldr	r3, [pc, #8]	; (d61d0 <network_off+0xc>)
   d61c8:	681b      	ldr	r3, [r3, #0]
   d61ca:	699b      	ldr	r3, [r3, #24]
   d61cc:	9301      	str	r3, [sp, #4]
   d61ce:	bd08      	pop	{r3, pc}
   d61d0:	00030240 	.word	0x00030240

000d61d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d61d4:	b508      	push	{r3, lr}
   d61d6:	4b02      	ldr	r3, [pc, #8]	; (d61e0 <network_listen+0xc>)
   d61d8:	681b      	ldr	r3, [r3, #0]
   d61da:	69db      	ldr	r3, [r3, #28]
   d61dc:	9301      	str	r3, [sp, #4]
   d61de:	bd08      	pop	{r3, pc}
   d61e0:	00030240 	.word	0x00030240

000d61e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d61e4:	b508      	push	{r3, lr}
   d61e6:	4b02      	ldr	r3, [pc, #8]	; (d61f0 <network_listening+0xc>)
   d61e8:	681b      	ldr	r3, [r3, #0]
   d61ea:	6a1b      	ldr	r3, [r3, #32]
   d61ec:	9301      	str	r3, [sp, #4]
   d61ee:	bd08      	pop	{r3, pc}
   d61f0:	00030240 	.word	0x00030240

000d61f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d61f4:	b508      	push	{r3, lr}
   d61f6:	4b02      	ldr	r3, [pc, #8]	; (d6200 <network_set_listen_timeout+0xc>)
   d61f8:	681b      	ldr	r3, [r3, #0]
   d61fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61fc:	9301      	str	r3, [sp, #4]
   d61fe:	bd08      	pop	{r3, pc}
   d6200:	00030240 	.word	0x00030240

000d6204 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6204:	b508      	push	{r3, lr}
   d6206:	4b02      	ldr	r3, [pc, #8]	; (d6210 <network_get_listen_timeout+0xc>)
   d6208:	681b      	ldr	r3, [r3, #0]
   d620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d620c:	9301      	str	r3, [sp, #4]
   d620e:	bd08      	pop	{r3, pc}
   d6210:	00030240 	.word	0x00030240

000d6214 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6214:	b508      	push	{r3, lr}
   d6216:	4b02      	ldr	r3, [pc, #8]	; (d6220 <spark_cloud_flag_connected+0xc>)
   d6218:	681b      	ldr	r3, [r3, #0]
   d621a:	695b      	ldr	r3, [r3, #20]
   d621c:	9301      	str	r3, [sp, #4]
   d621e:	bd08      	pop	{r3, pc}
   d6220:	00030244 	.word	0x00030244

000d6224 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6224:	b508      	push	{r3, lr}
   d6226:	4b02      	ldr	r3, [pc, #8]	; (d6230 <spark_send_event+0xc>)
   d6228:	681b      	ldr	r3, [r3, #0]
   d622a:	6a1b      	ldr	r3, [r3, #32]
   d622c:	9301      	str	r3, [sp, #4]
   d622e:	bd08      	pop	{r3, pc}
   d6230:	00030244 	.word	0x00030244

000d6234 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6234:	b508      	push	{r3, lr}
   d6236:	4b02      	ldr	r3, [pc, #8]	; (d6240 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6238:	681b      	ldr	r3, [r3, #0]
   d623a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d623c:	9301      	str	r3, [sp, #4]
   d623e:	bd08      	pop	{r3, pc}
   d6240:	00030244 	.word	0x00030244

000d6244 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6244:	b508      	push	{r3, lr}
   d6246:	4b02      	ldr	r3, [pc, #8]	; (d6250 <malloc+0xc>)
   d6248:	681b      	ldr	r3, [r3, #0]
   d624a:	681b      	ldr	r3, [r3, #0]
   d624c:	9301      	str	r3, [sp, #4]
   d624e:	bd08      	pop	{r3, pc}
   d6250:	0003021c 	.word	0x0003021c

000d6254 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6254:	b508      	push	{r3, lr}
   d6256:	4b02      	ldr	r3, [pc, #8]	; (d6260 <free+0xc>)
   d6258:	681b      	ldr	r3, [r3, #0]
   d625a:	685b      	ldr	r3, [r3, #4]
   d625c:	9301      	str	r3, [sp, #4]
   d625e:	bd08      	pop	{r3, pc}
   d6260:	0003021c 	.word	0x0003021c

000d6264 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6264:	b508      	push	{r3, lr}
   d6266:	4b02      	ldr	r3, [pc, #8]	; (d6270 <realloc+0xc>)
   d6268:	681b      	ldr	r3, [r3, #0]
   d626a:	689b      	ldr	r3, [r3, #8]
   d626c:	9301      	str	r3, [sp, #4]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	0003021c 	.word	0x0003021c

000d6274 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6274:	b508      	push	{r3, lr}
   d6276:	4b02      	ldr	r3, [pc, #8]	; (d6280 <vsnprintf+0xc>)
   d6278:	681b      	ldr	r3, [r3, #0]
   d627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d627c:	9301      	str	r3, [sp, #4]
   d627e:	bd08      	pop	{r3, pc}
   d6280:	0003021c 	.word	0x0003021c

000d6284 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6284:	b508      	push	{r3, lr}
   d6286:	4b02      	ldr	r3, [pc, #8]	; (d6290 <abort+0xc>)
   d6288:	681b      	ldr	r3, [r3, #0]
   d628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d628c:	9301      	str	r3, [sp, #4]
   d628e:	bd08      	pop	{r3, pc}
   d6290:	0003021c 	.word	0x0003021c

000d6294 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6294:	b508      	push	{r3, lr}
   d6296:	4b02      	ldr	r3, [pc, #8]	; (d62a0 <_malloc_r+0xc>)
   d6298:	681b      	ldr	r3, [r3, #0]
   d629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d629c:	9301      	str	r3, [sp, #4]
   d629e:	bd08      	pop	{r3, pc}
   d62a0:	0003021c 	.word	0x0003021c

000d62a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62a4:	2200      	movs	r2, #0
   d62a6:	4611      	mov	r1, r2
   d62a8:	6840      	ldr	r0, [r0, #4]
   d62aa:	f7ff bf9b 	b.w	d61e4 <network_listening>

000d62ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d62ae:	2200      	movs	r2, #0
   d62b0:	4611      	mov	r1, r2
   d62b2:	6840      	ldr	r0, [r0, #4]
   d62b4:	f7ff bfa6 	b.w	d6204 <network_get_listen_timeout>

000d62b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d62b8:	2200      	movs	r2, #0
   d62ba:	6840      	ldr	r0, [r0, #4]
   d62bc:	f7ff bf9a 	b.w	d61f4 <network_set_listen_timeout>

000d62c0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d62c0:	2200      	movs	r2, #0
   d62c2:	f081 0101 	eor.w	r1, r1, #1
   d62c6:	6840      	ldr	r0, [r0, #4]
   d62c8:	f7ff bf84 	b.w	d61d4 <network_listen>

000d62cc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d62cc:	2300      	movs	r3, #0
   d62ce:	461a      	mov	r2, r3
   d62d0:	4619      	mov	r1, r3
   d62d2:	6840      	ldr	r0, [r0, #4]
   d62d4:	f7ff bf76 	b.w	d61c4 <network_off>

000d62d8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d62d8:	2300      	movs	r3, #0
   d62da:	461a      	mov	r2, r3
   d62dc:	4619      	mov	r1, r3
   d62de:	6840      	ldr	r0, [r0, #4]
   d62e0:	f7ff bf68 	b.w	d61b4 <network_on>

000d62e4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d62e4:	2200      	movs	r2, #0
   d62e6:	4611      	mov	r1, r2
   d62e8:	6840      	ldr	r0, [r0, #4]
   d62ea:	f7ff bf5b 	b.w	d61a4 <network_ready>

000d62ee <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d62ee:	2200      	movs	r2, #0
   d62f0:	4611      	mov	r1, r2
   d62f2:	6840      	ldr	r0, [r0, #4]
   d62f4:	f7ff bf46 	b.w	d6184 <network_connecting>

000d62f8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d62f8:	2200      	movs	r2, #0
   d62fa:	2102      	movs	r1, #2
   d62fc:	6840      	ldr	r0, [r0, #4]
   d62fe:	f7ff bf49 	b.w	d6194 <network_disconnect>

000d6302 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6302:	2300      	movs	r3, #0
   d6304:	461a      	mov	r2, r3
   d6306:	6840      	ldr	r0, [r0, #4]
   d6308:	f7ff bf34 	b.w	d6174 <network_connect>

000d630c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d630c:	4b02      	ldr	r3, [pc, #8]	; (d6318 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d630e:	2203      	movs	r2, #3
   d6310:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6312:	4a02      	ldr	r2, [pc, #8]	; (d631c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6314:	601a      	str	r2, [r3, #0]
   d6316:	4770      	bx	lr
   d6318:	2003e3dc 	.word	0x2003e3dc
   d631c:	000d8418 	.word	0x000d8418

000d6320 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d6320:	2100      	movs	r1, #0
   d6322:	f7ff bdc3 	b.w	d5eac <HAL_SPI_Acquire>

000d6326 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6326:	2100      	movs	r1, #0
   d6328:	f7ff bdc8 	b.w	d5ebc <HAL_SPI_Release>

000d632c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d632c:	b510      	push	{r4, lr}
   d632e:	4604      	mov	r4, r0
{
    _spi = spi;
   d6330:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6332:	4608      	mov	r0, r1
   d6334:	f7ff fda2 	bl	d5e7c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6338:	2300      	movs	r3, #0
   d633a:	6063      	str	r3, [r4, #4]
}
   d633c:	4620      	mov	r0, r4
   d633e:	bd10      	pop	{r4, pc}

000d6340 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6340:	b510      	push	{r4, lr}
   d6342:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6344:	7800      	ldrb	r0, [r0, #0]
   d6346:	f7ff ffeb 	bl	d6320 <_ZN8SPIClass4lockEv.isra.0>
   d634a:	b948      	cbnz	r0, d6360 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d634c:	7820      	ldrb	r0, [r4, #0]
   d634e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6352:	f7ff fd6b 	bl	d5e2c <HAL_SPI_Begin>
        unlock();
   d6356:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d635c:	f7ff bfe3 	b.w	d6326 <_ZN8SPIClass6unlockEv.isra.1>
   d6360:	bd10      	pop	{r4, pc}

000d6362 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6362:	b538      	push	{r3, r4, r5, lr}
   d6364:	4604      	mov	r4, r0
    if (!lock())
   d6366:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d6368:	460d      	mov	r5, r1
    if (!lock())
   d636a:	f7ff ffd9 	bl	d6320 <_ZN8SPIClass4lockEv.isra.0>
   d636e:	b940      	cbnz	r0, d6382 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d6370:	7820      	ldrb	r0, [r4, #0]
   d6372:	4629      	mov	r1, r5
   d6374:	f7ff fd62 	bl	d5e3c <HAL_SPI_Set_Bit_Order>
        unlock();
   d6378:	7820      	ldrb	r0, [r4, #0]
    }
}
   d637a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d637e:	f7ff bfd2 	b.w	d6326 <_ZN8SPIClass6unlockEv.isra.1>
   d6382:	bd38      	pop	{r3, r4, r5, pc}

000d6384 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d6384:	b538      	push	{r3, r4, r5, lr}
   d6386:	4604      	mov	r4, r0
    if (!lock())
   d6388:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d638a:	460d      	mov	r5, r1
    if (!lock())
   d638c:	f7ff ffc8 	bl	d6320 <_ZN8SPIClass4lockEv.isra.0>
   d6390:	b940      	cbnz	r0, d63a4 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d6392:	7820      	ldrb	r0, [r4, #0]
   d6394:	4629      	mov	r1, r5
   d6396:	f7ff fd59 	bl	d5e4c <HAL_SPI_Set_Data_Mode>
        unlock();
   d639a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d639c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d63a0:	f7ff bfc1 	b.w	d6326 <_ZN8SPIClass6unlockEv.isra.1>
   d63a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d63a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d63a8:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d63aa:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d63ac:	6018      	str	r0, [r3, #0]
   d63ae:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d63b0:	6818      	ldr	r0, [r3, #0]
   d63b2:	4288      	cmp	r0, r1
   d63b4:	b2e5      	uxtb	r5, r4
   d63b6:	d906      	bls.n	d63c6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d63b8:	3401      	adds	r4, #1
   d63ba:	2c08      	cmp	r4, #8
   d63bc:	d002      	beq.n	d63c4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d63be:	0840      	lsrs	r0, r0, #1
   d63c0:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d63c2:	e7f5      	b.n	d63b0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d63c4:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d63c8:	5d5b      	ldrb	r3, [r3, r5]
   d63ca:	7013      	strb	r3, [r2, #0]
   d63cc:	bd30      	pop	{r4, r5, pc}
   d63ce:	bf00      	nop
   d63d0:	000d8444 	.word	0x000d8444

000d63d4 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d63d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63d8:	b088      	sub	sp, #32
    unsigned clock = 0;
   d63da:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d63dc:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d63de:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d63e0:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d63e2:	460e      	mov	r6, r1
   d63e4:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d63e6:	f7ff ff9b 	bl	d6320 <_ZN8SPIClass4lockEv.isra.0>
   d63ea:	4605      	mov	r5, r0
   d63ec:	bb00      	cbnz	r0, d6430 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d63ee:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d63f2:	4601      	mov	r1, r0
   d63f4:	2214      	movs	r2, #20
   d63f6:	a803      	add	r0, sp, #12
   d63f8:	f001 fb3b 	bl	d7a72 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d63fc:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d63fe:	462a      	mov	r2, r5
   d6400:	a903      	add	r1, sp, #12
   d6402:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d6404:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d6408:	f7ff fd48 	bl	d5e9c <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d640c:	ab02      	add	r3, sp, #8
   d640e:	f10d 0207 	add.w	r2, sp, #7
   d6412:	fb07 f106 	mul.w	r1, r7, r6
   d6416:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d6418:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d641c:	f7ff ffc4 	bl	d63a8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d6420:	7820      	ldrb	r0, [r4, #0]
   d6422:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d6426:	f7ff fd19 	bl	d5e5c <HAL_SPI_Set_Clock_Divider>
        unlock();
   d642a:	7820      	ldrb	r0, [r4, #0]
   d642c:	f7ff ff7b 	bl	d6326 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d6430:	9802      	ldr	r0, [sp, #8]
   d6432:	b008      	add	sp, #32
   d6434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6438 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d6438:	b538      	push	{r3, r4, r5, lr}
   d643a:	4604      	mov	r4, r0
    if (!lock())
   d643c:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d643e:	460d      	mov	r5, r1
    if (!lock())
   d6440:	f7ff ff6e 	bl	d6320 <_ZN8SPIClass4lockEv.isra.0>
   d6444:	b9c8      	cbnz	r0, d647a <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d6446:	6861      	ldr	r1, [r4, #4]
   d6448:	b171      	cbz	r1, d6468 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d644a:	4b0c      	ldr	r3, [pc, #48]	; (d647c <_ZN8SPIClass15setClockDividerEh+0x44>)
   d644c:	5cc2      	ldrb	r2, [r0, r3]
   d644e:	42aa      	cmp	r2, r5
   d6450:	d002      	beq.n	d6458 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d6452:	3001      	adds	r0, #1
   d6454:	2808      	cmp	r0, #8
   d6456:	d1f9      	bne.n	d644c <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d6458:	3001      	adds	r0, #1
   d645a:	b2c0      	uxtb	r0, r0
   d645c:	40c1      	lsrs	r1, r0
   d645e:	2201      	movs	r2, #1
   d6460:	4620      	mov	r0, r4
   d6462:	f7ff ffb7 	bl	d63d4 <_ZN8SPIClass13setClockSpeedEjj>
   d6466:	e003      	b.n	d6470 <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d6468:	4629      	mov	r1, r5
   d646a:	7820      	ldrb	r0, [r4, #0]
   d646c:	f7ff fcf6 	bl	d5e5c <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d6470:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d6476:	f7ff bf56 	b.w	d6326 <_ZN8SPIClass6unlockEv.isra.1>
   d647a:	bd38      	pop	{r3, r4, r5, pc}
   d647c:	000d8444 	.word	0x000d8444

000d6480 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6480:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6482:	7800      	ldrb	r0, [r0, #0]
   d6484:	f7ff fcf2 	bl	d5e6c <HAL_SPI_Send_Receive_Data>
}
   d6488:	b2c0      	uxtb	r0, r0
   d648a:	bd08      	pop	{r3, pc}

000d648c <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d648c:	7800      	ldrb	r0, [r0, #0]
   d648e:	f7ff bcfd 	b.w	d5e8c <HAL_SPI_Is_Enabled>

000d6492 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6492:	b510      	push	{r4, lr}
   d6494:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6496:	6800      	ldr	r0, [r0, #0]
   d6498:	b118      	cbz	r0, d64a2 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d649a:	f7ff fedb 	bl	d6254 <free>
            wakeupSource_ = nullptr;
   d649e:	2300      	movs	r3, #0
   d64a0:	6023      	str	r3, [r4, #0]
   d64a2:	bd10      	pop	{r4, pc}

000d64a4 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d64a4:	b510      	push	{r4, lr}
   d64a6:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d64a8:	f7ff fff3 	bl	d6492 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d64ac:	4620      	mov	r0, r4
   d64ae:	bd10      	pop	{r4, pc}

000d64b0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d64b0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d64b2:	4c09      	ldr	r4, [pc, #36]	; (d64d8 <_GLOBAL__sub_I_System+0x28>)
   d64b4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d64b6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d64ba:	6020      	str	r0, [r4, #0]
   d64bc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d64be:	71a0      	strb	r0, [r4, #6]
   d64c0:	8120      	strh	r0, [r4, #8]
   d64c2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d64c4:	f7ff fe22 	bl	d610c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d64c8:	4620      	mov	r0, r4
   d64ca:	4a04      	ldr	r2, [pc, #16]	; (d64dc <_GLOBAL__sub_I_System+0x2c>)
   d64cc:	4904      	ldr	r1, [pc, #16]	; (d64e0 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d64ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d64d2:	f001 b949 	b.w	d7768 <__aeabi_atexit>
   d64d6:	bf00      	nop
   d64d8:	2003e3e4 	.word	0x2003e3e4
   d64dc:	2003e254 	.word	0x2003e254
   d64e0:	000d64a5 	.word	0x000d64a5

000d64e4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d64e4:	b510      	push	{r4, lr}
   d64e6:	4604      	mov	r4, r0
{
	free(buffer);
   d64e8:	6800      	ldr	r0, [r0, #0]
   d64ea:	f7ff feb3 	bl	d6254 <free>
}
   d64ee:	4620      	mov	r0, r4
   d64f0:	bd10      	pop	{r4, pc}

000d64f2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d64f2:	b510      	push	{r4, lr}
   d64f4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d64f6:	6800      	ldr	r0, [r0, #0]
   d64f8:	b108      	cbz	r0, d64fe <_ZN6String10invalidateEv+0xc>
   d64fa:	f7ff feab 	bl	d6254 <free>
	buffer = NULL;
   d64fe:	2300      	movs	r3, #0
   d6500:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6502:	60a3      	str	r3, [r4, #8]
   d6504:	6063      	str	r3, [r4, #4]
   d6506:	bd10      	pop	{r4, pc}

000d6508 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6508:	b538      	push	{r3, r4, r5, lr}
   d650a:	4604      	mov	r4, r0
   d650c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d650e:	6800      	ldr	r0, [r0, #0]
   d6510:	3101      	adds	r1, #1
   d6512:	f7ff fea7 	bl	d6264 <realloc>
	if (newbuffer) {
   d6516:	b110      	cbz	r0, d651e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6518:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d651c:	2001      	movs	r0, #1
	}
	return 0;
}
   d651e:	bd38      	pop	{r3, r4, r5, pc}

000d6520 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6520:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6522:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6524:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6526:	b113      	cbz	r3, d652e <_ZN6String7reserveEj+0xe>
   d6528:	6843      	ldr	r3, [r0, #4]
   d652a:	428b      	cmp	r3, r1
   d652c:	d207      	bcs.n	d653e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d652e:	4620      	mov	r0, r4
   d6530:	f7ff ffea 	bl	d6508 <_ZN6String12changeBufferEj>
   d6534:	b120      	cbz	r0, d6540 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6536:	68a3      	ldr	r3, [r4, #8]
   d6538:	b90b      	cbnz	r3, d653e <_ZN6String7reserveEj+0x1e>
   d653a:	6822      	ldr	r2, [r4, #0]
   d653c:	7013      	strb	r3, [r2, #0]
   d653e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6540:	bd10      	pop	{r4, pc}

000d6542 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6542:	b570      	push	{r4, r5, r6, lr}
   d6544:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6546:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6548:	4604      	mov	r4, r0
   d654a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d654c:	f7ff ffe8 	bl	d6520 <_ZN6String7reserveEj>
   d6550:	b918      	cbnz	r0, d655a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6552:	4620      	mov	r0, r4
   d6554:	f7ff ffcd 	bl	d64f2 <_ZN6String10invalidateEv>
		return *this;
   d6558:	e009      	b.n	d656e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d655a:	462a      	mov	r2, r5
   d655c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d655e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6560:	6820      	ldr	r0, [r4, #0]
   d6562:	f001 fa7b 	bl	d7a5c <memcpy>
	buffer[len] = 0;
   d6566:	6822      	ldr	r2, [r4, #0]
   d6568:	68a3      	ldr	r3, [r4, #8]
   d656a:	2100      	movs	r1, #0
   d656c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d656e:	4620      	mov	r0, r4
   d6570:	bd70      	pop	{r4, r5, r6, pc}

000d6572 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6572:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6574:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6576:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6578:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d657a:	6043      	str	r3, [r0, #4]
	len = 0;
   d657c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d657e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6580:	460d      	mov	r5, r1
   d6582:	b139      	cbz	r1, d6594 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6584:	4608      	mov	r0, r1
   d6586:	f001 fac0 	bl	d7b0a <strlen>
   d658a:	4629      	mov	r1, r5
   d658c:	4602      	mov	r2, r0
   d658e:	4620      	mov	r0, r4
   d6590:	f7ff ffd7 	bl	d6542 <_ZN6String4copyEPKcj>
}
   d6594:	4620      	mov	r0, r4
   d6596:	bd38      	pop	{r3, r4, r5, pc}

000d6598 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6598:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d659a:	b510      	push	{r4, lr}
   d659c:	460b      	mov	r3, r1
   d659e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d65a0:	d007      	beq.n	d65b2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d65a2:	6809      	ldr	r1, [r1, #0]
   d65a4:	b119      	cbz	r1, d65ae <_ZN6StringaSERKS_+0x16>
   d65a6:	689a      	ldr	r2, [r3, #8]
   d65a8:	f7ff ffcb 	bl	d6542 <_ZN6String4copyEPKcj>
   d65ac:	e001      	b.n	d65b2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d65ae:	f7ff ffa0 	bl	d64f2 <_ZN6String10invalidateEv>

	return *this;
}
   d65b2:	4620      	mov	r0, r4
   d65b4:	bd10      	pop	{r4, pc}

000d65b6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d65b6:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65b8:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d65ba:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d65bc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d65be:	6043      	str	r3, [r0, #4]
	len = 0;
   d65c0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d65c2:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d65c4:	f7ff ffe8 	bl	d6598 <_ZN6StringaSERKS_>
}
   d65c8:	4620      	mov	r0, r4
   d65ca:	bd10      	pop	{r4, pc}

000d65cc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d65cc:	b538      	push	{r3, r4, r5, lr}
   d65ce:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d65d0:	460c      	mov	r4, r1
   d65d2:	b141      	cbz	r1, d65e6 <_ZN6StringaSEPKc+0x1a>
   d65d4:	4608      	mov	r0, r1
   d65d6:	f001 fa98 	bl	d7b0a <strlen>
   d65da:	4621      	mov	r1, r4
   d65dc:	4602      	mov	r2, r0
   d65de:	4628      	mov	r0, r5
   d65e0:	f7ff ffaf 	bl	d6542 <_ZN6String4copyEPKcj>
   d65e4:	e001      	b.n	d65ea <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d65e6:	f7ff ff84 	bl	d64f2 <_ZN6String10invalidateEv>

	return *this;
}
   d65ea:	4628      	mov	r0, r5
   d65ec:	bd38      	pop	{r3, r4, r5, pc}

000d65ee <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d65ee:	b510      	push	{r4, lr}
   d65f0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d65f2:	6800      	ldr	r0, [r0, #0]
   d65f4:	b108      	cbz	r0, d65fa <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d65f6:	f7ff fca1 	bl	d5f3c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d65fa:	4620      	mov	r0, r4
   d65fc:	bd10      	pop	{r4, pc}

000d65fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d65fe:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6600:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6602:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6604:	689b      	ldr	r3, [r3, #8]
   d6606:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6608:	68a3      	ldr	r3, [r4, #8]
   d660a:	3b01      	subs	r3, #1
   d660c:	60a3      	str	r3, [r4, #8]
   d660e:	b92b      	cbnz	r3, d661c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d6610:	6823      	ldr	r3, [r4, #0]
   d6612:	4620      	mov	r0, r4
   d6614:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d661a:	4718      	bx	r3
   d661c:	bd10      	pop	{r4, pc}

000d661e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d661e:	680b      	ldr	r3, [r1, #0]
   d6620:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6622:	b113      	cbz	r3, d662a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6624:	685a      	ldr	r2, [r3, #4]
   d6626:	3201      	adds	r2, #1
   d6628:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d662a:	4770      	bx	lr

000d662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d662c:	b510      	push	{r4, lr}
   d662e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6630:	6800      	ldr	r0, [r0, #0]
   d6632:	b128      	cbz	r0, d6640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6634:	6843      	ldr	r3, [r0, #4]
   d6636:	3b01      	subs	r3, #1
   d6638:	6043      	str	r3, [r0, #4]
   d663a:	b90b      	cbnz	r3, d6640 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d663c:	f7ff ffdf 	bl	d65fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6640:	4620      	mov	r0, r4
   d6642:	bd10      	pop	{r4, pc}

000d6644 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6644:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6646:	4c06      	ldr	r4, [pc, #24]	; (d6660 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6648:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d664a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d664c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d664e:	f7ff fc6d 	bl	d5f2c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6652:	4620      	mov	r0, r4
   d6654:	4a03      	ldr	r2, [pc, #12]	; (d6664 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6656:	4904      	ldr	r1, [pc, #16]	; (d6668 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d665c:	f001 b884 	b.w	d7768 <__aeabi_atexit>
   d6660:	2003e3f0 	.word	0x2003e3f0
   d6664:	2003e254 	.word	0x2003e254
   d6668:	000d65ef 	.word	0x000d65ef

000d666c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d666e:	4606      	mov	r6, r0
   d6670:	460d      	mov	r5, r1
   d6672:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6674:	2400      	movs	r4, #0
  while (size--) {
   d6676:	42bd      	cmp	r5, r7
   d6678:	d00c      	beq.n	d6694 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d667a:	6833      	ldr	r3, [r6, #0]
   d667c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6680:	689b      	ldr	r3, [r3, #8]
   d6682:	4630      	mov	r0, r6
   d6684:	4798      	blx	r3
     if (chunk>=0)
   d6686:	2800      	cmp	r0, #0
   d6688:	db01      	blt.n	d668e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d668a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d668c:	e7f3      	b.n	d6676 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d668e:	2c00      	cmp	r4, #0
   d6690:	bf08      	it	eq
   d6692:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6694:	4620      	mov	r0, r4
   d6696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6698 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6698:	b570      	push	{r4, r5, r6, lr}
   d669a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d669c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d669e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d66a0:	b149      	cbz	r1, d66b6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d66a2:	f001 fa32 	bl	d7b0a <strlen>
   d66a6:	682b      	ldr	r3, [r5, #0]
   d66a8:	4602      	mov	r2, r0
   d66aa:	4621      	mov	r1, r4
   d66ac:	4628      	mov	r0, r5
   d66ae:	68db      	ldr	r3, [r3, #12]
    }
   d66b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d66b4:	4718      	bx	r3
    }
   d66b6:	bd70      	pop	{r4, r5, r6, pc}

000d66b8 <_ZN5Print5printEPKc>:
   d66b8:	b508      	push	{r3, lr}
   d66ba:	f7ff ffed 	bl	d6698 <_ZN5Print5writeEPKc>
   d66be:	bd08      	pop	{r3, pc}

000d66c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d66c0:	6803      	ldr	r3, [r0, #0]
   d66c2:	689b      	ldr	r3, [r3, #8]
   d66c4:	4718      	bx	r3

000d66c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d66c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d66c8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d66ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d66cc:	f7ff fff8 	bl	d66c0 <_ZN5Print5printEc>
  n += print('\n');
   d66d0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d66d2:	4604      	mov	r4, r0
  n += print('\n');
   d66d4:	4628      	mov	r0, r5
   d66d6:	f7ff fff3 	bl	d66c0 <_ZN5Print5printEc>
  return n;
}
   d66da:	4420      	add	r0, r4
   d66dc:	bd38      	pop	{r3, r4, r5, pc}

000d66de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d66de:	b538      	push	{r3, r4, r5, lr}
   d66e0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d66e2:	f7ff ffd9 	bl	d6698 <_ZN5Print5writeEPKc>
   d66e6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d66e8:	4628      	mov	r0, r5
   d66ea:	f7ff ffec 	bl	d66c6 <_ZN5Print7printlnEv>
  return n;
}
   d66ee:	4420      	add	r0, r4
   d66f0:	bd38      	pop	{r3, r4, r5, pc}

000d66f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d66f2:	b530      	push	{r4, r5, lr}
   d66f4:	b08b      	sub	sp, #44	; 0x2c
   d66f6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d66f8:	2100      	movs	r1, #0
   d66fa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d66fe:	2a01      	cmp	r2, #1
   d6700:	bf98      	it	ls
   d6702:	220a      	movls	r2, #10
   d6704:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6708:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d670c:	fb05 3312 	mls	r3, r5, r2, r3
   d6710:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6714:	2b09      	cmp	r3, #9
   d6716:	bf94      	ite	ls
   d6718:	3330      	addls	r3, #48	; 0x30
   d671a:	3337      	addhi	r3, #55	; 0x37
   d671c:	b2db      	uxtb	r3, r3
   d671e:	4621      	mov	r1, r4
   d6720:	f804 3901 	strb.w	r3, [r4], #-1
   d6724:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6726:	2d00      	cmp	r5, #0
   d6728:	d1ee      	bne.n	d6708 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d672a:	f7ff ffb5 	bl	d6698 <_ZN5Print5writeEPKc>
}
   d672e:	b00b      	add	sp, #44	; 0x2c
   d6730:	bd30      	pop	{r4, r5, pc}
	...

000d6734 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6734:	4b01      	ldr	r3, [pc, #4]	; (d673c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6736:	4a02      	ldr	r2, [pc, #8]	; (d6740 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6738:	601a      	str	r2, [r3, #0]
   d673a:	4770      	bx	lr
   d673c:	2003e3f4 	.word	0x2003e3f4
   d6740:	000d84bf 	.word	0x000d84bf

000d6744 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6744:	4b02      	ldr	r3, [pc, #8]	; (d6750 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6746:	681a      	ldr	r2, [r3, #0]
   d6748:	4b02      	ldr	r3, [pc, #8]	; (d6754 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d674a:	601a      	str	r2, [r3, #0]
   d674c:	4770      	bx	lr
   d674e:	bf00      	nop
   d6750:	2003e1ec 	.word	0x2003e1ec
   d6754:	2003e3f8 	.word	0x2003e3f8

000d6758 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6758:	2100      	movs	r1, #0
   d675a:	f7ff bcdf 	b.w	d611c <system_delay_ms>

000d675e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d675e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6760:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6762:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6764:	b113      	cbz	r3, d676c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6766:	2203      	movs	r2, #3
   d6768:	4601      	mov	r1, r0
   d676a:	4798      	blx	r3
    }
   d676c:	4620      	mov	r0, r4
   d676e:	bd10      	pop	{r4, pc}

000d6770 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6770:	b510      	push	{r4, lr}
   d6772:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6774:	f7ff fff3 	bl	d675e <_ZNSt14_Function_baseD1Ev>
   d6778:	4620      	mov	r0, r4
   d677a:	bd10      	pop	{r4, pc}

000d677c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d677c:	b513      	push	{r0, r1, r4, lr}
   d677e:	460b      	mov	r3, r1
   d6780:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6782:	c803      	ldmia	r0, {r0, r1}
   d6784:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6788:	e893 0003 	ldmia.w	r3, {r0, r1}
   d678c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6790:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6794:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6798:	b002      	add	sp, #8
   d679a:	bd10      	pop	{r4, pc}

000d679c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d679c:	4803      	ldr	r0, [pc, #12]	; (d67ac <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d679e:	4a04      	ldr	r2, [pc, #16]	; (d67b0 <_GLOBAL__sub_I_RGB+0x14>)
   d67a0:	4904      	ldr	r1, [pc, #16]	; (d67b4 <_GLOBAL__sub_I_RGB+0x18>)
   d67a2:	2300      	movs	r3, #0
   d67a4:	6083      	str	r3, [r0, #8]
   d67a6:	f000 bfdf 	b.w	d7768 <__aeabi_atexit>
   d67aa:	bf00      	nop
   d67ac:	2003e3fc 	.word	0x2003e3fc
   d67b0:	2003e254 	.word	0x2003e254
   d67b4:	000d6771 	.word	0x000d6771

000d67b8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d67b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d67ba:	4b0c      	ldr	r3, [pc, #48]	; (d67ec <serialEventRun+0x34>)
   d67bc:	b133      	cbz	r3, d67cc <serialEventRun+0x14>
   d67be:	f000 fc1b 	bl	d6ff8 <_Z16_fetch_usbserialv>
   d67c2:	6803      	ldr	r3, [r0, #0]
   d67c4:	691b      	ldr	r3, [r3, #16]
   d67c6:	4798      	blx	r3
   d67c8:	2800      	cmp	r0, #0
   d67ca:	dc09      	bgt.n	d67e0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d67cc:	4b08      	ldr	r3, [pc, #32]	; (d67f0 <serialEventRun+0x38>)
   d67ce:	b163      	cbz	r3, d67ea <serialEventRun+0x32>
   d67d0:	f000 fc94 	bl	d70fc <_Z22__fetch_global_Serial1v>
   d67d4:	6803      	ldr	r3, [r0, #0]
   d67d6:	691b      	ldr	r3, [r3, #16]
   d67d8:	4798      	blx	r3
   d67da:	2800      	cmp	r0, #0
   d67dc:	dc03      	bgt.n	d67e6 <serialEventRun+0x2e>
   d67de:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d67e0:	f3af 8000 	nop.w
   d67e4:	e7f2      	b.n	d67cc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d67e6:	f3af 8000 	nop.w
   d67ea:	bd08      	pop	{r3, pc}
	...

000d67f4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d67f4:	b508      	push	{r3, lr}
	serialEventRun();
   d67f6:	f7ff ffdf 	bl	d67b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d67fa:	f7ff fb77 	bl	d5eec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d67fe:	4b01      	ldr	r3, [pc, #4]	; (d6804 <_post_loop+0x10>)
   d6800:	6018      	str	r0, [r3, #0]
   d6802:	bd08      	pop	{r3, pc}
   d6804:	2003e730 	.word	0x2003e730

000d6808 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6808:	4802      	ldr	r0, [pc, #8]	; (d6814 <_Z33system_initialize_user_backup_ramv+0xc>)
   d680a:	4a03      	ldr	r2, [pc, #12]	; (d6818 <_Z33system_initialize_user_backup_ramv+0x10>)
   d680c:	4903      	ldr	r1, [pc, #12]	; (d681c <_Z33system_initialize_user_backup_ramv+0x14>)
   d680e:	1a12      	subs	r2, r2, r0
   d6810:	f001 b924 	b.w	d7a5c <memcpy>
   d6814:	2003f400 	.word	0x2003f400
   d6818:	2003f404 	.word	0x2003f404
   d681c:	000d8770 	.word	0x000d8770

000d6820 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6820:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6822:	2300      	movs	r3, #0
   d6824:	9300      	str	r3, [sp, #0]
   d6826:	461a      	mov	r2, r3
   d6828:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d682c:	f7ff fc98 	bl	d6160 <system_ctrl_set_result>
}
   d6830:	b003      	add	sp, #12
   d6832:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6838 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6838:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d683a:	8843      	ldrh	r3, [r0, #2]
   d683c:	2b0a      	cmp	r3, #10
   d683e:	d008      	beq.n	d6852 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6840:	2b50      	cmp	r3, #80	; 0x50
   d6842:	d109      	bne.n	d6858 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6844:	4b09      	ldr	r3, [pc, #36]	; (d686c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6846:	681b      	ldr	r3, [r3, #0]
   d6848:	b13b      	cbz	r3, d685a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d684a:	b003      	add	sp, #12
   d684c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6850:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6852:	f7ff ffe5 	bl	d6820 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6856:	e006      	b.n	d6866 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6858:	2300      	movs	r3, #0
   d685a:	9300      	str	r3, [sp, #0]
   d685c:	461a      	mov	r2, r3
   d685e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6862:	f7ff fc7d 	bl	d6160 <system_ctrl_set_result>
        break;
    }
}
   d6866:	b003      	add	sp, #12
   d6868:	f85d fb04 	ldr.w	pc, [sp], #4
   d686c:	2003e40c 	.word	0x2003e40c

000d6870 <module_user_init_hook>:

void module_user_init_hook()
{
   d6870:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6872:	4c10      	ldr	r4, [pc, #64]	; (d68b4 <module_user_init_hook+0x44>)
   d6874:	4d10      	ldr	r5, [pc, #64]	; (d68b8 <module_user_init_hook+0x48>)
   d6876:	6823      	ldr	r3, [r4, #0]
   d6878:	42ab      	cmp	r3, r5
   d687a:	4b10      	ldr	r3, [pc, #64]	; (d68bc <module_user_init_hook+0x4c>)
   d687c:	bf0c      	ite	eq
   d687e:	2201      	moveq	r2, #1
   d6880:	2200      	movne	r2, #0
   d6882:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6884:	d002      	beq.n	d688c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6886:	f7ff ffbf 	bl	d6808 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d688a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d688c:	f7ff fb1e 	bl	d5ecc <HAL_RNG_GetRandomNumber>
   d6890:	4604      	mov	r4, r0
    srand(seed);
   d6892:	f001 f8f7 	bl	d7a84 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6896:	4b0a      	ldr	r3, [pc, #40]	; (d68c0 <module_user_init_hook+0x50>)
   d6898:	b113      	cbz	r3, d68a0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d689a:	4620      	mov	r0, r4
   d689c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d68a0:	2100      	movs	r1, #0
   d68a2:	4807      	ldr	r0, [pc, #28]	; (d68c0 <module_user_init_hook+0x50>)
   d68a4:	f7ff fcc6 	bl	d6234 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d68a8:	2100      	movs	r1, #0
   d68aa:	4806      	ldr	r0, [pc, #24]	; (d68c4 <module_user_init_hook+0x54>)
}
   d68ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d68b0:	f7ff bc4c 	b.w	d614c <system_ctrl_set_app_request_handler>
   d68b4:	2003f400 	.word	0x2003f400
   d68b8:	9a271c1e 	.word	0x9a271c1e
   d68bc:	2003e410 	.word	0x2003e410
   d68c0:	00000000 	.word	0x00000000
   d68c4:	000d6839 	.word	0x000d6839

000d68c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68c8:	4770      	bx	lr

000d68ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d68ca:	2000      	movs	r0, #0
   d68cc:	4770      	bx	lr

000d68ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68ce:	b510      	push	{r4, lr}
   d68d0:	2110      	movs	r1, #16
   d68d2:	4604      	mov	r4, r0
   d68d4:	f000 ff56 	bl	d7784 <_ZdlPvj>
   d68d8:	4620      	mov	r0, r4
   d68da:	bd10      	pop	{r4, pc}

000d68dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d68dc:	b508      	push	{r3, lr}
      { delete this; }
   d68de:	b108      	cbz	r0, d68e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d68e0:	f7ff fff5 	bl	d68ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d68e4:	bd08      	pop	{r3, pc}

000d68e6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d68e6:	2200      	movs	r2, #0
   d68e8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d68ea:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d68ec:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d68f0:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d68f2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d68f6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d68f8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68fa:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d68fc:	680c      	ldr	r4, [r1, #0]
   d68fe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6900:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d6902:	bd10      	pop	{r4, pc}

000d6904 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6904:	b510      	push	{r4, lr}
   d6906:	4604      	mov	r4, r0
    free((void*)msg_);
   d6908:	6800      	ldr	r0, [r0, #0]
   d690a:	f7ff fca3 	bl	d6254 <free>
}
   d690e:	4620      	mov	r0, r4
   d6910:	bd10      	pop	{r4, pc}

000d6912 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6912:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6914:	68c4      	ldr	r4, [r0, #12]
   d6916:	b1f4      	cbz	r4, d6956 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6918:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d691a:	2b02      	cmp	r3, #2
   d691c:	d103      	bne.n	d6926 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d691e:	f104 000c 	add.w	r0, r4, #12
   d6922:	f7ff ffef 	bl	d6904 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d6926:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6928:	b135      	cbz	r5, d6938 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d692a:	4628      	mov	r0, r5
   d692c:	f7ff ff17 	bl	d675e <_ZNSt14_Function_baseD1Ev>
   d6930:	2110      	movs	r1, #16
   d6932:	4628      	mov	r0, r5
   d6934:	f000 ff26 	bl	d7784 <_ZdlPvj>
   d6938:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d693a:	b135      	cbz	r5, d694a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d693c:	4628      	mov	r0, r5
   d693e:	f7ff ff0e 	bl	d675e <_ZNSt14_Function_baseD1Ev>
   d6942:	2110      	movs	r1, #16
   d6944:	4628      	mov	r0, r5
   d6946:	f000 ff1d 	bl	d7784 <_ZdlPvj>
   d694a:	4620      	mov	r0, r4
   d694c:	2114      	movs	r1, #20
   d694e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6952:	f000 bf17 	b.w	d7784 <_ZdlPvj>
   d6956:	bd38      	pop	{r3, r4, r5, pc}

000d6958 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6958:	b513      	push	{r0, r1, r4, lr}
   d695a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d695c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d6960:	2300      	movs	r3, #0
   d6962:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6964:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6966:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6968:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d696a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d696c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d696e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6970:	f7ff fe5c 	bl	d662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6974:	4620      	mov	r0, r4
   d6976:	b002      	add	sp, #8
   d6978:	bd10      	pop	{r4, pc}

000d697a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d697a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d697c:	460c      	mov	r4, r1
   d697e:	ad02      	add	r5, sp, #8
   d6980:	f854 3b04 	ldr.w	r3, [r4], #4
   d6984:	f845 3d08 	str.w	r3, [r5, #-8]!
   d6988:	4606      	mov	r6, r0
   d698a:	460f      	mov	r7, r1
   d698c:	a801      	add	r0, sp, #4
   d698e:	4621      	mov	r1, r4
   d6990:	f7ff fe45 	bl	d661e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d6994:	4629      	mov	r1, r5
   d6996:	4630      	mov	r0, r6
   d6998:	f7ff ffde 	bl	d6958 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d699c:	a801      	add	r0, sp, #4
   d699e:	f7ff fe45 	bl	d662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69a2:	4620      	mov	r0, r4
   d69a4:	f7ff fe42 	bl	d662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d69a8:	4638      	mov	r0, r7
   d69aa:	2108      	movs	r1, #8
   d69ac:	f000 feea 	bl	d7784 <_ZdlPvj>
        return p;
    }
   d69b0:	4630      	mov	r0, r6
   d69b2:	b003      	add	sp, #12
   d69b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d69b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d69b8:	b538      	push	{r3, r4, r5, lr}
   d69ba:	2300      	movs	r3, #0
   d69bc:	4604      	mov	r4, r0
   d69be:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69c0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d69c2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69c4:	f7fd fb67 	bl	d4096 <_Znwj>
   d69c8:	b128      	cbz	r0, d69d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d69ca:	2301      	movs	r3, #1
   d69cc:	6043      	str	r3, [r0, #4]
   d69ce:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d69d0:	4b02      	ldr	r3, [pc, #8]	; (d69dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d69d2:	6003      	str	r3, [r0, #0]
   d69d4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69d6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d69d8:	4620      	mov	r0, r4
   d69da:	bd38      	pop	{r3, r4, r5, pc}
   d69dc:	000d855c 	.word	0x000d855c

000d69e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d69e0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d69e2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d69e4:	b90a      	cbnz	r2, d69ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d69e6:	f000 fee0 	bl	d77aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69ea:	68c3      	ldr	r3, [r0, #12]
    }
   d69ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69f0:	4718      	bx	r3

000d69f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d69f2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d69f4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d69f6:	f100 0110 	add.w	r1, r0, #16
   d69fa:	f7ff fff1 	bl	d69e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d69fe:	bd08      	pop	{r3, pc}

000d6a00 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a00:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6a02:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6a04:	b90a      	cbnz	r2, d6a0a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6a06:	f000 fed0 	bl	d77aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a0a:	68c3      	ldr	r3, [r0, #12]
    }
   d6a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a10:	4718      	bx	r3

000d6a12 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a12:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6a14:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6a16:	f100 0110 	add.w	r1, r0, #16
   d6a1a:	f7ff fff1 	bl	d6a00 <_ZNKSt8functionIFvRKbEEclES1_>
   d6a1e:	bd08      	pop	{r3, pc}

000d6a20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6a20:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6a22:	2300      	movs	r3, #0
   d6a24:	6083      	str	r3, [r0, #8]
   d6a26:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6a28:	4604      	mov	r4, r0
   d6a2a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6a2c:	b12b      	cbz	r3, d6a3a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6a2e:	2202      	movs	r2, #2
   d6a30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6a32:	68eb      	ldr	r3, [r5, #12]
   d6a34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6a36:	68ab      	ldr	r3, [r5, #8]
   d6a38:	60a3      	str	r3, [r4, #8]
	}
    }
   d6a3a:	4620      	mov	r0, r4
   d6a3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6a40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a42:	b089      	sub	sp, #36	; 0x24
   d6a44:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6a46:	4668      	mov	r0, sp
   d6a48:	f7ff ff4d 	bl	d68e6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6a4c:	2300      	movs	r3, #0
   d6a4e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6a52:	f04f 0202 	mov.w	r2, #2
   d6a56:	e8d4 3f4f 	ldrexb	r3, [r4]
   d6a5a:	2b00      	cmp	r3, #0
   d6a5c:	d103      	bne.n	d6a66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d6a5e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d6a62:	2900      	cmp	r1, #0
   d6a64:	d1f7      	bne.n	d6a56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d6a66:	d002      	beq.n	d6a6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d6a68:	f88d 3008 	strb.w	r3, [sp, #8]
   d6a6c:	e063      	b.n	d6b36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d6a6e:	f114 050c 	adds.w	r5, r4, #12
   d6a72:	d003      	beq.n	d6a7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d6a74:	4669      	mov	r1, sp
   d6a76:	4628      	mov	r0, r5
   d6a78:	f7ff ff35 	bl	d68e6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6a7c:	f3bf 8f5f 	dmb	sy
   d6a80:	2301      	movs	r3, #1
   d6a82:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6a84:	2000      	movs	r0, #0
   d6a86:	f104 0308 	add.w	r3, r4, #8
   d6a8a:	f3bf 8f5f 	dmb	sy
   d6a8e:	e853 6f00 	ldrex	r6, [r3]
   d6a92:	e843 0200 	strex	r2, r0, [r3]
   d6a96:	2a00      	cmp	r2, #0
   d6a98:	d1f9      	bne.n	d6a8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d6a9a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6a9e:	2e00      	cmp	r6, #0
   d6aa0:	d049      	beq.n	d6b36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6aa2:	f7ff fb43 	bl	d612c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6aa6:	b120      	cbz	r0, d6ab2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6aa8:	4629      	mov	r1, r5
   d6aaa:	4630      	mov	r0, r6
   d6aac:	f7ff ff98 	bl	d69e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6ab0:	e03a      	b.n	d6b28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6ab2:	4631      	mov	r1, r6
   d6ab4:	a802      	add	r0, sp, #8
   d6ab6:	f7ff ffb3 	bl	d6a20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6aba:	68e0      	ldr	r0, [r4, #12]
   d6abc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6ac0:	b108      	cbz	r0, d6ac6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d6ac2:	f001 f807 	bl	d7ad4 <strdup>
   d6ac6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6ac8:	2010      	movs	r0, #16
   d6aca:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6ace:	f7fd fae2 	bl	d4096 <_Znwj>
   d6ad2:	4605      	mov	r5, r0
   d6ad4:	b1e8      	cbz	r0, d6b12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ad6:	2700      	movs	r7, #0
   d6ad8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ada:	2018      	movs	r0, #24
   d6adc:	f7fd fadb 	bl	d4096 <_Znwj>
   d6ae0:	4604      	mov	r4, r0
   d6ae2:	b188      	cbz	r0, d6b08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6ae4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ae6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6ae8:	a802      	add	r0, sp, #8
   d6aea:	f7ff fe47 	bl	d677c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6aee:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6af0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6af2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6af4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6af6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6af8:	a906      	add	r1, sp, #24
   d6afa:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6afc:	60e3      	str	r3, [r4, #12]
   d6afe:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6b02:	9205      	str	r2, [sp, #20]
   d6b04:	f7ff feef 	bl	d68e6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6b08:	4b0d      	ldr	r3, [pc, #52]	; (d6b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6b0a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6b0c:	4b0d      	ldr	r3, [pc, #52]	; (d6b44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b0e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6b10:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d6b12:	a806      	add	r0, sp, #24
   d6b14:	f7ff fef6 	bl	d6904 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b18:	a802      	add	r0, sp, #8
   d6b1a:	f7ff fe20 	bl	d675e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6b1e:	2200      	movs	r2, #0
   d6b20:	4629      	mov	r1, r5
   d6b22:	4809      	ldr	r0, [pc, #36]	; (d6b48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d6b24:	f7ff fb0a 	bl	d613c <application_thread_invoke>
   d6b28:	4630      	mov	r0, r6
   d6b2a:	f7ff fe18 	bl	d675e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6b2e:	2110      	movs	r1, #16
   d6b30:	4630      	mov	r0, r6
   d6b32:	f000 fe27 	bl	d7784 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d6b36:	4668      	mov	r0, sp
   d6b38:	f7ff fee4 	bl	d6904 <_ZN8particle5ErrorD1Ev>
    }
   d6b3c:	b009      	add	sp, #36	; 0x24
   d6b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b40:	000d69f3 	.word	0x000d69f3
   d6b44:	000d6c69 	.word	0x000d6c69
   d6b48:	000d7149 	.word	0x000d7149

000d6b4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6b50:	b08b      	sub	sp, #44	; 0x2c
   d6b52:	4606      	mov	r6, r0
   d6b54:	460f      	mov	r7, r1
   d6b56:	4690      	mov	r8, r2
   d6b58:	4699      	mov	r9, r3
   d6b5a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6b5e:	f7ff fb59 	bl	d6214 <spark_cloud_flag_connected>
   d6b62:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d6b64:	4683      	mov	fp, r0
   d6b66:	bb30      	cbnz	r0, d6bb6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6b68:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6b6c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6b6e:	a905      	add	r1, sp, #20
   d6b70:	4628      	mov	r0, r5
   d6b72:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6b76:	f7ff feb6 	bl	d68e6 <_ZN8particle5ErrorC1EOS0_>
   d6b7a:	2014      	movs	r0, #20
   d6b7c:	f7fd fa8b 	bl	d4096 <_Znwj>
   d6b80:	4604      	mov	r4, r0
   d6b82:	b158      	cbz	r0, d6b9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6b84:	2302      	movs	r3, #2
   d6b86:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b88:	2301      	movs	r3, #1
   d6b8a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6b8c:	f8c0 b004 	str.w	fp, [r0, #4]
   d6b90:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d6b94:	4629      	mov	r1, r5
   d6b96:	300c      	adds	r0, #12
   d6b98:	f7ff fea5 	bl	d68e6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d6b9c:	4630      	mov	r0, r6
   d6b9e:	4621      	mov	r1, r4
   d6ba0:	f840 4b04 	str.w	r4, [r0], #4
   d6ba4:	f7ff ff08 	bl	d69b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6ba8:	4628      	mov	r0, r5
   d6baa:	f7ff feab 	bl	d6904 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6bae:	a805      	add	r0, sp, #20
   d6bb0:	f7ff fea8 	bl	d6904 <_ZN8particle5ErrorD1Ev>
   d6bb4:	e052      	b.n	d6c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6bb6:	2400      	movs	r4, #0
   d6bb8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6bba:	2014      	movs	r0, #20
   d6bbc:	606c      	str	r4, [r5, #4]
   d6bbe:	60ac      	str	r4, [r5, #8]
   d6bc0:	9307      	str	r3, [sp, #28]
   d6bc2:	f7fd fa68 	bl	d4096 <_Znwj>
   d6bc6:	4601      	mov	r1, r0
   d6bc8:	b118      	cbz	r0, d6bd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6bca:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6bcc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6bce:	6044      	str	r4, [r0, #4]
   d6bd0:	6084      	str	r4, [r0, #8]
   d6bd2:	a804      	add	r0, sp, #16
   d6bd4:	9103      	str	r1, [sp, #12]
   d6bd6:	f7ff feef 	bl	d69b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6bda:	4b22      	ldr	r3, [pc, #136]	; (d6c64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6bdc:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6bde:	2008      	movs	r0, #8
   d6be0:	f7fd fa59 	bl	d4096 <_Znwj>
   d6be4:	4604      	mov	r4, r0
   d6be6:	b128      	cbz	r0, d6bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6be8:	9b03      	ldr	r3, [sp, #12]
   d6bea:	f840 3b04 	str.w	r3, [r0], #4
   d6bee:	a904      	add	r1, sp, #16
   d6bf0:	f7ff fd15 	bl	d661e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6bf4:	9500      	str	r5, [sp, #0]
   d6bf6:	fa5f f38a 	uxtb.w	r3, sl
   d6bfa:	464a      	mov	r2, r9
   d6bfc:	4641      	mov	r1, r8
   d6bfe:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6c00:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c02:	f7ff fb0f 	bl	d6224 <spark_send_event>
   d6c06:	b920      	cbnz	r0, d6c12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6c08:	9b03      	ldr	r3, [sp, #12]
   d6c0a:	785b      	ldrb	r3, [r3, #1]
   d6c0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6c10:	b183      	cbz	r3, d6c34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d6c12:	9b03      	ldr	r3, [sp, #12]
   d6c14:	9305      	str	r3, [sp, #20]
   d6c16:	a904      	add	r1, sp, #16
   d6c18:	a806      	add	r0, sp, #24
   d6c1a:	f7ff fd00 	bl	d661e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6c1e:	a905      	add	r1, sp, #20
   d6c20:	4630      	mov	r0, r6
   d6c22:	f7ff fe99 	bl	d6958 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c26:	a806      	add	r0, sp, #24
   d6c28:	f7ff fd00 	bl	d662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c2c:	a804      	add	r0, sp, #16
   d6c2e:	f7ff fcfd 	bl	d662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c32:	e013      	b.n	d6c5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d6c34:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6c38:	a905      	add	r1, sp, #20
   d6c3a:	a803      	add	r0, sp, #12
   d6c3c:	9205      	str	r2, [sp, #20]
   d6c3e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6c42:	f7ff fefd 	bl	d6a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6c46:	a805      	add	r0, sp, #20
   d6c48:	f7ff fe5c 	bl	d6904 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6c4c:	a805      	add	r0, sp, #20
   d6c4e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6c50:	f7ff fe93 	bl	d697a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d6c54:	a806      	add	r0, sp, #24
   d6c56:	f7ff fce9 	bl	d662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c5a:	e7da      	b.n	d6c12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d6c5c:	4630      	mov	r0, r6
   d6c5e:	b00b      	add	sp, #44	; 0x2c
   d6c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c64:	000d6dd9 	.word	0x000d6dd9

000d6c68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6c68:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c6c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6c6e:	d006      	beq.n	d6c7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6c70:	2a03      	cmp	r2, #3
   d6c72:	d017      	beq.n	d6ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6c74:	2a01      	cmp	r2, #1
   d6c76:	d122      	bne.n	d6cbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6c78:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6c7a:	6003      	str	r3, [r0, #0]
	      break;
   d6c7c:	e01f      	b.n	d6cbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6c7e:	2018      	movs	r0, #24
   d6c80:	680e      	ldr	r6, [r1, #0]
   d6c82:	f7fd fa08 	bl	d4096 <_Znwj>
   d6c86:	4605      	mov	r5, r0
   d6c88:	b150      	cbz	r0, d6ca0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6c8a:	4631      	mov	r1, r6
   d6c8c:	f7ff fec8 	bl	d6a20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6c90:	6930      	ldr	r0, [r6, #16]
   d6c92:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6c96:	b108      	cbz	r0, d6c9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6c98:	f000 ff1c 	bl	d7ad4 <strdup>
   d6c9c:	6128      	str	r0, [r5, #16]
   d6c9e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6ca0:	6025      	str	r5, [r4, #0]
   d6ca2:	e00c      	b.n	d6cbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6ca4:	6804      	ldr	r4, [r0, #0]
   d6ca6:	b154      	cbz	r4, d6cbe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6ca8:	f104 0010 	add.w	r0, r4, #16
   d6cac:	f7ff fe2a 	bl	d6904 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6cb0:	4620      	mov	r0, r4
   d6cb2:	f7ff fd54 	bl	d675e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6cb6:	2118      	movs	r1, #24
   d6cb8:	4620      	mov	r0, r4
   d6cba:	f000 fd63 	bl	d7784 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6cbe:	2000      	movs	r0, #0
   d6cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cc2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6cc2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6cc4:	2300      	movs	r3, #0
   d6cc6:	6083      	str	r3, [r0, #8]
   d6cc8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6cca:	4604      	mov	r4, r0
   d6ccc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6cce:	b12b      	cbz	r3, d6cdc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6cd0:	2202      	movs	r2, #2
   d6cd2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6cd4:	68eb      	ldr	r3, [r5, #12]
   d6cd6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6cd8:	68ab      	ldr	r3, [r5, #8]
   d6cda:	60a3      	str	r3, [r4, #8]
	}
    }
   d6cdc:	4620      	mov	r0, r4
   d6cde:	bd38      	pop	{r3, r4, r5, pc}

000d6ce0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6ce0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6ce2:	b570      	push	{r4, r5, r6, lr}
   d6ce4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6ce6:	d006      	beq.n	d6cf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6ce8:	2a03      	cmp	r2, #3
   d6cea:	d011      	beq.n	d6d10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6cec:	2a01      	cmp	r2, #1
   d6cee:	d118      	bne.n	d6d22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6cf0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6cf2:	6003      	str	r3, [r0, #0]
	      break;
   d6cf4:	e015      	b.n	d6d22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6cf6:	2014      	movs	r0, #20
   d6cf8:	680e      	ldr	r6, [r1, #0]
   d6cfa:	f7fd f9cc 	bl	d4096 <_Znwj>
   d6cfe:	4605      	mov	r5, r0
   d6d00:	b120      	cbz	r0, d6d0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6d02:	4631      	mov	r1, r6
   d6d04:	f7ff ffdd 	bl	d6cc2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6d08:	7c33      	ldrb	r3, [r6, #16]
   d6d0a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6d0c:	6025      	str	r5, [r4, #0]
   d6d0e:	e008      	b.n	d6d22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6d10:	6804      	ldr	r4, [r0, #0]
   d6d12:	b134      	cbz	r4, d6d22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d14:	4620      	mov	r0, r4
   d6d16:	f7ff fd22 	bl	d675e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6d1a:	2114      	movs	r1, #20
   d6d1c:	4620      	mov	r0, r4
   d6d1e:	f000 fd31 	bl	d7784 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6d22:	2000      	movs	r0, #0
   d6d24:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6d28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6d28:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6d2a:	2300      	movs	r3, #0
   d6d2c:	b087      	sub	sp, #28
   d6d2e:	460c      	mov	r4, r1
   d6d30:	f3bf 8f5f 	dmb	sy
   d6d34:	e850 6f00 	ldrex	r6, [r0]
   d6d38:	e840 3200 	strex	r2, r3, [r0]
   d6d3c:	2a00      	cmp	r2, #0
   d6d3e:	d1f9      	bne.n	d6d34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6d40:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6d44:	2e00      	cmp	r6, #0
   d6d46:	d03f      	beq.n	d6dc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6d48:	4618      	mov	r0, r3
   d6d4a:	f7ff f9ef 	bl	d612c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6d4e:	4607      	mov	r7, r0
   d6d50:	b120      	cbz	r0, d6d5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d52:	4621      	mov	r1, r4
   d6d54:	4630      	mov	r0, r6
   d6d56:	f7ff fe53 	bl	d6a00 <_ZNKSt8functionIFvRKbEEclES1_>
   d6d5a:	e02e      	b.n	d6dba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6d5c:	4631      	mov	r1, r6
   d6d5e:	a801      	add	r0, sp, #4
   d6d60:	f7ff ffaf 	bl	d6cc2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6d64:	7823      	ldrb	r3, [r4, #0]
   d6d66:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6d6a:	2010      	movs	r0, #16
   d6d6c:	f7fd f993 	bl	d4096 <_Znwj>
   d6d70:	4605      	mov	r5, r0
   d6d72:	b1d0      	cbz	r0, d6daa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d74:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d76:	2014      	movs	r0, #20
   d6d78:	f7fd f98d 	bl	d4096 <_Znwj>
   d6d7c:	4604      	mov	r4, r0
   d6d7e:	b178      	cbz	r0, d6da0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6d80:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6d82:	4601      	mov	r1, r0
   d6d84:	a801      	add	r0, sp, #4
   d6d86:	f7ff fcf9 	bl	d677c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d8a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6d8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d8e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d90:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6d92:	9203      	str	r2, [sp, #12]
   d6d94:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d96:	60e3      	str	r3, [r4, #12]
   d6d98:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6d9c:	9204      	str	r2, [sp, #16]
   d6d9e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6da0:	4b0a      	ldr	r3, [pc, #40]	; (d6dcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6da2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6da4:	4b0a      	ldr	r3, [pc, #40]	; (d6dd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6da6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6da8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6daa:	a801      	add	r0, sp, #4
   d6dac:	f7ff fcd7 	bl	d675e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6db0:	2200      	movs	r2, #0
   d6db2:	4629      	mov	r1, r5
   d6db4:	4807      	ldr	r0, [pc, #28]	; (d6dd4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6db6:	f7ff f9c1 	bl	d613c <application_thread_invoke>
   d6dba:	4630      	mov	r0, r6
   d6dbc:	f7ff fccf 	bl	d675e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6dc0:	2110      	movs	r1, #16
   d6dc2:	4630      	mov	r0, r6
   d6dc4:	f000 fcde 	bl	d7784 <_ZdlPvj>
        }
    }
   d6dc8:	b007      	add	sp, #28
   d6dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6dcc:	000d6a13 	.word	0x000d6a13
   d6dd0:	000d6ce1 	.word	0x000d6ce1
   d6dd4:	000d7149 	.word	0x000d7149

000d6dd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6dd8:	b530      	push	{r4, r5, lr}
   d6dda:	b085      	sub	sp, #20
   d6ddc:	4604      	mov	r4, r0
   d6dde:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6de0:	4668      	mov	r0, sp
   d6de2:	4611      	mov	r1, r2
   d6de4:	f7ff fdc9 	bl	d697a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6de8:	b17c      	cbz	r4, d6e0a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6dea:	b224      	sxth	r4, r4
   d6dec:	4628      	mov	r0, r5
   d6dee:	b10d      	cbz	r5, d6df4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6df0:	f000 fe70 	bl	d7ad4 <strdup>
   d6df4:	9002      	str	r0, [sp, #8]
   d6df6:	a902      	add	r1, sp, #8
   d6df8:	4668      	mov	r0, sp
   d6dfa:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6dfe:	f7ff fe1f 	bl	d6a40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6e02:	a802      	add	r0, sp, #8
   d6e04:	f7ff fd7e 	bl	d6904 <_ZN8particle5ErrorD1Ev>
   d6e08:	e01d      	b.n	d6e46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6e0a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6e0c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6e10:	f04f 0201 	mov.w	r2, #1
   d6e14:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6e18:	42a3      	cmp	r3, r4
   d6e1a:	d103      	bne.n	d6e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6e1c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6e20:	2900      	cmp	r1, #0
   d6e22:	d1f7      	bne.n	d6e14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6e24:	d002      	beq.n	d6e2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6e26:	f88d 3008 	strb.w	r3, [sp, #8]
   d6e2a:	e00c      	b.n	d6e46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6e2c:	f110 010c 	adds.w	r1, r0, #12
   d6e30:	f04f 0301 	mov.w	r3, #1
   d6e34:	bf18      	it	ne
   d6e36:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6e38:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6e3c:	3004      	adds	r0, #4
   d6e3e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6e42:	f7ff ff71 	bl	d6d28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6e46:	a801      	add	r0, sp, #4
   d6e48:	f7ff fbf0 	bl	d662c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6e4c:	b005      	add	sp, #20
   d6e4e:	bd30      	pop	{r4, r5, pc}

000d6e50 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6e50:	4770      	bx	lr

000d6e52 <_ZN9IPAddressD0Ev>:
   d6e52:	b510      	push	{r4, lr}
   d6e54:	2118      	movs	r1, #24
   d6e56:	4604      	mov	r4, r0
   d6e58:	f000 fc94 	bl	d7784 <_ZdlPvj>
   d6e5c:	4620      	mov	r0, r4
   d6e5e:	bd10      	pop	{r4, pc}

000d6e60 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e62:	7d03      	ldrb	r3, [r0, #20]
   d6e64:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e66:	b08d      	sub	sp, #52	; 0x34
   d6e68:	460e      	mov	r6, r1
   d6e6a:	f100 0704 	add.w	r7, r0, #4
   d6e6e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e72:	d002      	beq.n	d6e7a <_ZNK9IPAddress7printToER5Print+0x1a>
   d6e74:	f100 0508 	add.w	r5, r0, #8
   d6e78:	e018      	b.n	d6eac <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e7a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e7c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6e7e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6e82:	232f      	movs	r3, #47	; 0x2f
   d6e84:	462a      	mov	r2, r5
   d6e86:	200a      	movs	r0, #10
   d6e88:	f7ff f860 	bl	d5f4c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e8c:	4628      	mov	r0, r5
   d6e8e:	f000 fe3c 	bl	d7b0a <strlen>
   d6e92:	6833      	ldr	r3, [r6, #0]
   d6e94:	4602      	mov	r2, r0
   d6e96:	68db      	ldr	r3, [r3, #12]
   d6e98:	4629      	mov	r1, r5
   d6e9a:	4630      	mov	r0, r6
   d6e9c:	4798      	blx	r3
   d6e9e:	e00f      	b.n	d6ec0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6ea0:	b124      	cbz	r4, d6eac <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6ea2:	212e      	movs	r1, #46	; 0x2e
   d6ea4:	4630      	mov	r0, r6
   d6ea6:	f7ff fc0b 	bl	d66c0 <_ZN5Print5printEc>
   d6eaa:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6eac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6eb0:	220a      	movs	r2, #10
   d6eb2:	4630      	mov	r0, r6
   d6eb4:	f7ff fc1d 	bl	d66f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6eb8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6eba:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6ebc:	d1f0      	bne.n	d6ea0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6ebe:	4620      	mov	r0, r4
    }
    return n;
}
   d6ec0:	b00d      	add	sp, #52	; 0x34
   d6ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6ec4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6ec4:	b510      	push	{r4, lr}
   d6ec6:	4b05      	ldr	r3, [pc, #20]	; (d6edc <_ZN9IPAddressC1Ev+0x18>)
   d6ec8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6eca:	2211      	movs	r2, #17
   d6ecc:	f840 3b04 	str.w	r3, [r0], #4
   d6ed0:	2100      	movs	r1, #0
   d6ed2:	f000 fdce 	bl	d7a72 <memset>
{
    clear();
}
   d6ed6:	4620      	mov	r0, r4
   d6ed8:	bd10      	pop	{r4, pc}
   d6eda:	bf00      	nop
   d6edc:	000d8578 	.word	0x000d8578

000d6ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6ee0:	4603      	mov	r3, r0
   d6ee2:	4a07      	ldr	r2, [pc, #28]	; (d6f00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6ee4:	b510      	push	{r4, lr}
   d6ee6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6eea:	f101 0210 	add.w	r2, r1, #16
   d6eee:	f851 4b04 	ldr.w	r4, [r1], #4
   d6ef2:	f843 4b04 	str.w	r4, [r3], #4
   d6ef6:	4291      	cmp	r1, r2
   d6ef8:	d1f9      	bne.n	d6eee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6efa:	780a      	ldrb	r2, [r1, #0]
   d6efc:	701a      	strb	r2, [r3, #0]
}
   d6efe:	bd10      	pop	{r4, pc}
   d6f00:	000d8578 	.word	0x000d8578

000d6f04 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6f04:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6f06:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6f0a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6f0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6f12:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6f16:	2304      	movs	r3, #4
   d6f18:	6041      	str	r1, [r0, #4]
   d6f1a:	7503      	strb	r3, [r0, #20]
   d6f1c:	bd10      	pop	{r4, pc}

000d6f1e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6f1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6f20:	780d      	ldrb	r5, [r1, #0]
   d6f22:	788b      	ldrb	r3, [r1, #2]
   d6f24:	784a      	ldrb	r2, [r1, #1]
   d6f26:	78c9      	ldrb	r1, [r1, #3]
   d6f28:	9100      	str	r1, [sp, #0]
   d6f2a:	4629      	mov	r1, r5
   d6f2c:	f7ff ffea 	bl	d6f04 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6f30:	b003      	add	sp, #12
   d6f32:	bd30      	pop	{r4, r5, pc}

000d6f34 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6f34:	7441      	strb	r1, [r0, #17]
   d6f36:	4770      	bx	lr

000d6f38 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6f38:	4770      	bx	lr

000d6f3a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6f3a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6f3c:	2100      	movs	r1, #0
   d6f3e:	7c00      	ldrb	r0, [r0, #16]
   d6f40:	f7ff f8c4 	bl	d60cc <HAL_USB_USART_Receive_Data>
}
   d6f44:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f48:	bf28      	it	cs
   d6f4a:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f4e:	bd08      	pop	{r3, pc}

000d6f50 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d6f50:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6f52:	2101      	movs	r1, #1
   d6f54:	7c00      	ldrb	r0, [r0, #16]
   d6f56:	f7ff f8b9 	bl	d60cc <HAL_USB_USART_Receive_Data>
}
   d6f5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d6f5e:	bf28      	it	cs
   d6f60:	f04f 30ff 	movcs.w	r0, #4294967295
   d6f64:	bd08      	pop	{r3, pc}

000d6f66 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d6f66:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6f68:	7c00      	ldrb	r0, [r0, #16]
   d6f6a:	f7ff f8a7 	bl	d60bc <HAL_USB_USART_Available_Data_For_Write>
}
   d6f6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f72:	bd08      	pop	{r3, pc}

000d6f74 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d6f74:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6f76:	7c00      	ldrb	r0, [r0, #16]
   d6f78:	f7ff f898 	bl	d60ac <HAL_USB_USART_Available_Data>
}
   d6f7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6f80:	bd08      	pop	{r3, pc}

000d6f82 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6f82:	7c00      	ldrb	r0, [r0, #16]
   d6f84:	f7ff b8b2 	b.w	d60ec <HAL_USB_USART_Flush_Data>

000d6f88 <_ZN9USBSerialD0Ev>:
   d6f88:	b510      	push	{r4, lr}
   d6f8a:	2114      	movs	r1, #20
   d6f8c:	4604      	mov	r4, r0
   d6f8e:	f000 fbf9 	bl	d7784 <_ZdlPvj>
   d6f92:	4620      	mov	r0, r4
   d6f94:	bd10      	pop	{r4, pc}

000d6f96 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f96:	b538      	push	{r3, r4, r5, lr}
   d6f98:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f9a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6f9c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6f9e:	f7ff f88d 	bl	d60bc <HAL_USB_USART_Available_Data_For_Write>
   d6fa2:	2800      	cmp	r0, #0
   d6fa4:	dc01      	bgt.n	d6faa <_ZN9USBSerial5writeEh+0x14>
   d6fa6:	7c60      	ldrb	r0, [r4, #17]
   d6fa8:	b128      	cbz	r0, d6fb6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6faa:	4629      	mov	r1, r5
   d6fac:	7c20      	ldrb	r0, [r4, #16]
   d6fae:	f7ff f895 	bl	d60dc <HAL_USB_USART_Send_Data>
   d6fb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d6fb6:	bd38      	pop	{r3, r4, r5, pc}

000d6fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6fb8:	b510      	push	{r4, lr}
   d6fba:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6fbc:	2300      	movs	r3, #0
   d6fbe:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6fc4:	60a3      	str	r3, [r4, #8]
   d6fc6:	4b05      	ldr	r3, [pc, #20]	; (d6fdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6fc8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6fca:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6fcc:	4608      	mov	r0, r1
{
  _serial = serial;
   d6fce:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6fd0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6fd2:	4611      	mov	r1, r2
   d6fd4:	f7ff f85a 	bl	d608c <HAL_USB_USART_Init>
}
   d6fd8:	4620      	mov	r0, r4
   d6fda:	bd10      	pop	{r4, pc}
   d6fdc:	000d858c 	.word	0x000d858c

000d6fe0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6fe0:	2200      	movs	r2, #0
   d6fe2:	7c00      	ldrb	r0, [r0, #16]
   d6fe4:	f7ff b85a 	b.w	d609c <HAL_USB_USART_Begin>

000d6fe8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fe8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6fea:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6fec:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6fee:	2100      	movs	r1, #0
   d6ff0:	f000 fd3f 	bl	d7a72 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	bd10      	pop	{r4, pc}

000d6ff8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6ff8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6ffa:	4d0e      	ldr	r5, [pc, #56]	; (d7034 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6ffc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6ffe:	a801      	add	r0, sp, #4
   d7000:	f7ff fff2 	bl	d6fe8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7004:	6829      	ldr	r1, [r5, #0]
   d7006:	f011 0401 	ands.w	r4, r1, #1
   d700a:	d110      	bne.n	d702e <_Z16_fetch_usbserialv+0x36>
   d700c:	4628      	mov	r0, r5
   d700e:	f7fd f853 	bl	d40b8 <__cxa_guard_acquire>
   d7012:	b160      	cbz	r0, d702e <_Z16_fetch_usbserialv+0x36>
   d7014:	aa01      	add	r2, sp, #4
   d7016:	4621      	mov	r1, r4
   d7018:	4807      	ldr	r0, [pc, #28]	; (d7038 <_Z16_fetch_usbserialv+0x40>)
   d701a:	f7ff ffcd 	bl	d6fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d701e:	4628      	mov	r0, r5
   d7020:	f7fd f84f 	bl	d40c2 <__cxa_guard_release>
   d7024:	4a05      	ldr	r2, [pc, #20]	; (d703c <_Z16_fetch_usbserialv+0x44>)
   d7026:	4906      	ldr	r1, [pc, #24]	; (d7040 <_Z16_fetch_usbserialv+0x48>)
   d7028:	4803      	ldr	r0, [pc, #12]	; (d7038 <_Z16_fetch_usbserialv+0x40>)
   d702a:	f000 fb9d 	bl	d7768 <__aeabi_atexit>
	return _usbserial;
}
   d702e:	4802      	ldr	r0, [pc, #8]	; (d7038 <_Z16_fetch_usbserialv+0x40>)
   d7030:	b007      	add	sp, #28
   d7032:	bd30      	pop	{r4, r5, pc}
   d7034:	2003e414 	.word	0x2003e414
   d7038:	2003e418 	.word	0x2003e418
   d703c:	2003e254 	.word	0x2003e254
   d7040:	000d6f39 	.word	0x000d6f39

000d7044 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7044:	4770      	bx	lr

000d7046 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7046:	7441      	strb	r1, [r0, #17]
   d7048:	4770      	bx	lr

000d704a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d704a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d704c:	7c00      	ldrb	r0, [r0, #16]
   d704e:	f7fe ffbd 	bl	d5fcc <HAL_USART_Available_Data_For_Write>
}
   d7052:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7056:	bd08      	pop	{r3, pc}

000d7058 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7058:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d705a:	7c00      	ldrb	r0, [r0, #16]
   d705c:	f7fe ff8e 	bl	d5f7c <HAL_USART_Available_Data>
}
   d7060:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7064:	bd08      	pop	{r3, pc}

000d7066 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7066:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7068:	7c00      	ldrb	r0, [r0, #16]
   d706a:	f7fe ff97 	bl	d5f9c <HAL_USART_Peek_Data>
}
   d706e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7072:	bf28      	it	cs
   d7074:	f04f 30ff 	movcs.w	r0, #4294967295
   d7078:	bd08      	pop	{r3, pc}

000d707a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d707a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d707c:	7c00      	ldrb	r0, [r0, #16]
   d707e:	f7fe ff85 	bl	d5f8c <HAL_USART_Read_Data>
}
   d7082:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7086:	bf28      	it	cs
   d7088:	f04f 30ff 	movcs.w	r0, #4294967295
   d708c:	bd08      	pop	{r3, pc}

000d708e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d708e:	7c00      	ldrb	r0, [r0, #16]
   d7090:	f7fe bf8c 	b.w	d5fac <HAL_USART_Flush_Data>

000d7094 <_ZN11USARTSerialD0Ev>:
   d7094:	b510      	push	{r4, lr}
   d7096:	2114      	movs	r1, #20
   d7098:	4604      	mov	r4, r0
   d709a:	f000 fb73 	bl	d7784 <_ZdlPvj>
   d709e:	4620      	mov	r0, r4
   d70a0:	bd10      	pop	{r4, pc}

000d70a2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d70a2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d70a4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d70a6:	4604      	mov	r4, r0
   d70a8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d70aa:	b925      	cbnz	r5, d70b6 <_ZN11USARTSerial5writeEh+0x14>
   d70ac:	7c00      	ldrb	r0, [r0, #16]
   d70ae:	f7fe ff8d 	bl	d5fcc <HAL_USART_Available_Data_For_Write>
   d70b2:	2800      	cmp	r0, #0
   d70b4:	dd05      	ble.n	d70c2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d70b6:	4631      	mov	r1, r6
   d70b8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d70ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d70be:	f7fe bf55 	b.w	d5f6c <HAL_USART_Write_Data>
  }
  return 0;
}
   d70c2:	4628      	mov	r0, r5
   d70c4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d70c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d70c8:	b510      	push	{r4, lr}
   d70ca:	4604      	mov	r4, r0
   d70cc:	4608      	mov	r0, r1
   d70ce:	4611      	mov	r1, r2
   d70d0:	2200      	movs	r2, #0
   d70d2:	6062      	str	r2, [r4, #4]
   d70d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d70d8:	60a2      	str	r2, [r4, #8]
   d70da:	4a05      	ldr	r2, [pc, #20]	; (d70f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d70dc:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d70de:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d70e0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d70e2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d70e4:	461a      	mov	r2, r3
   d70e6:	f7fe ff39 	bl	d5f5c <HAL_USART_Init>
}
   d70ea:	4620      	mov	r0, r4
   d70ec:	bd10      	pop	{r4, pc}
   d70ee:	bf00      	nop
   d70f0:	000d85bc 	.word	0x000d85bc

000d70f4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d70f4:	7c00      	ldrb	r0, [r0, #16]
   d70f6:	f7fe bf61 	b.w	d5fbc <HAL_USART_Is_Enabled>
	...

000d70fc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d70fc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d70fe:	4d0c      	ldr	r5, [pc, #48]	; (d7130 <_Z22__fetch_global_Serial1v+0x34>)
   d7100:	6829      	ldr	r1, [r5, #0]
   d7102:	f011 0401 	ands.w	r4, r1, #1
   d7106:	d111      	bne.n	d712c <_Z22__fetch_global_Serial1v+0x30>
   d7108:	4628      	mov	r0, r5
   d710a:	f7fc ffd5 	bl	d40b8 <__cxa_guard_acquire>
   d710e:	b168      	cbz	r0, d712c <_Z22__fetch_global_Serial1v+0x30>
   d7110:	4a08      	ldr	r2, [pc, #32]	; (d7134 <_Z22__fetch_global_Serial1v+0x38>)
   d7112:	4b09      	ldr	r3, [pc, #36]	; (d7138 <_Z22__fetch_global_Serial1v+0x3c>)
   d7114:	4809      	ldr	r0, [pc, #36]	; (d713c <_Z22__fetch_global_Serial1v+0x40>)
   d7116:	4621      	mov	r1, r4
   d7118:	f7ff ffd6 	bl	d70c8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d711c:	4628      	mov	r0, r5
   d711e:	f7fc ffd0 	bl	d40c2 <__cxa_guard_release>
   d7122:	4a07      	ldr	r2, [pc, #28]	; (d7140 <_Z22__fetch_global_Serial1v+0x44>)
   d7124:	4907      	ldr	r1, [pc, #28]	; (d7144 <_Z22__fetch_global_Serial1v+0x48>)
   d7126:	4805      	ldr	r0, [pc, #20]	; (d713c <_Z22__fetch_global_Serial1v+0x40>)
   d7128:	f000 fb1e 	bl	d7768 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d712c:	4803      	ldr	r0, [pc, #12]	; (d713c <_Z22__fetch_global_Serial1v+0x40>)
   d712e:	bd38      	pop	{r3, r4, r5, pc}
   d7130:	2003e4c4 	.word	0x2003e4c4
   d7134:	2003e4c8 	.word	0x2003e4c8
   d7138:	2003e440 	.word	0x2003e440
   d713c:	2003e42c 	.word	0x2003e42c
   d7140:	2003e254 	.word	0x2003e254
   d7144:	000d7045 	.word	0x000d7045

000d7148 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7148:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d714a:	6883      	ldr	r3, [r0, #8]
   d714c:	4604      	mov	r4, r0
   d714e:	b90b      	cbnz	r3, d7154 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7150:	f000 fb2b 	bl	d77aa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7154:	68c3      	ldr	r3, [r0, #12]
   d7156:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7158:	68a3      	ldr	r3, [r4, #8]
   d715a:	b11b      	cbz	r3, d7164 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d715c:	2203      	movs	r2, #3
   d715e:	4621      	mov	r1, r4
   d7160:	4620      	mov	r0, r4
   d7162:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7164:	4620      	mov	r0, r4
   d7166:	2110      	movs	r1, #16
}
   d7168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d716c:	f000 bb0a 	b.w	d7784 <_ZdlPvj>

000d7170 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7170:	4770      	bx	lr

000d7172 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7174:	4606      	mov	r6, r0
   d7176:	4615      	mov	r5, r2
   d7178:	460c      	mov	r4, r1
   d717a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d717c:	42bc      	cmp	r4, r7
   d717e:	d006      	beq.n	d718e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7180:	6833      	ldr	r3, [r6, #0]
   d7182:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7186:	689b      	ldr	r3, [r3, #8]
   d7188:	4630      	mov	r0, r6
   d718a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d718c:	e7f6      	b.n	d717c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d718e:	4628      	mov	r0, r5
   d7190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7192 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7192:	2200      	movs	r2, #0
   d7194:	7c00      	ldrb	r0, [r0, #16]
   d7196:	f7fe bf39 	b.w	d600c <HAL_I2C_Write_Data>

000d719a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d719a:	2100      	movs	r1, #0
   d719c:	7c00      	ldrb	r0, [r0, #16]
   d719e:	f7fe bf3d 	b.w	d601c <HAL_I2C_Available_Data>

000d71a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d71a2:	2100      	movs	r1, #0
   d71a4:	7c00      	ldrb	r0, [r0, #16]
   d71a6:	f7fe bf41 	b.w	d602c <HAL_I2C_Read_Data>

000d71aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d71aa:	2100      	movs	r1, #0
   d71ac:	7c00      	ldrb	r0, [r0, #16]
   d71ae:	f7fe bf45 	b.w	d603c <HAL_I2C_Peek_Data>

000d71b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d71b2:	2100      	movs	r1, #0
   d71b4:	7c00      	ldrb	r0, [r0, #16]
   d71b6:	f7fe bf49 	b.w	d604c <HAL_I2C_Flush_Data>

000d71ba <_ZN7TwoWireD0Ev>:
   d71ba:	b510      	push	{r4, lr}
   d71bc:	2114      	movs	r1, #20
   d71be:	4604      	mov	r4, r0
   d71c0:	f000 fae0 	bl	d7784 <_ZdlPvj>
   d71c4:	4620      	mov	r0, r4
   d71c6:	bd10      	pop	{r4, pc}

000d71c8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d71c8:	b510      	push	{r4, lr}
   d71ca:	4604      	mov	r4, r0
   d71cc:	2300      	movs	r3, #0
   d71ce:	6063      	str	r3, [r4, #4]
   d71d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d71d4:	60a3      	str	r3, [r4, #8]
   d71d6:	4b04      	ldr	r3, [pc, #16]	; (d71e8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d71d8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d71da:	4608      	mov	r0, r1
   d71dc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d71de:	4611      	mov	r1, r2
   d71e0:	f7fe ff44 	bl	d606c <HAL_I2C_Init>
}
   d71e4:	4620      	mov	r0, r4
   d71e6:	bd10      	pop	{r4, pc}
   d71e8:	000d85ec 	.word	0x000d85ec

000d71ec <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d71ec:	2300      	movs	r3, #0
   d71ee:	461a      	mov	r2, r3
   d71f0:	4619      	mov	r1, r3
   d71f2:	7c00      	ldrb	r0, [r0, #16]
   d71f4:	f7fe bef2 	b.w	d5fdc <HAL_I2C_Begin>

000d71f8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d71f8:	b570      	push	{r4, r5, r6, lr}
   d71fa:	460c      	mov	r4, r1
   d71fc:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d71fe:	2514      	movs	r5, #20
   d7200:	4606      	mov	r6, r0
   d7202:	462a      	mov	r2, r5
   d7204:	2100      	movs	r1, #0
   d7206:	a801      	add	r0, sp, #4
   d7208:	f000 fc33 	bl	d7a72 <memset>
   d720c:	7823      	ldrb	r3, [r4, #0]
   d720e:	f88d 3008 	strb.w	r3, [sp, #8]
   d7212:	6863      	ldr	r3, [r4, #4]
   d7214:	9303      	str	r3, [sp, #12]
   d7216:	68e3      	ldr	r3, [r4, #12]
   d7218:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d721a:	2200      	movs	r2, #0
   d721c:	7a23      	ldrb	r3, [r4, #8]
   d721e:	7c30      	ldrb	r0, [r6, #16]
   d7220:	f8ad 5004 	strh.w	r5, [sp, #4]
   d7224:	a901      	add	r1, sp, #4
   d7226:	9305      	str	r3, [sp, #20]
   d7228:	f7fe ff28 	bl	d607c <HAL_I2C_Request_Data_Ex>
}
   d722c:	b006      	add	sp, #24
   d722e:	bd70      	pop	{r4, r5, r6, pc}

000d7230 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d7230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7232:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7234:	f88d 1000 	strb.w	r1, [sp]
   d7238:	f04f 0164 	mov.w	r1, #100	; 0x64
   d723c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d723e:	bf18      	it	ne
   d7240:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7242:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d7244:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d7246:	f88d 3008 	strb.w	r3, [sp, #8]
   d724a:	f7ff ffd5 	bl	d71f8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d724e:	b005      	add	sp, #20
   d7250:	f85d fb04 	ldr.w	pc, [sp], #4

000d7254 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d7254:	2301      	movs	r3, #1
   d7256:	f7ff bfeb 	b.w	d7230 <_ZN7TwoWire11requestFromEhjh>

000d725a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d725a:	2200      	movs	r2, #0
   d725c:	7c00      	ldrb	r0, [r0, #16]
   d725e:	f7fe bec5 	b.w	d5fec <HAL_I2C_Begin_Transmission>

000d7262 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7262:	b2c9      	uxtb	r1, r1
   d7264:	f7ff bff9 	b.w	d725a <_ZN7TwoWire17beginTransmissionEh>

000d7268 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7268:	2200      	movs	r2, #0
   d726a:	7c00      	ldrb	r0, [r0, #16]
   d726c:	f7fe bec6 	b.w	d5ffc <HAL_I2C_End_Transmission>

000d7270 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7270:	2101      	movs	r1, #1
   d7272:	f7ff bff9 	b.w	d7268 <_ZN7TwoWire15endTransmissionEh>

000d7276 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7276:	2100      	movs	r1, #0
   d7278:	7c00      	ldrb	r0, [r0, #16]
   d727a:	f7fe beef 	b.w	d605c <HAL_I2C_Is_Enabled>

000d727e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d727e:	2200      	movs	r2, #0
   d7280:	4611      	mov	r1, r2
   d7282:	6840      	ldr	r0, [r0, #4]
   d7284:	f7fe bfae 	b.w	d61e4 <network_listening>

000d7288 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7288:	2200      	movs	r2, #0
   d728a:	4611      	mov	r1, r2
   d728c:	6840      	ldr	r0, [r0, #4]
   d728e:	f7fe bfb9 	b.w	d6204 <network_get_listen_timeout>

000d7292 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7292:	2200      	movs	r2, #0
   d7294:	6840      	ldr	r0, [r0, #4]
   d7296:	f7fe bfad 	b.w	d61f4 <network_set_listen_timeout>

000d729a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d729a:	2200      	movs	r2, #0
   d729c:	f081 0101 	eor.w	r1, r1, #1
   d72a0:	6840      	ldr	r0, [r0, #4]
   d72a2:	f7fe bf97 	b.w	d61d4 <network_listen>

000d72a6 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d72a6:	2300      	movs	r3, #0
   d72a8:	461a      	mov	r2, r3
   d72aa:	2101      	movs	r1, #1
   d72ac:	6840      	ldr	r0, [r0, #4]
   d72ae:	f7fe bf89 	b.w	d61c4 <network_off>

000d72b2 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d72b2:	2300      	movs	r3, #0
   d72b4:	461a      	mov	r2, r3
   d72b6:	4619      	mov	r1, r3
   d72b8:	6840      	ldr	r0, [r0, #4]
   d72ba:	f7fe bf7b 	b.w	d61b4 <network_on>

000d72be <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d72be:	2200      	movs	r2, #0
   d72c0:	4611      	mov	r1, r2
   d72c2:	6840      	ldr	r0, [r0, #4]
   d72c4:	f7fe bf6e 	b.w	d61a4 <network_ready>

000d72c8 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d72c8:	2200      	movs	r2, #0
   d72ca:	4611      	mov	r1, r2
   d72cc:	6840      	ldr	r0, [r0, #4]
   d72ce:	f7fe bf59 	b.w	d6184 <network_connecting>

000d72d2 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72d2:	2200      	movs	r2, #0
   d72d4:	2102      	movs	r1, #2
   d72d6:	6840      	ldr	r0, [r0, #4]
   d72d8:	f7fe bf5c 	b.w	d6194 <network_disconnect>

000d72dc <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d72dc:	2300      	movs	r3, #0
   d72de:	461a      	mov	r2, r3
   d72e0:	6840      	ldr	r0, [r0, #4]
   d72e2:	f7fe bf47 	b.w	d6174 <network_connect>

000d72e6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d72e6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72e8:	4605      	mov	r5, r0
   d72ea:	b188      	cbz	r0, d7310 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d72ec:	6804      	ldr	r4, [r0, #0]
   d72ee:	b14c      	cbz	r4, d7304 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d72f0:	68a3      	ldr	r3, [r4, #8]
   d72f2:	b11b      	cbz	r3, d72fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d72f4:	2203      	movs	r2, #3
   d72f6:	4621      	mov	r1, r4
   d72f8:	4620      	mov	r0, r4
   d72fa:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72fc:	2110      	movs	r1, #16
   d72fe:	4620      	mov	r0, r4
   d7300:	f000 fa40 	bl	d7784 <_ZdlPvj>
   d7304:	4628      	mov	r0, r5
   d7306:	2114      	movs	r1, #20
      }
   d7308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d730c:	f000 ba3a 	b.w	d7784 <_ZdlPvj>
   d7310:	bd38      	pop	{r3, r4, r5, pc}

000d7312 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7312:	b110      	cbz	r0, d731a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7314:	6803      	ldr	r3, [r0, #0]
   d7316:	685b      	ldr	r3, [r3, #4]
   d7318:	4718      	bx	r3
   d731a:	4770      	bx	lr

000d731c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d731c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d731e:	6803      	ldr	r3, [r0, #0]
   d7320:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7322:	b1bb      	cbz	r3, d7354 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7324:	6858      	ldr	r0, [r3, #4]
   d7326:	f7fe fde9 	bl	d5efc <os_thread_is_current>
   d732a:	b978      	cbnz	r0, d734c <_ZN6ThreadD1Ev+0x30>
   d732c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d732e:	7c5a      	ldrb	r2, [r3, #17]
   d7330:	b912      	cbnz	r2, d7338 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7332:	6858      	ldr	r0, [r3, #4]
   d7334:	f7fe fdea 	bl	d5f0c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7338:	6823      	ldr	r3, [r4, #0]
   d733a:	6858      	ldr	r0, [r3, #4]
   d733c:	f7fe fdee 	bl	d5f1c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7340:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7342:	2300      	movs	r3, #0
   d7344:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7346:	b128      	cbz	r0, d7354 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7348:	f7ff ffcd 	bl	d72e6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d734c:	6820      	ldr	r0, [r4, #0]
   d734e:	b108      	cbz	r0, d7354 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7350:	f7ff ffc9 	bl	d72e6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7354:	4620      	mov	r0, r4
   d7356:	bd10      	pop	{r4, pc}

000d7358 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7358:	b538      	push	{r3, r4, r5, lr}
   d735a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d735c:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7360:	b108      	cbz	r0, d7366 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7362:	f7fc fe9c 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7366:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d736a:	b108      	cbz	r0, d7370 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d736c:	f7fe fde6 	bl	d5f3c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7370:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7374:	b135      	cbz	r5, d7384 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7376:	4628      	mov	r0, r5
   d7378:	f7ff ffd0 	bl	d731c <_ZN6ThreadD1Ev>
   d737c:	2104      	movs	r1, #4
   d737e:	4628      	mov	r0, r5
   d7380:	f000 fa00 	bl	d7784 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7384:	6820      	ldr	r0, [r4, #0]
   d7386:	b108      	cbz	r0, d738c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7388:	f7ff ffc3 	bl	d7312 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d738c:	4620      	mov	r0, r4
   d738e:	bd38      	pop	{r3, r4, r5, pc}

000d7390 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7390:	b510      	push	{r4, lr}
   d7392:	4b04      	ldr	r3, [pc, #16]	; (d73a4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7394:	4604      	mov	r4, r0
   d7396:	f840 3b08 	str.w	r3, [r0], #8
   d739a:	f7ff ffdd 	bl	d7358 <_ZN5spark11MeshPublishD1Ev>
   d739e:	4620      	mov	r0, r4
   d73a0:	bd10      	pop	{r4, pc}
   d73a2:	bf00      	nop
   d73a4:	000d8614 	.word	0x000d8614

000d73a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d73a8:	b538      	push	{r3, r4, r5, lr}
   d73aa:	4c0e      	ldr	r4, [pc, #56]	; (d73e4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d73ac:	4b0e      	ldr	r3, [pc, #56]	; (d73e8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d73ae:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d73b0:	2500      	movs	r5, #0
   d73b2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d73b4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d73b8:	6063      	str	r3, [r4, #4]
   d73ba:	60a5      	str	r5, [r4, #8]
   d73bc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d73c0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d73c4:	f7fe fdb2 	bl	d5f2c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d73c8:	4b08      	ldr	r3, [pc, #32]	; (d73ec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d73ca:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d73ce:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d73d2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d73d4:	4620      	mov	r0, r4
   d73d6:	4a06      	ldr	r2, [pc, #24]	; (d73f0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d73d8:	4906      	ldr	r1, [pc, #24]	; (d73f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d73da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d73de:	f000 b9c3 	b.w	d7768 <__aeabi_atexit>
   d73e2:	bf00      	nop
   d73e4:	2003e54c 	.word	0x2003e54c
   d73e8:	000d867c 	.word	0x000d867c
   d73ec:	000d8614 	.word	0x000d8614
   d73f0:	2003e254 	.word	0x2003e254
   d73f4:	000d7391 	.word	0x000d7391

000d73f8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d73f8:	2200      	movs	r2, #0
   d73fa:	4611      	mov	r1, r2
   d73fc:	6840      	ldr	r0, [r0, #4]
   d73fe:	f7fe bed1 	b.w	d61a4 <network_ready>

000d7402 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7402:	2200      	movs	r2, #0
   d7404:	4611      	mov	r1, r2
   d7406:	6840      	ldr	r0, [r0, #4]
   d7408:	f7fe beec 	b.w	d61e4 <network_listening>

000d740c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d740c:	2200      	movs	r2, #0
   d740e:	4611      	mov	r1, r2
   d7410:	6840      	ldr	r0, [r0, #4]
   d7412:	f7fe bef7 	b.w	d6204 <network_get_listen_timeout>

000d7416 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7416:	2200      	movs	r2, #0
   d7418:	6840      	ldr	r0, [r0, #4]
   d741a:	f7fe beeb 	b.w	d61f4 <network_set_listen_timeout>

000d741e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d741e:	2200      	movs	r2, #0
   d7420:	f081 0101 	eor.w	r1, r1, #1
   d7424:	6840      	ldr	r0, [r0, #4]
   d7426:	f7fe bed5 	b.w	d61d4 <network_listen>

000d742a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d742a:	2300      	movs	r3, #0
   d742c:	461a      	mov	r2, r3
   d742e:	4619      	mov	r1, r3
   d7430:	6840      	ldr	r0, [r0, #4]
   d7432:	f7fe bec7 	b.w	d61c4 <network_off>

000d7436 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7436:	2300      	movs	r3, #0
   d7438:	461a      	mov	r2, r3
   d743a:	4619      	mov	r1, r3
   d743c:	6840      	ldr	r0, [r0, #4]
   d743e:	f7fe beb9 	b.w	d61b4 <network_on>

000d7442 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7442:	2200      	movs	r2, #0
   d7444:	4611      	mov	r1, r2
   d7446:	6840      	ldr	r0, [r0, #4]
   d7448:	f7fe be9c 	b.w	d6184 <network_connecting>

000d744c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d744c:	2200      	movs	r2, #0
   d744e:	2102      	movs	r1, #2
   d7450:	6840      	ldr	r0, [r0, #4]
   d7452:	f7fe be9f 	b.w	d6194 <network_disconnect>

000d7456 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7456:	2300      	movs	r3, #0
   d7458:	461a      	mov	r2, r3
   d745a:	6840      	ldr	r0, [r0, #4]
   d745c:	f7fe be8a 	b.w	d6174 <network_connect>

000d7460 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7460:	4b02      	ldr	r3, [pc, #8]	; (d746c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7462:	2204      	movs	r2, #4
   d7464:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7466:	4a02      	ldr	r2, [pc, #8]	; (d7470 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7468:	601a      	str	r2, [r3, #0]
   d746a:	4770      	bx	lr
   d746c:	2003e720 	.word	0x2003e720
   d7470:	000d8648 	.word	0x000d8648

000d7474 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7474:	2300      	movs	r3, #0
   d7476:	461a      	mov	r2, r3
   d7478:	6840      	ldr	r0, [r0, #4]
   d747a:	f7fe be7b 	b.w	d6174 <network_connect>

000d747e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d747e:	2200      	movs	r2, #0
   d7480:	2102      	movs	r1, #2
   d7482:	6840      	ldr	r0, [r0, #4]
   d7484:	f7fe be86 	b.w	d6194 <network_disconnect>

000d7488 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7488:	2200      	movs	r2, #0
   d748a:	4611      	mov	r1, r2
   d748c:	6840      	ldr	r0, [r0, #4]
   d748e:	f7fe be79 	b.w	d6184 <network_connecting>

000d7492 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7492:	2200      	movs	r2, #0
   d7494:	4611      	mov	r1, r2
   d7496:	6840      	ldr	r0, [r0, #4]
   d7498:	f7fe be84 	b.w	d61a4 <network_ready>

000d749c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d749c:	2300      	movs	r3, #0
   d749e:	461a      	mov	r2, r3
   d74a0:	4619      	mov	r1, r3
   d74a2:	6840      	ldr	r0, [r0, #4]
   d74a4:	f7fe be86 	b.w	d61b4 <network_on>

000d74a8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d74a8:	2300      	movs	r3, #0
   d74aa:	461a      	mov	r2, r3
   d74ac:	4619      	mov	r1, r3
   d74ae:	6840      	ldr	r0, [r0, #4]
   d74b0:	f7fe be88 	b.w	d61c4 <network_off>

000d74b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d74b4:	2200      	movs	r2, #0
   d74b6:	f081 0101 	eor.w	r1, r1, #1
   d74ba:	6840      	ldr	r0, [r0, #4]
   d74bc:	f7fe be8a 	b.w	d61d4 <network_listen>

000d74c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d74c0:	2200      	movs	r2, #0
   d74c2:	6840      	ldr	r0, [r0, #4]
   d74c4:	f7fe be96 	b.w	d61f4 <network_set_listen_timeout>

000d74c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d74c8:	2200      	movs	r2, #0
   d74ca:	4611      	mov	r1, r2
   d74cc:	6840      	ldr	r0, [r0, #4]
   d74ce:	f7fe be99 	b.w	d6204 <network_get_listen_timeout>

000d74d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d74d2:	2200      	movs	r2, #0
   d74d4:	4611      	mov	r1, r2
   d74d6:	6840      	ldr	r0, [r0, #4]
   d74d8:	f7fe be84 	b.w	d61e4 <network_listening>

000d74dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d74dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d74e0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d74e2:	b095      	sub	sp, #84	; 0x54
   d74e4:	4616      	mov	r6, r2
   d74e6:	460d      	mov	r5, r1
   d74e8:	4607      	mov	r7, r0
    IPAddress addr;
   d74ea:	f7ff fceb 	bl	d6ec4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d74ee:	4621      	mov	r1, r4
   d74f0:	2220      	movs	r2, #32
   d74f2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d74f4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d74f6:	f000 fabc 	bl	d7a72 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d74fa:	2340      	movs	r3, #64	; 0x40
   d74fc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d74fe:	4621      	mov	r1, r4
   d7500:	466b      	mov	r3, sp
   d7502:	aa0c      	add	r2, sp, #48	; 0x30
   d7504:	4630      	mov	r0, r6
   d7506:	f7fe fc61 	bl	d5dcc <netdb_getaddrinfo>
    if (!r) {
   d750a:	4604      	mov	r4, r0
   d750c:	2800      	cmp	r0, #0
   d750e:	d144      	bne.n	d759a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7510:	4602      	mov	r2, r0
   d7512:	2101      	movs	r1, #1
   d7514:	6868      	ldr	r0, [r5, #4]
   d7516:	f7fe fe45 	bl	d61a4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d751a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d751c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d751e:	4622      	mov	r2, r4
   d7520:	6868      	ldr	r0, [r5, #4]
   d7522:	f7fe fe3f 	bl	d61a4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7526:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7528:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d752a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d752c:	2e00      	cmp	r6, #0
   d752e:	d034      	beq.n	d759a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7530:	2900      	cmp	r1, #0
   d7532:	d132      	bne.n	d759a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7534:	6873      	ldr	r3, [r6, #4]
   d7536:	2b02      	cmp	r3, #2
   d7538:	d002      	beq.n	d7540 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d753a:	2b0a      	cmp	r3, #10
   d753c:	d009      	beq.n	d7552 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d753e:	e02a      	b.n	d7596 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7540:	f1b8 0f00 	cmp.w	r8, #0
   d7544:	d027      	beq.n	d7596 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7546:	6971      	ldr	r1, [r6, #20]
   d7548:	4638      	mov	r0, r7
   d754a:	3104      	adds	r1, #4
   d754c:	f7ff fce7 	bl	d6f1e <_ZN9IPAddressaSEPKh>
   d7550:	e020      	b.n	d7594 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7552:	f1b9 0f00 	cmp.w	r9, #0
   d7556:	d01e      	beq.n	d7596 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7558:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d755a:	2211      	movs	r2, #17
   d755c:	a801      	add	r0, sp, #4
   d755e:	f000 fa88 	bl	d7a72 <memset>
                    a.v = 6;
   d7562:	2306      	movs	r3, #6
   d7564:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7568:	ad01      	add	r5, sp, #4
   d756a:	f104 0308 	add.w	r3, r4, #8
   d756e:	3418      	adds	r4, #24
   d7570:	6818      	ldr	r0, [r3, #0]
   d7572:	6859      	ldr	r1, [r3, #4]
   d7574:	462a      	mov	r2, r5
   d7576:	c203      	stmia	r2!, {r0, r1}
   d7578:	3308      	adds	r3, #8
   d757a:	42a3      	cmp	r3, r4
   d757c:	4615      	mov	r5, r2
   d757e:	d1f7      	bne.n	d7570 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7580:	a901      	add	r1, sp, #4
   d7582:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7584:	ad07      	add	r5, sp, #28
   d7586:	f7ff fcab 	bl	d6ee0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d758a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d758c:	1d3c      	adds	r4, r7, #4
   d758e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7590:	682b      	ldr	r3, [r5, #0]
   d7592:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7594:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7596:	69f6      	ldr	r6, [r6, #28]
   d7598:	e7c8      	b.n	d752c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d759a:	9800      	ldr	r0, [sp, #0]
   d759c:	f7fe fc0e 	bl	d5dbc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d75a0:	4638      	mov	r0, r7
   d75a2:	b015      	add	sp, #84	; 0x54
   d75a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d75a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d75a8:	4b02      	ldr	r3, [pc, #8]	; (d75b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d75aa:	4a03      	ldr	r2, [pc, #12]	; (d75b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d75ac:	601a      	str	r2, [r3, #0]
   d75ae:	2200      	movs	r2, #0
   d75b0:	605a      	str	r2, [r3, #4]
   d75b2:	4770      	bx	lr
   d75b4:	2003e728 	.word	0x2003e728
   d75b8:	000d867c 	.word	0x000d867c

000d75bc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d75bc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d75be:	4e18      	ldr	r6, [pc, #96]	; (d7620 <pinAvailable+0x64>)
   d75c0:	6831      	ldr	r1, [r6, #0]
   d75c2:	f011 0501 	ands.w	r5, r1, #1
   d75c6:	4604      	mov	r4, r0
   d75c8:	d10a      	bne.n	d75e0 <pinAvailable+0x24>
   d75ca:	4630      	mov	r0, r6
   d75cc:	f7fc fd74 	bl	d40b8 <__cxa_guard_acquire>
   d75d0:	b130      	cbz	r0, d75e0 <pinAvailable+0x24>
   d75d2:	4629      	mov	r1, r5
   d75d4:	4813      	ldr	r0, [pc, #76]	; (d7624 <pinAvailable+0x68>)
   d75d6:	f7fe fea9 	bl	d632c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d75da:	4630      	mov	r0, r6
   d75dc:	f7fc fd71 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d75e0:	4810      	ldr	r0, [pc, #64]	; (d7624 <pinAvailable+0x68>)
   d75e2:	f7fe ff53 	bl	d648c <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d75e6:	b128      	cbz	r0, d75f4 <pinAvailable+0x38>
   d75e8:	f1a4 030b 	sub.w	r3, r4, #11
   d75ec:	2b02      	cmp	r3, #2
   d75ee:	d801      	bhi.n	d75f4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d75f0:	2000      	movs	r0, #0
   d75f2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d75f4:	f000 f892 	bl	d771c <_Z19__fetch_global_Wirev>
   d75f8:	f7ff fe3d 	bl	d7276 <_ZN7TwoWire9isEnabledEv>
   d75fc:	b108      	cbz	r0, d7602 <pinAvailable+0x46>
   d75fe:	2c01      	cmp	r4, #1
   d7600:	d9f6      	bls.n	d75f0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d7602:	f7ff fd7b 	bl	d70fc <_Z22__fetch_global_Serial1v>
   d7606:	f7ff fd75 	bl	d70f4 <_ZN11USARTSerial9isEnabledEv>
   d760a:	b118      	cbz	r0, d7614 <pinAvailable+0x58>
   d760c:	f1a4 0309 	sub.w	r3, r4, #9
   d7610:	2b01      	cmp	r3, #1
   d7612:	d9ed      	bls.n	d75f0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d7614:	2c23      	cmp	r4, #35	; 0x23
   d7616:	bf8c      	ite	hi
   d7618:	2000      	movhi	r0, #0
   d761a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d761c:	bd70      	pop	{r4, r5, r6, pc}
   d761e:	bf00      	nop
   d7620:	2003e3d0 	.word	0x2003e3d0
   d7624:	2003e3d4 	.word	0x2003e3d4

000d7628 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7628:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d762a:	b538      	push	{r3, r4, r5, lr}
   d762c:	4604      	mov	r4, r0
   d762e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7630:	d80a      	bhi.n	d7648 <pinMode+0x20>
   d7632:	29ff      	cmp	r1, #255	; 0xff
   d7634:	d008      	beq.n	d7648 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7636:	f7ff ffc1 	bl	d75bc <pinAvailable>
   d763a:	b128      	cbz	r0, d7648 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d763c:	4629      	mov	r1, r5
   d763e:	4620      	mov	r0, r4
}
   d7640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7644:	f7fe bbd2 	b.w	d5dec <HAL_Pin_Mode>
   d7648:	bd38      	pop	{r3, r4, r5, pc}

000d764a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d764a:	b538      	push	{r3, r4, r5, lr}
   d764c:	4604      	mov	r4, r0
   d764e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7650:	f7fe fbd4 	bl	d5dfc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7654:	28ff      	cmp	r0, #255	; 0xff
   d7656:	d010      	beq.n	d767a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7658:	2806      	cmp	r0, #6
   d765a:	d804      	bhi.n	d7666 <digitalWrite+0x1c>
   d765c:	234d      	movs	r3, #77	; 0x4d
   d765e:	fa23 f000 	lsr.w	r0, r3, r0
   d7662:	07c3      	lsls	r3, r0, #31
   d7664:	d409      	bmi.n	d767a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7666:	4620      	mov	r0, r4
   d7668:	f7ff ffa8 	bl	d75bc <pinAvailable>
   d766c:	b128      	cbz	r0, d767a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d766e:	4629      	mov	r1, r5
   d7670:	4620      	mov	r0, r4
}
   d7672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7676:	f7fe bbc9 	b.w	d5e0c <HAL_GPIO_Write>
   d767a:	bd38      	pop	{r3, r4, r5, pc}

000d767c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d767c:	b510      	push	{r4, lr}
   d767e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7680:	f7fe fbbc 	bl	d5dfc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d7684:	3804      	subs	r0, #4
   d7686:	b2c0      	uxtb	r0, r0
   d7688:	2801      	cmp	r0, #1
   d768a:	d908      	bls.n	d769e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d768c:	4620      	mov	r0, r4
   d768e:	f7ff ff95 	bl	d75bc <pinAvailable>
   d7692:	b120      	cbz	r0, d769e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7694:	4620      	mov	r0, r4
}
   d7696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d769a:	f7fe bbbf 	b.w	d5e1c <HAL_GPIO_Read>
}
   d769e:	2000      	movs	r0, #0
   d76a0:	bd10      	pop	{r4, pc}

000d76a2 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d76a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76a6:	4690      	mov	r8, r2
   d76a8:	461e      	mov	r6, r3
   d76aa:	2407      	movs	r4, #7
   d76ac:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d76ae:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d76b0:	f1b8 0f00 	cmp.w	r8, #0
   d76b4:	d104      	bne.n	d76c0 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d76b6:	f1c4 0107 	rsb	r1, r4, #7
   d76ba:	fa46 f101 	asr.w	r1, r6, r1
   d76be:	e001      	b.n	d76c4 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d76c0:	fa46 f104 	asr.w	r1, r6, r4
   d76c4:	f001 0101 	and.w	r1, r1, #1
   d76c8:	4638      	mov	r0, r7
   d76ca:	f7ff ffbe 	bl	d764a <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d76ce:	2101      	movs	r1, #1
   d76d0:	4628      	mov	r0, r5
   d76d2:	f7ff ffba 	bl	d764a <digitalWrite>
    digitalWrite(clockPin, LOW);
   d76d6:	2100      	movs	r1, #0
   d76d8:	4628      	mov	r0, r5
   d76da:	f7ff ffb6 	bl	d764a <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d76de:	f114 34ff 	adds.w	r4, r4, #4294967295
   d76e2:	d2e5      	bcs.n	d76b0 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d76e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d76e8 <_Z17acquireWireBufferv>:
   d76e8:	b570      	push	{r4, r5, r6, lr}
   d76ea:	4604      	mov	r4, r0
   d76ec:	2514      	movs	r5, #20
   d76ee:	462a      	mov	r2, r5
   d76f0:	4e09      	ldr	r6, [pc, #36]	; (d7718 <_Z17acquireWireBufferv+0x30>)
   d76f2:	2100      	movs	r1, #0
   d76f4:	f000 f9bd 	bl	d7a72 <memset>
   d76f8:	8025      	strh	r5, [r4, #0]
   d76fa:	2520      	movs	r5, #32
   d76fc:	4631      	mov	r1, r6
   d76fe:	60a5      	str	r5, [r4, #8]
   d7700:	6125      	str	r5, [r4, #16]
   d7702:	4628      	mov	r0, r5
   d7704:	f000 f840 	bl	d7788 <_ZnajRKSt9nothrow_t>
   d7708:	4631      	mov	r1, r6
   d770a:	6060      	str	r0, [r4, #4]
   d770c:	4628      	mov	r0, r5
   d770e:	f000 f83b 	bl	d7788 <_ZnajRKSt9nothrow_t>
   d7712:	60e0      	str	r0, [r4, #12]
   d7714:	4620      	mov	r0, r4
   d7716:	bd70      	pop	{r4, r5, r6, pc}
   d7718:	000d86a8 	.word	0x000d86a8

000d771c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d771c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d771e:	4d0e      	ldr	r5, [pc, #56]	; (d7758 <_Z19__fetch_global_Wirev+0x3c>)
   d7720:	6829      	ldr	r1, [r5, #0]
   d7722:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7726:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7728:	d113      	bne.n	d7752 <_Z19__fetch_global_Wirev+0x36>
   d772a:	4628      	mov	r0, r5
   d772c:	f7fc fcc4 	bl	d40b8 <__cxa_guard_acquire>
   d7730:	b178      	cbz	r0, d7752 <_Z19__fetch_global_Wirev+0x36>
   d7732:	a801      	add	r0, sp, #4
   d7734:	f7ff ffd8 	bl	d76e8 <_Z17acquireWireBufferv>
   d7738:	aa01      	add	r2, sp, #4
   d773a:	4621      	mov	r1, r4
   d773c:	4807      	ldr	r0, [pc, #28]	; (d775c <_Z19__fetch_global_Wirev+0x40>)
   d773e:	f7ff fd43 	bl	d71c8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7742:	4628      	mov	r0, r5
   d7744:	f7fc fcbd 	bl	d40c2 <__cxa_guard_release>
   d7748:	4a05      	ldr	r2, [pc, #20]	; (d7760 <_Z19__fetch_global_Wirev+0x44>)
   d774a:	4906      	ldr	r1, [pc, #24]	; (d7764 <_Z19__fetch_global_Wirev+0x48>)
   d774c:	4803      	ldr	r0, [pc, #12]	; (d775c <_Z19__fetch_global_Wirev+0x40>)
   d774e:	f000 f80b 	bl	d7768 <__aeabi_atexit>
	return wire;
}
   d7752:	4802      	ldr	r0, [pc, #8]	; (d775c <_Z19__fetch_global_Wirev+0x40>)
   d7754:	b007      	add	sp, #28
   d7756:	bd30      	pop	{r4, r5, pc}
   d7758:	2003e734 	.word	0x2003e734
   d775c:	2003e738 	.word	0x2003e738
   d7760:	2003e254 	.word	0x2003e254
   d7764:	000d7171 	.word	0x000d7171

000d7768 <__aeabi_atexit>:
   d7768:	460b      	mov	r3, r1
   d776a:	4601      	mov	r1, r0
   d776c:	4618      	mov	r0, r3
   d776e:	f000 b967 	b.w	d7a40 <__cxa_atexit>
	...

000d7774 <_ZSt15get_new_handlerv>:
   d7774:	4b02      	ldr	r3, [pc, #8]	; (d7780 <_ZSt15get_new_handlerv+0xc>)
   d7776:	6818      	ldr	r0, [r3, #0]
   d7778:	f3bf 8f5f 	dmb	sy
   d777c:	4770      	bx	lr
   d777e:	bf00      	nop
   d7780:	2003e74c 	.word	0x2003e74c

000d7784 <_ZdlPvj>:
   d7784:	f7fc bc89 	b.w	d409a <_ZdlPv>

000d7788 <_ZnajRKSt9nothrow_t>:
   d7788:	f000 b800 	b.w	d778c <_ZnwjRKSt9nothrow_t>

000d778c <_ZnwjRKSt9nothrow_t>:
   d778c:	b510      	push	{r4, lr}
   d778e:	2800      	cmp	r0, #0
   d7790:	bf14      	ite	ne
   d7792:	4604      	movne	r4, r0
   d7794:	2401      	moveq	r4, #1
   d7796:	4620      	mov	r0, r4
   d7798:	f7fe fd54 	bl	d6244 <malloc>
   d779c:	b920      	cbnz	r0, d77a8 <_ZnwjRKSt9nothrow_t+0x1c>
   d779e:	f7ff ffe9 	bl	d7774 <_ZSt15get_new_handlerv>
   d77a2:	b108      	cbz	r0, d77a8 <_ZnwjRKSt9nothrow_t+0x1c>
   d77a4:	4780      	blx	r0
   d77a6:	e7f6      	b.n	d7796 <_ZnwjRKSt9nothrow_t+0xa>
   d77a8:	bd10      	pop	{r4, pc}

000d77aa <_ZSt25__throw_bad_function_callv>:
   d77aa:	b508      	push	{r3, lr}
   d77ac:	f7fe fd6a 	bl	d6284 <abort>

000d77b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d77b0:	4b18      	ldr	r3, [pc, #96]	; (d7814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d77b2:	681a      	ldr	r2, [r3, #0]
   d77b4:	07d1      	lsls	r1, r2, #31
   d77b6:	bf5c      	itt	pl
   d77b8:	2201      	movpl	r2, #1
   d77ba:	601a      	strpl	r2, [r3, #0]
   d77bc:	4b16      	ldr	r3, [pc, #88]	; (d7818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d77be:	681a      	ldr	r2, [r3, #0]
   d77c0:	07d2      	lsls	r2, r2, #31
   d77c2:	bf5c      	itt	pl
   d77c4:	2201      	movpl	r2, #1
   d77c6:	601a      	strpl	r2, [r3, #0]
   d77c8:	4b14      	ldr	r3, [pc, #80]	; (d781c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d77ca:	681a      	ldr	r2, [r3, #0]
   d77cc:	07d0      	lsls	r0, r2, #31
   d77ce:	bf5c      	itt	pl
   d77d0:	2201      	movpl	r2, #1
   d77d2:	601a      	strpl	r2, [r3, #0]
   d77d4:	4b12      	ldr	r3, [pc, #72]	; (d7820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d77d6:	681a      	ldr	r2, [r3, #0]
   d77d8:	07d1      	lsls	r1, r2, #31
   d77da:	bf5c      	itt	pl
   d77dc:	2201      	movpl	r2, #1
   d77de:	601a      	strpl	r2, [r3, #0]
   d77e0:	4b10      	ldr	r3, [pc, #64]	; (d7824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d77e2:	681a      	ldr	r2, [r3, #0]
   d77e4:	07d2      	lsls	r2, r2, #31
   d77e6:	bf5c      	itt	pl
   d77e8:	2201      	movpl	r2, #1
   d77ea:	601a      	strpl	r2, [r3, #0]
   d77ec:	4b0e      	ldr	r3, [pc, #56]	; (d7828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d77ee:	681a      	ldr	r2, [r3, #0]
   d77f0:	07d0      	lsls	r0, r2, #31
   d77f2:	bf5c      	itt	pl
   d77f4:	2201      	movpl	r2, #1
   d77f6:	601a      	strpl	r2, [r3, #0]
   d77f8:	4b0c      	ldr	r3, [pc, #48]	; (d782c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d77fa:	681a      	ldr	r2, [r3, #0]
   d77fc:	07d1      	lsls	r1, r2, #31
   d77fe:	bf5c      	itt	pl
   d7800:	2201      	movpl	r2, #1
   d7802:	601a      	strpl	r2, [r3, #0]
   d7804:	4b0a      	ldr	r3, [pc, #40]	; (d7830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7806:	681a      	ldr	r2, [r3, #0]
   d7808:	07d2      	lsls	r2, r2, #31
   d780a:	bf5c      	itt	pl
   d780c:	2201      	movpl	r2, #1
   d780e:	601a      	strpl	r2, [r3, #0]
   d7810:	4770      	bx	lr
   d7812:	bf00      	nop
   d7814:	2003e76c 	.word	0x2003e76c
   d7818:	2003e768 	.word	0x2003e768
   d781c:	2003e764 	.word	0x2003e764
   d7820:	2003e760 	.word	0x2003e760
   d7824:	2003e75c 	.word	0x2003e75c
   d7828:	2003e758 	.word	0x2003e758
   d782c:	2003e754 	.word	0x2003e754
   d7830:	2003e750 	.word	0x2003e750

000d7834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7834:	4b24      	ldr	r3, [pc, #144]	; (d78c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7836:	681a      	ldr	r2, [r3, #0]
   d7838:	07d0      	lsls	r0, r2, #31
   d783a:	bf5c      	itt	pl
   d783c:	2201      	movpl	r2, #1
   d783e:	601a      	strpl	r2, [r3, #0]
   d7840:	4b22      	ldr	r3, [pc, #136]	; (d78cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7842:	681a      	ldr	r2, [r3, #0]
   d7844:	07d1      	lsls	r1, r2, #31
   d7846:	bf5c      	itt	pl
   d7848:	2201      	movpl	r2, #1
   d784a:	601a      	strpl	r2, [r3, #0]
   d784c:	4b20      	ldr	r3, [pc, #128]	; (d78d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d784e:	681a      	ldr	r2, [r3, #0]
   d7850:	07d2      	lsls	r2, r2, #31
   d7852:	bf5c      	itt	pl
   d7854:	2201      	movpl	r2, #1
   d7856:	601a      	strpl	r2, [r3, #0]
   d7858:	4b1e      	ldr	r3, [pc, #120]	; (d78d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d785a:	681a      	ldr	r2, [r3, #0]
   d785c:	07d0      	lsls	r0, r2, #31
   d785e:	bf5c      	itt	pl
   d7860:	2201      	movpl	r2, #1
   d7862:	601a      	strpl	r2, [r3, #0]
   d7864:	4b1c      	ldr	r3, [pc, #112]	; (d78d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7866:	681a      	ldr	r2, [r3, #0]
   d7868:	07d1      	lsls	r1, r2, #31
   d786a:	bf5c      	itt	pl
   d786c:	2201      	movpl	r2, #1
   d786e:	601a      	strpl	r2, [r3, #0]
   d7870:	4b1a      	ldr	r3, [pc, #104]	; (d78dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7872:	681a      	ldr	r2, [r3, #0]
   d7874:	07d2      	lsls	r2, r2, #31
   d7876:	bf5c      	itt	pl
   d7878:	2201      	movpl	r2, #1
   d787a:	601a      	strpl	r2, [r3, #0]
   d787c:	4b18      	ldr	r3, [pc, #96]	; (d78e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d787e:	681a      	ldr	r2, [r3, #0]
   d7880:	07d0      	lsls	r0, r2, #31
   d7882:	bf5c      	itt	pl
   d7884:	2201      	movpl	r2, #1
   d7886:	601a      	strpl	r2, [r3, #0]
   d7888:	4b16      	ldr	r3, [pc, #88]	; (d78e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d788a:	681a      	ldr	r2, [r3, #0]
   d788c:	07d1      	lsls	r1, r2, #31
   d788e:	bf5c      	itt	pl
   d7890:	2201      	movpl	r2, #1
   d7892:	601a      	strpl	r2, [r3, #0]
   d7894:	4b14      	ldr	r3, [pc, #80]	; (d78e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7896:	681a      	ldr	r2, [r3, #0]
   d7898:	07d2      	lsls	r2, r2, #31
   d789a:	bf5c      	itt	pl
   d789c:	2201      	movpl	r2, #1
   d789e:	601a      	strpl	r2, [r3, #0]
   d78a0:	4b12      	ldr	r3, [pc, #72]	; (d78ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d78a2:	681a      	ldr	r2, [r3, #0]
   d78a4:	07d0      	lsls	r0, r2, #31
   d78a6:	bf5c      	itt	pl
   d78a8:	2201      	movpl	r2, #1
   d78aa:	601a      	strpl	r2, [r3, #0]
   d78ac:	4b10      	ldr	r3, [pc, #64]	; (d78f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d78ae:	681a      	ldr	r2, [r3, #0]
   d78b0:	07d1      	lsls	r1, r2, #31
   d78b2:	bf5c      	itt	pl
   d78b4:	2201      	movpl	r2, #1
   d78b6:	601a      	strpl	r2, [r3, #0]
   d78b8:	4b0e      	ldr	r3, [pc, #56]	; (d78f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d78ba:	681a      	ldr	r2, [r3, #0]
   d78bc:	07d2      	lsls	r2, r2, #31
   d78be:	bf5c      	itt	pl
   d78c0:	2201      	movpl	r2, #1
   d78c2:	601a      	strpl	r2, [r3, #0]
   d78c4:	4770      	bx	lr
   d78c6:	bf00      	nop
   d78c8:	2003e79c 	.word	0x2003e79c
   d78cc:	2003e798 	.word	0x2003e798
   d78d0:	2003e794 	.word	0x2003e794
   d78d4:	2003e790 	.word	0x2003e790
   d78d8:	2003e78c 	.word	0x2003e78c
   d78dc:	2003e788 	.word	0x2003e788
   d78e0:	2003e784 	.word	0x2003e784
   d78e4:	2003e780 	.word	0x2003e780
   d78e8:	2003e77c 	.word	0x2003e77c
   d78ec:	2003e778 	.word	0x2003e778
   d78f0:	2003e774 	.word	0x2003e774
   d78f4:	2003e770 	.word	0x2003e770

000d78f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d78f8:	4b24      	ldr	r3, [pc, #144]	; (d798c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d78fa:	681a      	ldr	r2, [r3, #0]
   d78fc:	07d0      	lsls	r0, r2, #31
   d78fe:	bf5c      	itt	pl
   d7900:	2201      	movpl	r2, #1
   d7902:	601a      	strpl	r2, [r3, #0]
   d7904:	4b22      	ldr	r3, [pc, #136]	; (d7990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7906:	681a      	ldr	r2, [r3, #0]
   d7908:	07d1      	lsls	r1, r2, #31
   d790a:	bf5c      	itt	pl
   d790c:	2201      	movpl	r2, #1
   d790e:	601a      	strpl	r2, [r3, #0]
   d7910:	4b20      	ldr	r3, [pc, #128]	; (d7994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7912:	681a      	ldr	r2, [r3, #0]
   d7914:	07d2      	lsls	r2, r2, #31
   d7916:	bf5c      	itt	pl
   d7918:	2201      	movpl	r2, #1
   d791a:	601a      	strpl	r2, [r3, #0]
   d791c:	4b1e      	ldr	r3, [pc, #120]	; (d7998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d791e:	681a      	ldr	r2, [r3, #0]
   d7920:	07d0      	lsls	r0, r2, #31
   d7922:	bf5c      	itt	pl
   d7924:	2201      	movpl	r2, #1
   d7926:	601a      	strpl	r2, [r3, #0]
   d7928:	4b1c      	ldr	r3, [pc, #112]	; (d799c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d792a:	681a      	ldr	r2, [r3, #0]
   d792c:	07d1      	lsls	r1, r2, #31
   d792e:	bf5c      	itt	pl
   d7930:	2201      	movpl	r2, #1
   d7932:	601a      	strpl	r2, [r3, #0]
   d7934:	4b1a      	ldr	r3, [pc, #104]	; (d79a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7936:	681a      	ldr	r2, [r3, #0]
   d7938:	07d2      	lsls	r2, r2, #31
   d793a:	bf5c      	itt	pl
   d793c:	2201      	movpl	r2, #1
   d793e:	601a      	strpl	r2, [r3, #0]
   d7940:	4b18      	ldr	r3, [pc, #96]	; (d79a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7942:	681a      	ldr	r2, [r3, #0]
   d7944:	07d0      	lsls	r0, r2, #31
   d7946:	bf5c      	itt	pl
   d7948:	2201      	movpl	r2, #1
   d794a:	601a      	strpl	r2, [r3, #0]
   d794c:	4b16      	ldr	r3, [pc, #88]	; (d79a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d794e:	681a      	ldr	r2, [r3, #0]
   d7950:	07d1      	lsls	r1, r2, #31
   d7952:	bf5c      	itt	pl
   d7954:	2201      	movpl	r2, #1
   d7956:	601a      	strpl	r2, [r3, #0]
   d7958:	4b14      	ldr	r3, [pc, #80]	; (d79ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d795a:	681a      	ldr	r2, [r3, #0]
   d795c:	07d2      	lsls	r2, r2, #31
   d795e:	bf5c      	itt	pl
   d7960:	2201      	movpl	r2, #1
   d7962:	601a      	strpl	r2, [r3, #0]
   d7964:	4b12      	ldr	r3, [pc, #72]	; (d79b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7966:	681a      	ldr	r2, [r3, #0]
   d7968:	07d0      	lsls	r0, r2, #31
   d796a:	bf5c      	itt	pl
   d796c:	2201      	movpl	r2, #1
   d796e:	601a      	strpl	r2, [r3, #0]
   d7970:	4b10      	ldr	r3, [pc, #64]	; (d79b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7972:	681a      	ldr	r2, [r3, #0]
   d7974:	07d1      	lsls	r1, r2, #31
   d7976:	bf5c      	itt	pl
   d7978:	2201      	movpl	r2, #1
   d797a:	601a      	strpl	r2, [r3, #0]
   d797c:	4b0e      	ldr	r3, [pc, #56]	; (d79b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d797e:	681a      	ldr	r2, [r3, #0]
   d7980:	07d2      	lsls	r2, r2, #31
   d7982:	bf5c      	itt	pl
   d7984:	2201      	movpl	r2, #1
   d7986:	601a      	strpl	r2, [r3, #0]
   d7988:	4770      	bx	lr
   d798a:	bf00      	nop
   d798c:	2003e7cc 	.word	0x2003e7cc
   d7990:	2003e7c8 	.word	0x2003e7c8
   d7994:	2003e7c4 	.word	0x2003e7c4
   d7998:	2003e7c0 	.word	0x2003e7c0
   d799c:	2003e7bc 	.word	0x2003e7bc
   d79a0:	2003e7b8 	.word	0x2003e7b8
   d79a4:	2003e7b4 	.word	0x2003e7b4
   d79a8:	2003e7b0 	.word	0x2003e7b0
   d79ac:	2003e7ac 	.word	0x2003e7ac
   d79b0:	2003e7a8 	.word	0x2003e7a8
   d79b4:	2003e7a4 	.word	0x2003e7a4
   d79b8:	2003e7a0 	.word	0x2003e7a0

000d79bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d79bc:	4b18      	ldr	r3, [pc, #96]	; (d7a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d79be:	681a      	ldr	r2, [r3, #0]
   d79c0:	07d1      	lsls	r1, r2, #31
   d79c2:	bf5c      	itt	pl
   d79c4:	2201      	movpl	r2, #1
   d79c6:	601a      	strpl	r2, [r3, #0]
   d79c8:	4b16      	ldr	r3, [pc, #88]	; (d7a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d79ca:	681a      	ldr	r2, [r3, #0]
   d79cc:	07d2      	lsls	r2, r2, #31
   d79ce:	bf5c      	itt	pl
   d79d0:	2201      	movpl	r2, #1
   d79d2:	601a      	strpl	r2, [r3, #0]
   d79d4:	4b14      	ldr	r3, [pc, #80]	; (d7a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d79d6:	681a      	ldr	r2, [r3, #0]
   d79d8:	07d0      	lsls	r0, r2, #31
   d79da:	bf5c      	itt	pl
   d79dc:	2201      	movpl	r2, #1
   d79de:	601a      	strpl	r2, [r3, #0]
   d79e0:	4b12      	ldr	r3, [pc, #72]	; (d7a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d79e2:	681a      	ldr	r2, [r3, #0]
   d79e4:	07d1      	lsls	r1, r2, #31
   d79e6:	bf5c      	itt	pl
   d79e8:	2201      	movpl	r2, #1
   d79ea:	601a      	strpl	r2, [r3, #0]
   d79ec:	4b10      	ldr	r3, [pc, #64]	; (d7a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d79ee:	681a      	ldr	r2, [r3, #0]
   d79f0:	07d2      	lsls	r2, r2, #31
   d79f2:	bf5c      	itt	pl
   d79f4:	2201      	movpl	r2, #1
   d79f6:	601a      	strpl	r2, [r3, #0]
   d79f8:	4b0e      	ldr	r3, [pc, #56]	; (d7a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d79fa:	681a      	ldr	r2, [r3, #0]
   d79fc:	07d0      	lsls	r0, r2, #31
   d79fe:	bf5c      	itt	pl
   d7a00:	2201      	movpl	r2, #1
   d7a02:	601a      	strpl	r2, [r3, #0]
   d7a04:	4b0c      	ldr	r3, [pc, #48]	; (d7a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a06:	681a      	ldr	r2, [r3, #0]
   d7a08:	07d1      	lsls	r1, r2, #31
   d7a0a:	bf5c      	itt	pl
   d7a0c:	2201      	movpl	r2, #1
   d7a0e:	601a      	strpl	r2, [r3, #0]
   d7a10:	4b0a      	ldr	r3, [pc, #40]	; (d7a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a12:	681a      	ldr	r2, [r3, #0]
   d7a14:	07d2      	lsls	r2, r2, #31
   d7a16:	bf5c      	itt	pl
   d7a18:	2201      	movpl	r2, #1
   d7a1a:	601a      	strpl	r2, [r3, #0]
   d7a1c:	4770      	bx	lr
   d7a1e:	bf00      	nop
   d7a20:	2003e7ec 	.word	0x2003e7ec
   d7a24:	2003e7e8 	.word	0x2003e7e8
   d7a28:	2003e7e4 	.word	0x2003e7e4
   d7a2c:	2003e7e0 	.word	0x2003e7e0
   d7a30:	2003e7dc 	.word	0x2003e7dc
   d7a34:	2003e7d8 	.word	0x2003e7d8
   d7a38:	2003e7d4 	.word	0x2003e7d4
   d7a3c:	2003e7d0 	.word	0x2003e7d0

000d7a40 <__cxa_atexit>:
   d7a40:	b510      	push	{r4, lr}
   d7a42:	4c05      	ldr	r4, [pc, #20]	; (d7a58 <__cxa_atexit+0x18>)
   d7a44:	4613      	mov	r3, r2
   d7a46:	b12c      	cbz	r4, d7a54 <__cxa_atexit+0x14>
   d7a48:	460a      	mov	r2, r1
   d7a4a:	4601      	mov	r1, r0
   d7a4c:	2002      	movs	r0, #2
   d7a4e:	f3af 8000 	nop.w
   d7a52:	bd10      	pop	{r4, pc}
   d7a54:	4620      	mov	r0, r4
   d7a56:	bd10      	pop	{r4, pc}
   d7a58:	00000000 	.word	0x00000000

000d7a5c <memcpy>:
   d7a5c:	b510      	push	{r4, lr}
   d7a5e:	1e43      	subs	r3, r0, #1
   d7a60:	440a      	add	r2, r1
   d7a62:	4291      	cmp	r1, r2
   d7a64:	d004      	beq.n	d7a70 <memcpy+0x14>
   d7a66:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7a6e:	e7f8      	b.n	d7a62 <memcpy+0x6>
   d7a70:	bd10      	pop	{r4, pc}

000d7a72 <memset>:
   d7a72:	4402      	add	r2, r0
   d7a74:	4603      	mov	r3, r0
   d7a76:	4293      	cmp	r3, r2
   d7a78:	d002      	beq.n	d7a80 <memset+0xe>
   d7a7a:	f803 1b01 	strb.w	r1, [r3], #1
   d7a7e:	e7fa      	b.n	d7a76 <memset+0x4>
   d7a80:	4770      	bx	lr
	...

000d7a84 <srand>:
   d7a84:	b538      	push	{r3, r4, r5, lr}
   d7a86:	4b12      	ldr	r3, [pc, #72]	; (d7ad0 <srand+0x4c>)
   d7a88:	681c      	ldr	r4, [r3, #0]
   d7a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7a8c:	4605      	mov	r5, r0
   d7a8e:	b9d3      	cbnz	r3, d7ac6 <srand+0x42>
   d7a90:	2018      	movs	r0, #24
   d7a92:	f7fe fbd7 	bl	d6244 <malloc>
   d7a96:	f243 330e 	movw	r3, #13070	; 0x330e
   d7a9a:	63a0      	str	r0, [r4, #56]	; 0x38
   d7a9c:	8003      	strh	r3, [r0, #0]
   d7a9e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7aa2:	8043      	strh	r3, [r0, #2]
   d7aa4:	f241 2334 	movw	r3, #4660	; 0x1234
   d7aa8:	8083      	strh	r3, [r0, #4]
   d7aaa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7aae:	80c3      	strh	r3, [r0, #6]
   d7ab0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7ab4:	8103      	strh	r3, [r0, #8]
   d7ab6:	2305      	movs	r3, #5
   d7ab8:	8143      	strh	r3, [r0, #10]
   d7aba:	230b      	movs	r3, #11
   d7abc:	8183      	strh	r3, [r0, #12]
   d7abe:	2201      	movs	r2, #1
   d7ac0:	2300      	movs	r3, #0
   d7ac2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7ac6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7ac8:	2200      	movs	r2, #0
   d7aca:	611d      	str	r5, [r3, #16]
   d7acc:	615a      	str	r2, [r3, #20]
   d7ace:	bd38      	pop	{r3, r4, r5, pc}
   d7ad0:	2003e250 	.word	0x2003e250

000d7ad4 <strdup>:
   d7ad4:	4b02      	ldr	r3, [pc, #8]	; (d7ae0 <strdup+0xc>)
   d7ad6:	4601      	mov	r1, r0
   d7ad8:	6818      	ldr	r0, [r3, #0]
   d7ada:	f000 b803 	b.w	d7ae4 <_strdup_r>
   d7ade:	bf00      	nop
   d7ae0:	2003e250 	.word	0x2003e250

000d7ae4 <_strdup_r>:
   d7ae4:	b570      	push	{r4, r5, r6, lr}
   d7ae6:	4606      	mov	r6, r0
   d7ae8:	4608      	mov	r0, r1
   d7aea:	460c      	mov	r4, r1
   d7aec:	f000 f80d 	bl	d7b0a <strlen>
   d7af0:	1c45      	adds	r5, r0, #1
   d7af2:	4629      	mov	r1, r5
   d7af4:	4630      	mov	r0, r6
   d7af6:	f7fe fbcd 	bl	d6294 <_malloc_r>
   d7afa:	4606      	mov	r6, r0
   d7afc:	b118      	cbz	r0, d7b06 <_strdup_r+0x22>
   d7afe:	462a      	mov	r2, r5
   d7b00:	4621      	mov	r1, r4
   d7b02:	f7ff ffab 	bl	d7a5c <memcpy>
   d7b06:	4630      	mov	r0, r6
   d7b08:	bd70      	pop	{r4, r5, r6, pc}

000d7b0a <strlen>:
   d7b0a:	4603      	mov	r3, r0
   d7b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7b10:	2a00      	cmp	r2, #0
   d7b12:	d1fb      	bne.n	d7b0c <strlen+0x2>
   d7b14:	1a18      	subs	r0, r3, r0
   d7b16:	3801      	subs	r0, #1
   d7b18:	4770      	bx	lr

000d7b1a <link_code_end>:
	...

000d7b1c <dynalib_user>:
   d7b1c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7b2c:	0000 0000                                   ....

000d7b30 <_ZTV16JsonWriterStaticILj256EE>:
	...
   d7b38:	41f9 000d 420d 000d 454d 554e 5200 5445     .A...B..MENU.RET
   d7b48:	5255 004e 7277 6e6f 2067 6863 6365 536b     URN.wrong checkS
   d7b58:	6d75 2121 2121 2d00 2d2d 2d2d 2d2d 2d2d     um!!!!.---------
   d7b68:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d7b78:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d7b88:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d7b98:	002d 6553 6972 6c61 7320 6174 7472 4800     -.Serial start.H
   d7ba8:	334d 3033 2058 6e69 7469 6620 6961 656c     M330X init faile
   d7bb8:	2164 2121 6c00 6c61 6c61 0061 7544 7473     d!!!.lalala.Dust
   d7bc8:	5220 6165 6964 676e 5000 314d 5000 324d      Reading.PM1.PM2
   d7bd8:	0035 4d50 3031 4900 206d 6e69 7420 6568     5.PM10.Im in the
   d7be8:	6d20 6e65 0075 6d70 2e31 2030 6f4c 3a77      menu.pm1.0 Low:
   d7bf8:	7000 316d 302e 4820 6769 3a68 7000 326d     .pm1.0 High:.pm2
   d7c08:	352e 4c20 776f 003a 6d70 2e32 2035 6948     .5 Low:.pm2.5 Hi
   d7c18:	6867 003a 6d70 3031 4c20 776f 003a 6d70     gh:.pm10 Low:.pm
   d7c28:	3031 4820 6769 3a68 3e00 5000 314d 302e     10 High:.>.PM1.0
   d7c38:	203a 7500 2f67 336d 5000 324d 352e 203a     : .ug/m3.PM2.5: 
   d7c48:	5000 314d 3a30 2020 2500 0064 7544 7473     .PM10:  .%d.Dust
   d7c58:	0031 7544 7473 3532 4400 7375 3174 0030     1.Dust25.Dust10.
   d7c68:	7544 7473 6552 6461 6e69 7367 4800 334d     DustReadings.HM3
   d7c78:	3033 2058 6572 6461 7220 7365 6c75 2074     30X read result 
   d7c88:	6166 6c69 6465 2121 0021 7453 7261 6974     failed!!!.Starti
   d7c98:	676e 4420 7369 6c70 7961 5000 6972 746e     ng Display.Print
   d7ca8:	6e69 2067 6f43 636e 6e65 7274 7461 6f69     ing Concentratio
   d7cb8:	736e 5000 324d 352e 4420 7461 0061 616c     ns.PM2.5 Data.la
   d7cc8:	7473 6d50 3532 0068 6573 736e 726f 6e20     stPm25h.sensor n
   d7cd8:	6d75 203a 5000 314d 302e 6320 6e6f 6563     um: .PM1.0 conce
   d7ce8:	746e 6172 6974 6e6f 4328 3d46 2c31 7453     ntration(CF=1,St
   d7cf8:	6e61 6164 6472 7020 7261 6974 7563 616c     andard particula
   d7d08:	6574 6d20 7461 6574 2c72 6e75 7469 753a     te matter,unit:u
   d7d18:	2f67 336d 3a29 0020 4d50 2e32 2035 6f63     g/m3): .PM2.5 co
   d7d28:	636e 6e65 7274 7461 6f69 286e 4643 313d     ncentration(CF=1
   d7d38:	532c 6174 646e 7261 2064 6170 7472 6369     ,Standard partic
   d7d48:	6c75 7461 2065 616d 7474 7265 752c 696e     ulate matter,uni
   d7d58:	3a74 6775 6d2f 2933 203a 5000 314d 2030     t:ug/m3): .PM10 
   d7d68:	6f63 636e 6e65 7274 7461 6f69 286e 4643     concentration(CF
   d7d78:	313d 532c 6174 646e 7261 2064 6170 7472     =1,Standard part
   d7d88:	6369 6c75 7461 2065 616d 7474 7265 752c     iculate matter,u
   d7d98:	696e 3a74 6775 6d2f 2933 203a 5000 314d     nit:ug/m3): .PM1
   d7da8:	302e 6320 6e6f 6563 746e 6172 6974 6e6f     .0 concentration
   d7db8:	4128 6d74 736f 6870 7265 6369 6520 766e     (Atmospheric env
   d7dc8:	7269 6e6f 656d 746e 752c 696e 3a74 6775     ironment,unit:ug
   d7dd8:	6d2f 2933 203a 5000 324d 352e 6320 6e6f     /m3): .PM2.5 con
   d7de8:	6563 746e 6172 6974 6e6f 4128 6d74 736f     centration(Atmos
   d7df8:	6870 7265 6369 6520 766e 7269 6e6f 656d     pheric environme
   d7e08:	746e 752c 696e 3a74 6775 6d2f 2933 203a     nt,unit:ug/m3): 
   d7e18:	5000 314d 2030 6f63 636e 6e65 7274 7461     .PM10 concentrat
   d7e28:	6f69 286e 7441 6f6d 7073 6568 6972 2063     ion(Atmospheric 
   d7e38:	6e65 6976 6f72 6d6e 6e65 2c74 6e75 7469     environment,unit
   d7e48:	753a 2f67 336d 3a29 0020 0000               :ug/m3): ...

000d7e54 <_ZTV16Adafruit_SSD1306>:
	...
   d7e5c:	40c9 000d 4c75 000d 5771 000d 666d 000d     .@..uL..qW..mf..
   d7e6c:	503d 000d 5471 000d 4ec5 000d 4d51 000d     =P..qT...N..QM..
   d7e7c:	5531 000d 55c7 000d 55ff 000d 561b 000d     1U...U...U...V..

000d7e8c <_ZTV12Adafruit_GFX>:
	...
   d7e9c:	5771 000d 666d 000d 40a5 000d 5471 000d     qW..mf...@..qT..
   d7eac:	5591 000d 55ad 000d 5531 000d 55c7 000d     .U...U..1U...U..
   d7ebc:	55ff 000d 561b 000d                         .U...V..

000d7ec4 <_ZL4font>:
   d7ec4:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d7ed4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d7ee4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d7ef4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d7f04:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d7f14:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d7f24:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d7f34:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d7f44:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7f54:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7f64:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7f74:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7f84:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7f94:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7fa4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7fb4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7fc4:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d7fd4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d7fe4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d7ff4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d8004:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d8014:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d8024:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d8034:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d8044:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d8054:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d8064:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d8074:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d8084:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d8094:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d80a4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d80b4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d80c4:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d80d4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d80e4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d80f4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d8104:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d8114:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d8124:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d8134:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d8144:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d8154:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d8164:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d8174:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d8184:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d8194:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d81a4:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d81b4:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d81c4:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d81d4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d81e4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d81f4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d8204:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d8214:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d8224:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d8234:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d8244:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d8254:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d8264:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d8274:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d8284:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d8294:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d82a4:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d82b4:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d82c4:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d82d4:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d82e4:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d82f4:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d8304:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d8314:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d8324:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d8334:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d8344:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d8354:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d8364:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d8374:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d8384:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d8394:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d83a4:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d83b4:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d83c0 <_ZTV10JsonBuffer>:
	...
   d83c8:	5825 000d 5841 000d                         %X..AX..

000d83d0 <_ZTV10JsonWriter>:
	...
   d83d8:	5855 000d 5869 000d 6c25 0075 3025 7834     UX..iX..%lu.%04x
   d83e8:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d83f8:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   d8408:	2500 666c 0000 0000                         .%lf....

000d8410 <_ZTVN5spark13EthernetClassE>:
	...
   d8418:	6303 000d 62f9 000d 62ef 000d 62e5 000d     .c...b...b...b..
   d8428:	62d9 000d 62cd 000d 62c1 000d 62b9 000d     .b...b...b...b..
   d8438:	62af 000d 62a5 000d 74dd 000d               .b...b...t..

000d8444 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8444:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d8454:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d8464:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d8474:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d8484:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d8494:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d84a4:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d84b4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d84c4:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d84d4:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d84e4:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d84f4:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d8504:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d8514:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d8524:	6c61 006c 005a 2b25 3330 3a64 3025 7532     all.Z.%+03d:%02u
   d8534:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d8544:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d8554 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d855c:	68c9 000d 68cf 000d 6913 000d 68dd 000d     .h...h...i...h..
   d856c:	68cb 000d                                   .h..

000d8570 <_ZTV9IPAddress>:
	...
   d8578:	6e61 000d 6e51 000d 6e53 000d               an..Qn..Sn..

000d8584 <_ZTV9USBSerial>:
	...
   d858c:	6f39 000d 6f89 000d 6f97 000d 666d 000d     9o...o...o..mf..
   d859c:	6f75 000d 6f3b 000d 6f51 000d 6f83 000d     uo..;o..Qo...o..
   d85ac:	6f67 000d 6f35 000d                         go..5o..

000d85b4 <_ZTV11USARTSerial>:
	...
   d85bc:	7045 000d 7095 000d 70a3 000d 666d 000d     Ep...p...p..mf..
   d85cc:	7059 000d 707b 000d 7067 000d 708f 000d     Yp..{p..gp...p..
   d85dc:	7047 000d 704b 000d                         Gp..Kp..

000d85e4 <_ZTV7TwoWire>:
	...
   d85ec:	7171 000d 71bb 000d 7193 000d 7173 000d     qq...q...q..sq..
   d85fc:	719b 000d 71a3 000d 71ab 000d 71b3 000d     .q...q...q...q..

000d860c <_ZTVN5spark9MeshClassE>:
	...
   d8614:	72dd 000d 72d3 000d 72c9 000d 72bf 000d     .r...r...r...r..
   d8624:	72b3 000d 72a7 000d 729b 000d 7293 000d     .r...r...r...r..
   d8634:	7289 000d 727f 000d 74dd 000d               .r...r...t..

000d8640 <_ZTVN5spark9WiFiClassE>:
	...
   d8648:	7457 000d 744d 000d 7443 000d 73f9 000d     Wt..Mt..Ct...s..
   d8658:	7437 000d 742b 000d 741f 000d 7417 000d     7t..+t...t...t..
   d8668:	740d 000d 7403 000d 74dd 000d               .t...t...t..

000d8674 <_ZTVN5spark12NetworkClassE>:
	...
   d867c:	7475 000d 747f 000d 7489 000d 7493 000d     ut...t...t...t..
   d868c:	749d 000d 74a9 000d 74b5 000d 74c1 000d     .t...t...t...t..
   d869c:	74c9 000d 74d3 000d 74dd 000d               .t...t...t..

000d86a8 <_ZSt7nothrow>:
   d86a8:	0000 0000                                   ....

000d86ac <__sf_fake_stdin>:
	...

000d86cc <__sf_fake_stdout>:
	...

000d86ec <__sf_fake_stderr>:
	...
   d870c:	0043                                        C.

000d870e <link_const_variable_data_end>:
	...

000d8710 <link_constructors_location>:
   d8710:	000d4c85 	.word	0x000d4c85
   d8714:	000d546d 	.word	0x000d546d
   d8718:	000d581f 	.word	0x000d581f
   d871c:	000d5aab 	.word	0x000d5aab
   d8720:	000d5ae3 	.word	0x000d5ae3
   d8724:	000d5b5d 	.word	0x000d5b5d
   d8728:	000d5cdb 	.word	0x000d5cdb
   d872c:	000d5db9 	.word	0x000d5db9
   d8730:	000d630d 	.word	0x000d630d
   d8734:	000d64b1 	.word	0x000d64b1
   d8738:	000d6645 	.word	0x000d6645
   d873c:	000d6735 	.word	0x000d6735
   d8740:	000d6745 	.word	0x000d6745
   d8744:	000d679d 	.word	0x000d679d
   d8748:	000d73a9 	.word	0x000d73a9
   d874c:	000d7461 	.word	0x000d7461
   d8750:	000d75a9 	.word	0x000d75a9
   d8754:	000d77b1 	.word	0x000d77b1
   d8758:	000d7835 	.word	0x000d7835
   d875c:	000d78f9 	.word	0x000d78f9
   d8760:	000d79bd 	.word	0x000d79bd

000d8764 <link_constructors_end>:
	...
