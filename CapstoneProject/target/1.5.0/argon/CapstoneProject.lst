
c:/Users/John/Documents/IoTClass/studentprojects-jvaldez155/CapstoneProject/target/1.5.0/argon/CapstoneProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003d24  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7d40  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000494  2003deac  000d7d44  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004b0  2003e340  2003e340  0002e340  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d81d8  000d81d8  000281d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8200  000d8200  00028200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010e681  00000000  00000000  00028204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015799  00000000  00000000  00136885  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002615a  00000000  00000000  0014c01e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c68  00000000  00000000  00172178  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005238  00000000  00000000  00174de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003d89c  00000000  00000000  0017a018  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036444  00000000  00000000  001b78b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b294  00000000  00000000  001edcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e594  00000000  00000000  002f8f8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f83b 	bl	d70a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f840 	bl	d70be <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003deac 	.word	0x2003deac
   d4048:	000d7d44 	.word	0x000d7d44
   d404c:	2003e340 	.word	0x2003e340
   d4050:	2003e340 	.word	0x2003e340
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 ff35 	bl	d5ec8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7d40 	.word	0x000d7d40
   d4080:	000d7cf4 	.word	0x000d7cf4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8aa 	b.w	d41dc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9e3 	bl	d4454 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bedb 	b.w	d5e4c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bbe7 	b.w	d5868 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bbed 	b.w	d5878 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bbeb 	b.w	d5878 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 fb38 	bl	d5720 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5501 	.word	0x000d5501

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   d40c8:	4770      	bx	lr
	...

000d40cc <_ZN16JsonWriterStaticILj256EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
   d40cc:	b510      	push	{r4, lr}
   d40ce:	4b03      	ldr	r3, [pc, #12]	; (d40dc <_ZN16JsonWriterStaticILj256EED1Ev+0x10>)
   d40d0:	6003      	str	r3, [r0, #0]
   d40d2:	4604      	mov	r4, r0
   d40d4:	f001 f85e 	bl	d5194 <_ZN10JsonWriterD1Ev>
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}
   d40dc:	000d7184 	.word	0x000d7184

000d40e0 <_ZN16JsonWriterStaticILj256EED0Ev>:
   d40e0:	b510      	push	{r4, lr}
   d40e2:	4604      	mov	r4, r0
   d40e4:	f7ff fff2 	bl	d40cc <_ZN16JsonWriterStaticILj256EED1Ev>
   d40e8:	4620      	mov	r0, r4
   d40ea:	f44f 7198 	mov.w	r1, #304	; 0x130
   d40ee:	f002 fe6f 	bl	d6dd0 <_ZdlPvj>
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}

000d40f6 <_Z12print_resultPKct>:
                     "PM1.0 concentration(Atmospheric environment,unit:ug/m3): ",
                     "PM2.5 concentration(Atmospheric environment,unit:ug/m3): ",
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

HM330XErrorCode print_result(const char* str, uint16_t value) {
   d40f6:	b538      	push	{r3, r4, r5, lr}
   d40f8:	460d      	mov	r5, r1
    if (NULL == str) {
   d40fa:	4604      	mov	r4, r0
   d40fc:	b180      	cbz	r0, d4120 <_Z12print_resultPKct+0x2a>
        return ERROR_PARAM;
    }
    Serial.print(str);
   d40fe:	f002 faa7 	bl	d6650 <_Z16_fetch_usbserialv>
   d4102:	4621      	mov	r1, r4
   d4104:	f001 fe04 	bl	d5d10 <_ZN5Print5printEPKc>
    Serial.println(value);
   d4108:	f002 faa2 	bl	d6650 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d410c:	220a      	movs	r2, #10
   d410e:	4604      	mov	r4, r0
   d4110:	4629      	mov	r1, r5
   d4112:	f001 fe1a 	bl	d5d4a <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4116:	4620      	mov	r0, r4
   d4118:	f001 fe01 	bl	d5d1e <_ZN5Print7printlnEv>
    return NO_ERROR1;
   d411c:	2000      	movs	r0, #0
   d411e:	bd38      	pop	{r3, r4, r5, pc}
                     "PM10 concentration(Atmospheric environment,unit:ug/m3): ",
                    };

HM330XErrorCode print_result(const char* str, uint16_t value) {
    if (NULL == str) {
        return ERROR_PARAM;
   d4120:	f04f 30ff 	mov.w	r0, #4294967295
    }
    Serial.print(str);
    Serial.println(value);
    return NO_ERROR1;
}
   d4124:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4128 <_Z12parse_resultPh>:

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
   d4128:	b570      	push	{r4, r5, r6, lr}
    uint16_t value = 0;
    if (NULL == data) {
   d412a:	4605      	mov	r5, r0
   d412c:	b178      	cbz	r0, d414e <_Z12parse_resultPh+0x26>
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
   d412e:	4e09      	ldr	r6, [pc, #36]	; (d4154 <_Z12parse_resultPh+0x2c>)
   d4130:	2400      	movs	r4, #0
   d4132:	192b      	adds	r3, r5, r4
   d4134:	f856 0014 	ldr.w	r0, [r6, r4, lsl #1]
   d4138:	7899      	ldrb	r1, [r3, #2]
   d413a:	78db      	ldrb	r3, [r3, #3]
   d413c:	3402      	adds	r4, #2
   d413e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   d4142:	f7ff ffd8 	bl	d40f6 <_Z12print_resultPKct>
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 1; i < 8; i++) {
   d4146:	2c0e      	cmp	r4, #14
   d4148:	d1f3      	bne.n	d4132 <_Z12parse_resultPh+0xa>
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
    }
    return NO_ERROR1;
   d414a:	2000      	movs	r0, #0
   d414c:	bd70      	pop	{r4, r5, r6, pc}

/*parse buf with 29 uint8_t-data*/
HM330XErrorCode parse_result(uint8_t* data) {
    uint16_t value = 0;
    if (NULL == data) {
        return ERROR_PARAM;
   d414e:	f04f 30ff 	mov.w	r0, #4294967295
    for (int i = 1; i < 8; i++) {
        value = (uint16_t) data[i * 2] << 8 | data[i * 2 + 1];
        print_result(str[i - 1], value);
    }
    return NO_ERROR1;
}
   d4152:	bd70      	pop	{r4, r5, r6, pc}
   d4154:	2003deac 	.word	0x2003deac

000d4158 <_Z18parse_result_valuePh>:

HM330XErrorCode parse_result_value(uint8_t* data) {
   d4158:	b538      	push	{r3, r4, r5, lr}
    if (NULL == data) {
   d415a:	4605      	mov	r5, r0
   d415c:	b3a0      	cbz	r0, d41c8 <_Z18parse_result_valuePh+0x70>
   d415e:	2400      	movs	r4, #0
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
        Serial.print(data[i], HEX);
   d4160:	f002 fa76 	bl	d6650 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4164:	2210      	movs	r2, #16
   d4166:	5d29      	ldrb	r1, [r5, r4]
   d4168:	f001 fdef 	bl	d5d4a <_ZN5Print11printNumberEmh>
        Serial.print("  ");
   d416c:	f002 fa70 	bl	d6650 <_Z16_fetch_usbserialv>
   d4170:	4917      	ldr	r1, [pc, #92]	; (d41d0 <_Z18parse_result_valuePh+0x78>)
   d4172:	f001 fdcd 	bl	d5d10 <_ZN5Print5printEPKc>
        if ((0 == (i) % 5) || (0 == i)) {
   d4176:	2305      	movs	r3, #5
   d4178:	fb94 f3f3 	sdiv	r3, r4, r3
   d417c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4180:	429c      	cmp	r4, r3
   d4182:	d000      	beq.n	d4186 <_Z18parse_result_valuePh+0x2e>
   d4184:	b924      	cbnz	r4, d4190 <_Z18parse_result_valuePh+0x38>
            Serial.println("");
   d4186:	f002 fa63 	bl	d6650 <_Z16_fetch_usbserialv>
   d418a:	4912      	ldr	r1, [pc, #72]	; (d41d4 <_Z18parse_result_valuePh+0x7c>)
   d418c:	f001 fdd3 	bl	d5d36 <_ZN5Print7printlnEPKc>

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
    }
    for (int i = 0; i < 28; i++) {
   d4190:	3401      	adds	r4, #1
   d4192:	2c1c      	cmp	r4, #28
   d4194:	d1e4      	bne.n	d4160 <_Z18parse_result_valuePh+0x8>
   d4196:	1e6a      	subs	r2, r5, #1
   d4198:	f105 011b 	add.w	r1, r5, #27
   d419c:	2300      	movs	r3, #0
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
        sum += data[i];
   d419e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   d41a2:	4403      	add	r3, r0
        if ((0 == (i) % 5) || (0 == i)) {
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d41a4:	428a      	cmp	r2, r1
        sum += data[i];
   d41a6:	b2db      	uxtb	r3, r3
        if ((0 == (i) % 5) || (0 == i)) {
            Serial.println("");
        }
    }
    uint8_t sum = 0;
    for (int i = 0; i < 28; i++) {
   d41a8:	d1f9      	bne.n	d419e <_Z18parse_result_valuePh+0x46>
        sum += data[i];
    }
    if (sum != data[28]) {
   d41aa:	7f2a      	ldrb	r2, [r5, #28]
   d41ac:	429a      	cmp	r2, r3
   d41ae:	d004      	beq.n	d41ba <_Z18parse_result_valuePh+0x62>
        Serial.println("wrong checkSum!!!!");
   d41b0:	f002 fa4e 	bl	d6650 <_Z16_fetch_usbserialv>
   d41b4:	4908      	ldr	r1, [pc, #32]	; (d41d8 <_Z18parse_result_valuePh+0x80>)
   d41b6:	f001 fdbe 	bl	d5d36 <_ZN5Print7printlnEPKc>
    }
    Serial.println("");
   d41ba:	f002 fa49 	bl	d6650 <_Z16_fetch_usbserialv>
   d41be:	4905      	ldr	r1, [pc, #20]	; (d41d4 <_Z18parse_result_valuePh+0x7c>)
   d41c0:	f001 fdb9 	bl	d5d36 <_ZN5Print7printlnEPKc>
    return NO_ERROR1;
   d41c4:	2000      	movs	r0, #0
   d41c6:	bd38      	pop	{r3, r4, r5, pc}
    return NO_ERROR1;
}

HM330XErrorCode parse_result_value(uint8_t* data) {
    if (NULL == data) {
        return ERROR_PARAM;
   d41c8:	f04f 30ff 	mov.w	r0, #4294967295
    if (sum != data[28]) {
        Serial.println("wrong checkSum!!!!");
    }
    Serial.println("");
    return NO_ERROR1;
}
   d41cc:	bd38      	pop	{r3, r4, r5, pc}
   d41ce:	bf00      	nop
   d41d0:	000d718c 	.word	0x000d718c
   d41d4:	000d7ad4 	.word	0x000d7ad4
   d41d8:	000d718f 	.word	0x000d718f

000d41dc <setup>:
String pm10;

/************Declare Variables*************/
int status;

void setup() {
   d41dc:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d41de:	f002 fa37 	bl	d6650 <_Z16_fetch_usbserialv>
   d41e2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41e6:	f002 fa27 	bl	d6638 <_ZN9USBSerial5beginEl>
  delay(5000);
   d41ea:	f241 3088 	movw	r0, #5000	; 0x1388
   d41ee:	f001 fddf 	bl	d5db0 <delay>
  Serial.println("----------------------------------------------------------");
   d41f2:	f002 fa2d 	bl	d6650 <_Z16_fetch_usbserialv>
   d41f6:	4922      	ldr	r1, [pc, #136]	; (d4280 <setup+0xa4>)
   d41f8:	f001 fd9d 	bl	d5d36 <_ZN5Print7printlnEPKc>

  Serial.println("Serial start");
   d41fc:	f002 fa28 	bl	d6650 <_Z16_fetch_usbserialv>
   d4200:	4920      	ldr	r1, [pc, #128]	; (d4284 <setup+0xa8>)
   d4202:	f001 fd98 	bl	d5d36 <_ZN5Print7printlnEPKc>
  if (sensor.init()) {
   d4206:	4820      	ldr	r0, [pc, #128]	; (d4288 <setup+0xac>)
   d4208:	f000 ff77 	bl	d50fa <_ZN6HM330X4initEv>
   d420c:	4604      	mov	r4, r0
   d420e:	b128      	cbz	r0, d421c <setup+0x40>
    Serial.println("HM330X init failed!!!");
   d4210:	f002 fa1e 	bl	d6650 <_Z16_fetch_usbserialv>
   d4214:	491d      	ldr	r1, [pc, #116]	; (d428c <setup+0xb0>)
   d4216:	f001 fd8e 	bl	d5d36 <_ZN5Print7printlnEPKc>
   d421a:	e7fe      	b.n	d421a <setup+0x3e>
    while (1);
    }
    Wire.begin();
   d421c:	f002 fda4 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d4220:	f002 fb10 	bl	d6844 <_ZN7TwoWire5beginEv>
    display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR);
   d4224:	223c      	movs	r2, #60	; 0x3c
   d4226:	2102      	movs	r1, #2
   d4228:	4819      	ldr	r0, [pc, #100]	; (d4290 <setup+0xb4>)
   d422a:	f000 fc1d 	bl	d4a68 <_ZN16Adafruit_SSD13065beginEhh>
    display.clearDisplay();
   d422e:	4818      	ldr	r0, [pc, #96]	; (d4290 <setup+0xb4>)
   d4230:	f000 fd6a 	bl	d4d08 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
   d4234:	4816      	ldr	r0, [pc, #88]	; (d4290 <setup+0xb4>)
   d4236:	f000 fce9 	bl	d4c0c <_ZN16Adafruit_SSD13067displayEv>

    display.setCursor(3,0);
   d423a:	4622      	mov	r2, r4
   d423c:	2103      	movs	r1, #3
   d423e:	4814      	ldr	r0, [pc, #80]	; (d4290 <setup+0xb4>)
   d4240:	f000 ff21 	bl	d5086 <_ZN12Adafruit_GFX9setCursorEss>
    display.setTextColor(WHITE);
   d4244:	2101      	movs	r1, #1
   d4246:	4812      	ldr	r0, [pc, #72]	; (d4290 <setup+0xb4>)
   d4248:	f000 ff25 	bl	d5096 <_ZN12Adafruit_GFX12setTextColorEt>
    display.setTextSize(2);
   d424c:	2102      	movs	r1, #2
   d424e:	4810      	ldr	r0, [pc, #64]	; (d4290 <setup+0xb4>)
   d4250:	f000 ff1c 	bl	d508c <_ZN12Adafruit_GFX11setTextSizeEh>
    display.print("Dust Reading");
   d4254:	490f      	ldr	r1, [pc, #60]	; (d4294 <setup+0xb8>)
   d4256:	480e      	ldr	r0, [pc, #56]	; (d4290 <setup+0xb4>)
   d4258:	f001 fd5a 	bl	d5d10 <_ZN5Print5printEPKc>
    display.display();
   d425c:	480c      	ldr	r0, [pc, #48]	; (d4290 <setup+0xb4>)
   d425e:	f000 fcd5 	bl	d4c0c <_ZN16Adafruit_SSD13067displayEv>
    
    pm1 = "PM1";
   d4262:	490d      	ldr	r1, [pc, #52]	; (d4298 <setup+0xbc>)
   d4264:	480d      	ldr	r0, [pc, #52]	; (d429c <setup+0xc0>)
   d4266:	f001 fcdd 	bl	d5c24 <_ZN6StringaSEPKc>
    pm25 = "PM25";
   d426a:	490d      	ldr	r1, [pc, #52]	; (d42a0 <setup+0xc4>)
   d426c:	480d      	ldr	r0, [pc, #52]	; (d42a4 <setup+0xc8>)
   d426e:	f001 fcd9 	bl	d5c24 <_ZN6StringaSEPKc>
    pm10 = "PM10";
   d4272:	490d      	ldr	r1, [pc, #52]	; (d42a8 <setup+0xcc>)
   d4274:	480d      	ldr	r0, [pc, #52]	; (d42ac <setup+0xd0>)

}
   d4276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    display.print("Dust Reading");
    display.display();
    
    pm1 = "PM1";
    pm25 = "PM25";
    pm10 = "PM10";
   d427a:	f001 bcd3 	b.w	d5c24 <_ZN6StringaSEPKc>
   d427e:	bf00      	nop
   d4280:	000d71a2 	.word	0x000d71a2
   d4284:	000d71dd 	.word	0x000d71dd
   d4288:	2003e358 	.word	0x2003e358
   d428c:	000d71ea 	.word	0x000d71ea
   d4290:	2003e374 	.word	0x2003e374
   d4294:	000d7200 	.word	0x000d7200
   d4298:	000d720d 	.word	0x000d720d
   d429c:	2003e344 	.word	0x2003e344
   d42a0:	000d7211 	.word	0x000d7211
   d42a4:	2003e398 	.word	0x2003e398
   d42a8:	000d7216 	.word	0x000d7216
   d42ac:	2003e35c 	.word	0x2003e35c

000d42b0 <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
   d42b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d42b2:	4606      	mov	r6, r0
   d42b4:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value, int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d42b6:	4617      	mov	r7, r2
   d42b8:	b92a      	cbnz	r2, d42c6 <_ZN5Print7printlnIiLi0EEEjT_i+0x16>
        return write(n);
   d42ba:	6803      	ldr	r3, [r0, #0]
   d42bc:	b2c9      	uxtb	r1, r1
   d42be:	689b      	ldr	r3, [r3, #8]
   d42c0:	4798      	blx	r3
   d42c2:	4605      	mov	r5, r0
   d42c4:	e010      	b.n	d42e8 <_ZN5Print7printlnIiLi0EEEjT_i+0x38>
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d42c6:	2900      	cmp	r1, #0
   d42c8:	da07      	bge.n	d42da <_ZN5Print7printlnIiLi0EEEjT_i+0x2a>
   d42ca:	2a0a      	cmp	r2, #10
   d42cc:	d105      	bne.n	d42da <_ZN5Print7printlnIiLi0EEEjT_i+0x2a>
            t = print('-');
   d42ce:	212d      	movs	r1, #45	; 0x2d
   d42d0:	f001 fd22 	bl	d5d18 <_ZN5Print5printEc>
            val = -n;
   d42d4:	4261      	negs	r1, r4
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
   d42d6:	4605      	mov	r5, r0
   d42d8:	e001      	b.n	d42de <_ZN5Print7printlnIiLi0EEEjT_i+0x2e>
            val = -n;
        } else {
            val = n;
   d42da:	4621      	mov	r1, r4
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
   d42dc:	2500      	movs	r5, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d42de:	b2fa      	uxtb	r2, r7
   d42e0:	4630      	mov	r0, r6
   d42e2:	f001 fd32 	bl	d5d4a <_ZN5Print11printNumberEmh>
   d42e6:	4405      	add	r5, r0
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d42e8:	4630      	mov	r0, r6
   d42ea:	f001 fd18 	bl	d5d1e <_ZN5Print7printlnEv>
        return n;
    }
   d42ee:	4428      	add	r0, r5
   d42f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d42f4 <_Z9printDust6StringS_S_>:
    delay(5000);
    }
    createEventPayLoad (PM1, PM25, PM10) ;
}

void printDust(String pm1, String pm25, String pm10) {
   d42f4:	b510      	push	{r4, lr}
    display.clearDisplay();
   d42f6:	4c1a      	ldr	r4, [pc, #104]	; (d4360 <_Z9printDust6StringS_S_+0x6c>)
   d42f8:	4620      	mov	r0, r4
   d42fa:	f000 fd05 	bl	d4d08 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(2);
   d42fe:	4620      	mov	r0, r4
   d4300:	2102      	movs	r1, #2
   d4302:	f000 fec3 	bl	d508c <_ZN12Adafruit_GFX11setTextSizeEh>
    display.setTextColor(WHITE);
   d4306:	4620      	mov	r0, r4
   d4308:	2101      	movs	r1, #1
   d430a:	f000 fec4 	bl	d5096 <_ZN12Adafruit_GFX12setTextColorEt>
    display.setCursor(0,0);
   d430e:	2200      	movs	r2, #0
   d4310:	4611      	mov	r1, r2
   d4312:	4620      	mov	r0, r4
   d4314:	f000 feb7 	bl	d5086 <_ZN12Adafruit_GFX9setCursorEss>
    display.print("PM1.0:");display.println(PM1);
   d4318:	4912      	ldr	r1, [pc, #72]	; (d4364 <_Z9printDust6StringS_S_+0x70>)
   d431a:	4620      	mov	r0, r4
   d431c:	f001 fcf8 	bl	d5d10 <_ZN5Print5printEPKc>
   d4320:	4b11      	ldr	r3, [pc, #68]	; (d4368 <_Z9printDust6StringS_S_+0x74>)
   d4322:	220a      	movs	r2, #10
   d4324:	6819      	ldr	r1, [r3, #0]
   d4326:	4620      	mov	r0, r4
   d4328:	f7ff ffc2 	bl	d42b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    display.print("PM2.5:");display.println(PM25);
   d432c:	490f      	ldr	r1, [pc, #60]	; (d436c <_Z9printDust6StringS_S_+0x78>)
   d432e:	4620      	mov	r0, r4
   d4330:	f001 fcee 	bl	d5d10 <_ZN5Print5printEPKc>
   d4334:	4b0e      	ldr	r3, [pc, #56]	; (d4370 <_Z9printDust6StringS_S_+0x7c>)
   d4336:	220a      	movs	r2, #10
   d4338:	6819      	ldr	r1, [r3, #0]
   d433a:	4620      	mov	r0, r4
   d433c:	f7ff ffb8 	bl	d42b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    display.print("PM10:");display.println(PM10);
   d4340:	490c      	ldr	r1, [pc, #48]	; (d4374 <_Z9printDust6StringS_S_+0x80>)
   d4342:	4620      	mov	r0, r4
   d4344:	f001 fce4 	bl	d5d10 <_ZN5Print5printEPKc>
   d4348:	4b0b      	ldr	r3, [pc, #44]	; (d4378 <_Z9printDust6StringS_S_+0x84>)
   d434a:	4620      	mov	r0, r4
   d434c:	220a      	movs	r2, #10
   d434e:	6819      	ldr	r1, [r3, #0]
   d4350:	f7ff ffae 	bl	d42b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    display.display();
   d4354:	4620      	mov	r0, r4
}
   d4356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.print("PM1.0:");display.println(PM1);
    display.print("PM2.5:");display.println(PM25);
    display.print("PM10:");display.println(PM10);
    display.display();
   d435a:	f000 bc57 	b.w	d4c0c <_ZN16Adafruit_SSD13067displayEv>
   d435e:	bf00      	nop
   d4360:	2003e374 	.word	0x2003e374
   d4364:	000d721b 	.word	0x000d721b
   d4368:	2003e354 	.word	0x2003e354
   d436c:	000d7222 	.word	0x000d7222
   d4370:	2003e3a8 	.word	0x2003e3a8
   d4374:	000d7229 	.word	0x000d7229
   d4378:	2003e370 	.word	0x2003e370

000d437c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   d437c:	b570      	push	{r4, r5, r6, lr}
   d437e:	4604      	mov	r4, r0
   d4380:	460e      	mov	r6, r1
   d4382:	4615      	mov	r5, r2
		insertCheckSeparator();
   d4384:	f001 f80e 	bl	d53a4 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
   d4388:	2201      	movs	r2, #1
   d438a:	4631      	mov	r1, r6
   d438c:	4620      	mov	r0, r4
   d438e:	f000 ff7d 	bl	d528c <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
   d4392:	4620      	mov	r0, r4
   d4394:	213a      	movs	r1, #58	; 0x3a
   d4396:	f000 ff2d 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d439a:	462a      	mov	r2, r5
   d439c:	4620      	mov	r0, r4
   d439e:	4902      	ldr	r1, [pc, #8]	; (d43a8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
   d43a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
   d43a4:	f000 bf65 	b.w	d5272 <_ZN10JsonWriter13insertsprintfEPKcz>
   d43a8:	000d722f 	.word	0x000d722f

000d43ac <_Z18createEventPayLoadiii>:
}

void createEventPayLoad (int p1 , int p25 , int p10 ) {
   d43ac:	b570      	push	{r4, r5, r6, lr}
   d43ae:	b0d2      	sub	sp, #328	; 0x148
   d43b0:	4614      	mov	r4, r2
   d43b2:	4606      	mov	r6, r0
   d43b4:	460d      	mov	r5, r1
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
   d43b6:	f44f 7280 	mov.w	r2, #256	; 0x100
   d43ba:	a912      	add	r1, sp, #72	; 0x48
   d43bc:	a806      	add	r0, sp, #24
   d43be:	f000 ff07 	bl	d51d0 <_ZN10JsonWriterC1EPcj>
   d43c2:	4b1e      	ldr	r3, [pc, #120]	; (d443c <_Z18createEventPayLoadiii+0x90>)
   d43c4:	9306      	str	r3, [sp, #24]
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
   d43c6:	227d      	movs	r2, #125	; 0x7d
   d43c8:	217b      	movs	r1, #123	; 0x7b
   d43ca:	a806      	add	r0, sp, #24
   d43cc:	f000 fff5 	bl	d53ba <_ZN10JsonWriter18startObjectOrArrayEcc>
  JsonWriterStatic<256> jw; {
    JsonWriterAutoObject obj(&jw);

    jw.insertKeyValue("Dust1", p1);
   d43d0:	4632      	mov	r2, r6
   d43d2:	491b      	ldr	r1, [pc, #108]	; (d4440 <_Z18createEventPayLoadiii+0x94>)
   d43d4:	a806      	add	r0, sp, #24
   d43d6:	f7ff ffd1 	bl	d437c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Dust25", p25);
   d43da:	462a      	mov	r2, r5
   d43dc:	4919      	ldr	r1, [pc, #100]	; (d4444 <_Z18createEventPayLoadiii+0x98>)
   d43de:	a806      	add	r0, sp, #24
   d43e0:	f7ff ffcc 	bl	d437c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    jw.insertKeyValue("Dust10", p10);
   d43e4:	4622      	mov	r2, r4
   d43e6:	4918      	ldr	r1, [pc, #96]	; (d4448 <_Z18createEventPayLoadiii+0x9c>)
   d43e8:	a806      	add	r0, sp, #24
   d43ea:	f7ff ffc7 	bl	d437c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
   d43ee:	a806      	add	r0, sp, #24
   d43f0:	f000 ff0e 	bl	d5210 <_ZN10JsonWriter19finishObjectOrArrayEv>
   d43f4:	9b07      	ldr	r3, [sp, #28]
   d43f6:	9303      	str	r3, [sp, #12]
   d43f8:	4b14      	ldr	r3, [pc, #80]	; (d444c <_Z18createEventPayLoadiii+0xa0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43fa:	9a03      	ldr	r2, [sp, #12]
   d43fc:	781b      	ldrb	r3, [r3, #0]
   d43fe:	f88d 3000 	strb.w	r3, [sp]
   d4402:	4913      	ldr	r1, [pc, #76]	; (d4450 <_Z18createEventPayLoadiii+0xa4>)
   d4404:	233c      	movs	r3, #60	; 0x3c
   d4406:	a804      	add	r0, sp, #16
   d4408:	f001 fecc 	bl	d61a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d440c:	9c05      	ldr	r4, [sp, #20]
   d440e:	b17c      	cbz	r4, d4430 <_Z18createEventPayLoadiii+0x84>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4410:	6863      	ldr	r3, [r4, #4]
   d4412:	3b01      	subs	r3, #1
   d4414:	6063      	str	r3, [r4, #4]
   d4416:	b95b      	cbnz	r3, d4430 <_Z18createEventPayLoadiii+0x84>
        {
          _M_dispose();
   d4418:	6823      	ldr	r3, [r4, #0]
   d441a:	4620      	mov	r0, r4
   d441c:	689b      	ldr	r3, [r3, #8]
   d441e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4420:	68a3      	ldr	r3, [r4, #8]
   d4422:	3b01      	subs	r3, #1
   d4424:	60a3      	str	r3, [r4, #8]
   d4426:	b91b      	cbnz	r3, d4430 <_Z18createEventPayLoadiii+0x84>
            _M_destroy();
   d4428:	6823      	ldr	r3, [r4, #0]
   d442a:	4620      	mov	r0, r4
   d442c:	68db      	ldr	r3, [r3, #12]
   d442e:	4798      	blx	r3
    display.print("PM10:");display.println(PM10);
    display.display();
}

void createEventPayLoad (int p1 , int p25 , int p10 ) {
  JsonWriterStatic<256> jw; {
   d4430:	a806      	add	r0, sp, #24
   d4432:	f7ff fe4b 	bl	d40cc <_ZN16JsonWriterStaticILj256EED1Ev>
    jw.insertKeyValue("Dust1", p1);
    jw.insertKeyValue("Dust25", p25);
    jw.insertKeyValue("Dust10", p10);
  }
  Particle.publish("DustReadings", jw.getBuffer(),PRIVATE) ;
}
   d4436:	b052      	add	sp, #328	; 0x148
   d4438:	bd70      	pop	{r4, r5, r6, pc}
   d443a:	bf00      	nop
   d443c:	000d7184 	.word	0x000d7184
   d4440:	000d7232 	.word	0x000d7232
   d4444:	000d7238 	.word	0x000d7238
   d4448:	000d723f 	.word	0x000d723f
   d444c:	2003e36c 	.word	0x2003e36c
   d4450:	000d7246 	.word	0x000d7246

000d4454 <loop>:
    pm25 = "PM25";
    pm10 = "PM10";

}

void loop() {
   d4454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  if (sensor.read_sensor_value(buf, 29)) {
   d4458:	221d      	movs	r2, #29
    pm25 = "PM25";
    pm10 = "PM10";

}

void loop() {
   d445a:	b08c      	sub	sp, #48	; 0x30

  if (sensor.read_sensor_value(buf, 29)) {
   d445c:	493b      	ldr	r1, [pc, #236]	; (d454c <loop+0xf8>)
   d445e:	483c      	ldr	r0, [pc, #240]	; (d4550 <loop+0xfc>)
   d4460:	f000 fe56 	bl	d5110 <_ZN6HM330X17read_sensor_valueEPhm>
   d4464:	b120      	cbz	r0, d4470 <loop+0x1c>
    Serial.println("HM330X read result failed!!!");
   d4466:	f002 f8f3 	bl	d6650 <_Z16_fetch_usbserialv>
   d446a:	493a      	ldr	r1, [pc, #232]	; (d4554 <loop+0x100>)
   d446c:	f001 fc63 	bl	d5d36 <_ZN5Print7printlnEPKc>
    }
    for(int b = 0; b < 20; b++){
  Serial.println("Starting Display");
  parse_result_value(buf);
   d4470:	4c36      	ldr	r4, [pc, #216]	; (d454c <loop+0xf8>)
    pm25 = "PM25";
    pm10 = "PM10";

}

void loop() {
   d4472:	f04f 0814 	mov.w	r8, #20

  if (sensor.read_sensor_value(buf, 29)) {
    Serial.println("HM330X read result failed!!!");
    }
    for(int b = 0; b < 20; b++){
  Serial.println("Starting Display");
   d4476:	f002 f8eb 	bl	d6650 <_Z16_fetch_usbserialv>
   d447a:	4937      	ldr	r1, [pc, #220]	; (d4558 <loop+0x104>)
  parse_result_value(buf);
  Serial.println("Printing Concentrations");
  parse_result(buf);
  Serial.println("PM2.5 Data");
  PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
   d447c:	4d37      	ldr	r5, [pc, #220]	; (d455c <loop+0x108>)
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
  PM10 = (uint16_t) buf[7 *2] << 8 | buf[7 * 2 + 1];
   d447e:	4f38      	ldr	r7, [pc, #224]	; (d4560 <loop+0x10c>)
  parse_result_value(buf);
  Serial.println("Printing Concentrations");
  parse_result(buf);
  Serial.println("PM2.5 Data");
  PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d4480:	4e38      	ldr	r6, [pc, #224]	; (d4564 <loop+0x110>)

  if (sensor.read_sensor_value(buf, 29)) {
    Serial.println("HM330X read result failed!!!");
    }
    for(int b = 0; b < 20; b++){
  Serial.println("Starting Display");
   d4482:	f001 fc58 	bl	d5d36 <_ZN5Print7printlnEPKc>
  parse_result_value(buf);
   d4486:	4831      	ldr	r0, [pc, #196]	; (d454c <loop+0xf8>)
   d4488:	f7ff fe66 	bl	d4158 <_Z18parse_result_valuePh>
  Serial.println("Printing Concentrations");
   d448c:	f002 f8e0 	bl	d6650 <_Z16_fetch_usbserialv>
   d4490:	4935      	ldr	r1, [pc, #212]	; (d4568 <loop+0x114>)
   d4492:	f001 fc50 	bl	d5d36 <_ZN5Print7printlnEPKc>
  parse_result(buf);
   d4496:	482d      	ldr	r0, [pc, #180]	; (d454c <loop+0xf8>)
   d4498:	f7ff fe46 	bl	d4128 <_Z12parse_resultPh>
  Serial.println("PM2.5 Data");
   d449c:	f002 f8d8 	bl	d6650 <_Z16_fetch_usbserialv>
   d44a0:	4932      	ldr	r1, [pc, #200]	; (d456c <loop+0x118>)
   d44a2:	f001 fc48 	bl	d5d36 <_ZN5Print7printlnEPKc>
  PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
   d44a6:	7aa2      	ldrb	r2, [r4, #10]
   d44a8:	7ae3      	ldrb	r3, [r4, #11]
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d44aa:	7b21      	ldrb	r1, [r4, #12]
  Serial.println("Starting Display");
  parse_result_value(buf);
  Serial.println("Printing Concentrations");
  parse_result(buf);
  Serial.println("PM2.5 Data");
  PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
   d44ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44b0:	602b      	str	r3, [r5, #0]
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d44b2:	7b63      	ldrb	r3, [r4, #13]
  PM10 = (uint16_t) buf[7 *2] << 8 | buf[7 * 2 + 1];
   d44b4:	7ba2      	ldrb	r2, [r4, #14]
  parse_result_value(buf);
  Serial.println("Printing Concentrations");
  parse_result(buf);
  Serial.println("PM2.5 Data");
  PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d44b6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
  PM10 = (uint16_t) buf[7 *2] << 8 | buf[7 * 2 + 1];
   d44ba:	7be3      	ldrb	r3, [r4, #15]
  parse_result_value(buf);
  Serial.println("Printing Concentrations");
  parse_result(buf);
  Serial.println("PM2.5 Data");
  PM1 = (uint16_t) buf[5 *2] << 8 | buf[5 * 2 +1];
  PM25 = (uint16_t) buf[6 * 2] << 8 | buf[6 * 2 + 1];
   d44bc:	6031      	str	r1, [r6, #0]
  PM10 = (uint16_t) buf[7 *2] << 8 | buf[7 * 2 + 1];
   d44be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d44c2:	603b      	str	r3, [r7, #0]
    print_result(str[6 - 1], PM25);
   d44c4:	4b2a      	ldr	r3, [pc, #168]	; (d4570 <loop+0x11c>)
   d44c6:	6958      	ldr	r0, [r3, #20]
   d44c8:	f7ff fe15 	bl	d40f6 <_Z12print_resultPKct>
  Serial.println("");Serial.println(PM1);Serial.println(PM25);Serial.println(PM10);
   d44cc:	f002 f8c0 	bl	d6650 <_Z16_fetch_usbserialv>
   d44d0:	4928      	ldr	r1, [pc, #160]	; (d4574 <loop+0x120>)
   d44d2:	f001 fc30 	bl	d5d36 <_ZN5Print7printlnEPKc>
   d44d6:	f002 f8bb 	bl	d6650 <_Z16_fetch_usbserialv>
   d44da:	220a      	movs	r2, #10
   d44dc:	6829      	ldr	r1, [r5, #0]
   d44de:	f7ff fee7 	bl	d42b0 <_ZN5Print7printlnIiLi0EEEjT_i>
   d44e2:	f002 f8b5 	bl	d6650 <_Z16_fetch_usbserialv>
   d44e6:	220a      	movs	r2, #10
   d44e8:	6831      	ldr	r1, [r6, #0]
   d44ea:	f7ff fee1 	bl	d42b0 <_ZN5Print7printlnIiLi0EEEjT_i>
   d44ee:	f002 f8af 	bl	d6650 <_Z16_fetch_usbserialv>
   d44f2:	220a      	movs	r2, #10
   d44f4:	6839      	ldr	r1, [r7, #0]
   d44f6:	f7ff fedb 	bl	d42b0 <_ZN5Print7printlnIiLi0EEEjT_i>
    printDust(pm1,pm25,pm10);
   d44fa:	491f      	ldr	r1, [pc, #124]	; (d4578 <loop+0x124>)
   d44fc:	4668      	mov	r0, sp
   d44fe:	f001 fb86 	bl	d5c0e <_ZN6StringC1ERKS_>
   d4502:	491e      	ldr	r1, [pc, #120]	; (d457c <loop+0x128>)
   d4504:	a804      	add	r0, sp, #16
   d4506:	f001 fb82 	bl	d5c0e <_ZN6StringC1ERKS_>
   d450a:	491d      	ldr	r1, [pc, #116]	; (d4580 <loop+0x12c>)
   d450c:	a808      	add	r0, sp, #32
   d450e:	f001 fb7e 	bl	d5c0e <_ZN6StringC1ERKS_>
   d4512:	aa08      	add	r2, sp, #32
   d4514:	a904      	add	r1, sp, #16
   d4516:	4668      	mov	r0, sp
   d4518:	f7ff feec 	bl	d42f4 <_Z9printDust6StringS_S_>
   d451c:	a808      	add	r0, sp, #32
   d451e:	f001 fb0d 	bl	d5b3c <_ZN6StringD1Ev>
   d4522:	a804      	add	r0, sp, #16
   d4524:	f001 fb0a 	bl	d5b3c <_ZN6StringD1Ev>
   d4528:	4668      	mov	r0, sp
   d452a:	f001 fb07 	bl	d5b3c <_ZN6StringD1Ev>
    delay(5000);
   d452e:	f241 3088 	movw	r0, #5000	; 0x1388
   d4532:	f001 fc3d 	bl	d5db0 <delay>
void loop() {

  if (sensor.read_sensor_value(buf, 29)) {
    Serial.println("HM330X read result failed!!!");
    }
    for(int b = 0; b < 20; b++){
   d4536:	f1b8 0801 	subs.w	r8, r8, #1
   d453a:	d19c      	bne.n	d4476 <loop+0x22>
    print_result(str[6 - 1], PM25);
  Serial.println("");Serial.println(PM1);Serial.println(PM25);Serial.println(PM10);
    printDust(pm1,pm25,pm10);
    delay(5000);
    }
    createEventPayLoad (PM1, PM25, PM10) ;
   d453c:	683a      	ldr	r2, [r7, #0]
   d453e:	6831      	ldr	r1, [r6, #0]
   d4540:	6828      	ldr	r0, [r5, #0]
   d4542:	f7ff ff33 	bl	d43ac <_Z18createEventPayLoadiii>
}
   d4546:	b00c      	add	sp, #48	; 0x30
   d4548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d454c:	2003e3ac 	.word	0x2003e3ac
   d4550:	2003e358 	.word	0x2003e358
   d4554:	000d7253 	.word	0x000d7253
   d4558:	000d7270 	.word	0x000d7270
   d455c:	2003e354 	.word	0x2003e354
   d4560:	2003e370 	.word	0x2003e370
   d4564:	2003e3a8 	.word	0x2003e3a8
   d4568:	000d7281 	.word	0x000d7281
   d456c:	000d7299 	.word	0x000d7299
   d4570:	2003deac 	.word	0x2003deac
   d4574:	000d7ad4 	.word	0x000d7ad4
   d4578:	2003e344 	.word	0x2003e344
   d457c:	2003e398 	.word	0x2003e398
   d4580:	2003e35c 	.word	0x2003e35c

000d4584 <_ZN16Adafruit_SSD1306D0Ev>:
   d4584:	b510      	push	{r4, lr}
   d4586:	2124      	movs	r1, #36	; 0x24
   d4588:	4604      	mov	r4, r0
   d458a:	f002 fc21 	bl	d6dd0 <_ZdlPvj>
   d458e:	4620      	mov	r0, r4
   d4590:	bd10      	pop	{r4, pc}
	...

000d4594 <_GLOBAL__sub_I_sensor>:
    jw.insertKeyValue("Dust1", p1);
    jw.insertKeyValue("Dust25", p25);
    jw.insertKeyValue("Dust10", p10);
  }
  Particle.publish("DustReadings", jw.getBuffer(),PRIVATE) ;
}
   d4594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4596:	4b1b      	ldr	r3, [pc, #108]	; (d4604 <_GLOBAL__sub_I_sensor+0x70>)
    Serial.println("");
    return NO_ERROR1;
}
/********************** SetUp Oled Display **********************/
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
   d4598:	4d1b      	ldr	r5, [pc, #108]	; (d4608 <_GLOBAL__sub_I_sensor+0x74>)
   d459a:	4c1c      	ldr	r4, [pc, #112]	; (d460c <_GLOBAL__sub_I_sensor+0x78>)
#define SSD1306_128_64
String pm1;
   d459c:	4e1c      	ldr	r6, [pc, #112]	; (d4610 <_GLOBAL__sub_I_sensor+0x7c>)
   d459e:	4f1d      	ldr	r7, [pc, #116]	; (d4614 <_GLOBAL__sub_I_sensor+0x80>)
   d45a0:	2201      	movs	r2, #1
   d45a2:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d45a4:	f000 ff34 	bl	d5410 <HAL_Pin_Map>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include<JsonParserGeneratorRK.h>

/****************SetUp HM330X**************/
HM330X sensor;
   d45a8:	2140      	movs	r1, #64	; 0x40
   d45aa:	481b      	ldr	r0, [pc, #108]	; (d4618 <_GLOBAL__sub_I_sensor+0x84>)
   d45ac:	f000 fd9c 	bl	d50e8 <_ZN6HM330XC1Eh>
    Serial.println("");
    return NO_ERROR1;
}
/********************** SetUp Oled Display **********************/
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
   d45b0:	f04f 31ff 	mov.w	r1, #4294967295
   d45b4:	4628      	mov	r0, r5
   d45b6:	f000 f9f9 	bl	d49ac <_ZN16Adafruit_SSD1306C1Ea>
   d45ba:	4622      	mov	r2, r4
   d45bc:	4917      	ldr	r1, [pc, #92]	; (d461c <_GLOBAL__sub_I_sensor+0x88>)
   d45be:	4628      	mov	r0, r5
   d45c0:	f002 fbf8 	bl	d6db4 <__aeabi_atexit>
#define SSD1306_128_64
String pm1;
   d45c4:	4d16      	ldr	r5, [pc, #88]	; (d4620 <_GLOBAL__sub_I_sensor+0x8c>)
   d45c6:	4631      	mov	r1, r6
   d45c8:	4638      	mov	r0, r7
   d45ca:	f001 fafe 	bl	d5bca <_ZN6StringC1EPK19__FlashStringHelper>
   d45ce:	4638      	mov	r0, r7
String pm25;
   d45d0:	4f14      	ldr	r7, [pc, #80]	; (d4624 <_GLOBAL__sub_I_sensor+0x90>)
}
/********************** SetUp Oled Display **********************/
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
#define SSD1306_128_64
String pm1;
   d45d2:	4622      	mov	r2, r4
   d45d4:	4629      	mov	r1, r5
   d45d6:	f002 fbed 	bl	d6db4 <__aeabi_atexit>
String pm25;
   d45da:	4631      	mov	r1, r6
   d45dc:	4638      	mov	r0, r7
   d45de:	f001 faf4 	bl	d5bca <_ZN6StringC1EPK19__FlashStringHelper>
   d45e2:	4638      	mov	r0, r7
String pm10;
   d45e4:	4f10      	ldr	r7, [pc, #64]	; (d4628 <_GLOBAL__sub_I_sensor+0x94>)
/********************** SetUp Oled Display **********************/
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
#define SSD1306_128_64
String pm1;
String pm25;
   d45e6:	4622      	mov	r2, r4
   d45e8:	4629      	mov	r1, r5
   d45ea:	f002 fbe3 	bl	d6db4 <__aeabi_atexit>
String pm10;
   d45ee:	4631      	mov	r1, r6
   d45f0:	4638      	mov	r0, r7
   d45f2:	f001 faea 	bl	d5bca <_ZN6StringC1EPK19__FlashStringHelper>
   d45f6:	4622      	mov	r2, r4
   d45f8:	4629      	mov	r1, r5
   d45fa:	4638      	mov	r0, r7
    jw.insertKeyValue("Dust1", p1);
    jw.insertKeyValue("Dust25", p25);
    jw.insertKeyValue("Dust10", p10);
  }
  Particle.publish("DustReadings", jw.getBuffer(),PRIVATE) ;
}
   d45fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#define OLED_ADDR  0x3C
Adafruit_SSD1306 display(-1);     // the -1 means there is no reset pin
#define SSD1306_128_64
String pm1;
String pm25;
String pm10;
   d4600:	f002 bbd8 	b.w	d6db4 <__aeabi_atexit>
   d4604:	2003e36c 	.word	0x2003e36c
   d4608:	2003e374 	.word	0x2003e374
   d460c:	2003e340 	.word	0x2003e340
   d4610:	000d7ad4 	.word	0x000d7ad4
   d4614:	2003e344 	.word	0x2003e344
   d4618:	2003e358 	.word	0x2003e358
   d461c:	000d40c9 	.word	0x000d40c9
   d4620:	000d5b3d 	.word	0x000d5b3d
   d4624:	2003e398 	.word	0x2003e398
   d4628:	2003e35c 	.word	0x2003e35c

000d462c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d462c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   d462e:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   d4630:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
   d4634:	2c02      	cmp	r4, #2
   d4636:	d008      	beq.n	d464a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
   d4638:	2c03      	cmp	r4, #3
   d463a:	d00f      	beq.n	d465c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
   d463c:	2c01      	cmp	r4, #1
   d463e:	d170      	bne.n	d4722 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   d4640:	8904      	ldrh	r4, [r0, #8]
   d4642:	3c01      	subs	r4, #1
   d4644:	1aa2      	subs	r2, r4, r2
   d4646:	b212      	sxth	r2, r2
      break;
   d4648:	e00c      	b.n	d4664 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d464a:	8944      	ldrh	r4, [r0, #10]
   d464c:	3c01      	subs	r4, #1
   d464e:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
   d4650:	8904      	ldrh	r4, [r0, #8]
   d4652:	1ae4      	subs	r4, r4, r3
   d4654:	1a61      	subs	r1, r4, r1
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
   d4656:	b212      	sxth	r2, r2
      x -= (w-1);
   d4658:	b209      	sxth	r1, r1
      break;
   d465a:	e062      	b.n	d4722 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
   d465c:	8944      	ldrh	r4, [r0, #10]
   d465e:	1ae4      	subs	r4, r4, r3
   d4660:	1a61      	subs	r1, r4, r1
   d4662:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d4664:	2a00      	cmp	r2, #0
   d4666:	db5b      	blt.n	d4720 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
   d4668:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d466c:	4294      	cmp	r4, r2
   d466e:	f340 8090 	ble.w	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d4672:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d4674:	bfbe      	ittt	lt
   d4676:	185b      	addlt	r3, r3, r1
   d4678:	b21b      	sxthlt	r3, r3
    __y = 0;
   d467a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d467c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   d4680:	18cc      	adds	r4, r1, r3
   d4682:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d4684:	bfc4      	itt	gt
   d4686:	1a43      	subgt	r3, r0, r1
   d4688:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d468a:	2b00      	cmp	r3, #0
   d468c:	f340 8081 	ble.w	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4690:	b2c9      	uxtb	r1, r1


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d4692:	08c8      	lsrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d4694:	4f3f      	ldr	r7, [pc, #252]	; (d4794 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   d4696:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d469a:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d469e:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d46a0:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d46a4:	d017      	beq.n	d46d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d46a6:	f1c1 0108 	rsb	r1, r1, #8
   d46aa:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d46ac:	493a      	ldr	r1, [pc, #232]	; (d4798 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d46ae:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d46b0:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d46b2:	bf3f      	itttt	cc
   d46b4:	ebc3 0e00 	rsbcc	lr, r3, r0
   d46b8:	21ff      	movcc	r1, #255	; 0xff
   d46ba:	fa41 f10e 	asrcc.w	r1, r1, lr
   d46be:	400e      	andcc	r6, r1
   d46c0:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
   d46c2:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d46c4:	bf0c      	ite	eq
   d46c6:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
   d46c8:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d46ca:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d46cc:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d46ce:	d360      	bcc.n	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
   d46d0:	1a18      	subs	r0, r3, r0
   d46d2:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
   d46d4:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d46d6:	2b07      	cmp	r3, #7
   d46d8:	d917      	bls.n	d470a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d46da:	2d01      	cmp	r5, #1
   d46dc:	bf0c      	ite	eq
   d46de:	20ff      	moveq	r0, #255	; 0xff
   d46e0:	2000      	movne	r0, #0
   d46e2:	f104 0180 	add.w	r1, r4, #128	; 0x80
   d46e6:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d46e8:	3a08      	subs	r2, #8
   d46ea:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   d46ec:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d46ee:	f801 0c80 	strb.w	r0, [r1, #-128]
   d46f2:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d46f6:	d8f7      	bhi.n	d46e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
   d46f8:	f1a3 0208 	sub.w	r2, r3, #8
   d46fc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   d4700:	3201      	adds	r2, #1
   d4702:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
   d4706:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d470a:	2b00      	cmp	r3, #0
   d470c:	d041      	beq.n	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d470e:	4a23      	ldr	r2, [pc, #140]	; (d479c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
   d4710:	5cd2      	ldrb	r2, [r2, r3]
   d4712:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
   d4714:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d4716:	bf0c      	ite	eq
   d4718:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   d471a:	4393      	bicne	r3, r2
   d471c:	7023      	strb	r3, [r4, #0]
   d471e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4720:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d4722:	2a00      	cmp	r2, #0
   d4724:	db35      	blt.n	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4726:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d472a:	4294      	cmp	r4, r2
   d472c:	dd31      	ble.n	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d472e:	2900      	cmp	r1, #0
    w += x;
   d4730:	bfbc      	itt	lt
   d4732:	18c9      	addlt	r1, r1, r3
   d4734:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d4736:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d473a:	bfb8      	it	lt
   d473c:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d473e:	18ce      	adds	r6, r1, r3
   d4740:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d4742:	bfc4      	itt	gt
   d4744:	1a63      	subgt	r3, r4, r1
   d4746:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d4748:	2b00      	cmp	r3, #0
   d474a:	dd22      	ble.n	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d474c:	10d0      	asrs	r0, r2, #3
  // and offset x columns in
  pBuf += x;
   d474e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
   d4752:	4810      	ldr	r0, [pc, #64]	; (d4794 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
   d4754:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4758:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
   d475a:	2001      	movs	r0, #1
   d475c:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
   d4760:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d4762:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
   d4764:	d109      	bne.n	d477a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
   d4766:	3b01      	subs	r3, #1
   d4768:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
   d476a:	1c5c      	adds	r4, r3, #1
   d476c:	d011      	beq.n	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d476e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d4772:	4310      	orrs	r0, r2
   d4774:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4778:	e7f5      	b.n	d4766 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
   d477a:	43d2      	mvns	r2, r2
   d477c:	b2d2      	uxtb	r2, r2
   d477e:	3b01      	subs	r3, #1
   d4780:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
   d4782:	1c58      	adds	r0, r3, #1
   d4784:	d005      	beq.n	d4792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
   d4786:	f811 0b01 	ldrb.w	r0, [r1], #1
   d478a:	4010      	ands	r0, r2
   d478c:	f801 0c01 	strb.w	r0, [r1, #-1]
   d4790:	e7f5      	b.n	d477e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   d4792:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4794:	2003ded8 	.word	0x2003ded8
   d4798:	2003ded0 	.word	0x2003ded0
   d479c:	2003dec8 	.word	0x2003dec8

000d47a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d47a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
   d47a2:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   d47a4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
   d47a8:	2c02      	cmp	r4, #2
   d47aa:	d008      	beq.n	d47be <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
   d47ac:	2c03      	cmp	r4, #3
   d47ae:	d00f      	beq.n	d47d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
   d47b0:	2c01      	cmp	r4, #1
   d47b2:	d112      	bne.n	d47da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
   d47b4:	8904      	ldrh	r4, [r0, #8]
   d47b6:	1ae4      	subs	r4, r4, r3
   d47b8:	1aa2      	subs	r2, r4, r2
   d47ba:	b212      	sxth	r2, r2
      break;
   d47bc:	e06d      	b.n	d489a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d47be:	8904      	ldrh	r4, [r0, #8]
   d47c0:	3c01      	subs	r4, #1
   d47c2:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d47c4:	8944      	ldrh	r4, [r0, #10]
   d47c6:	1ae4      	subs	r4, r4, r3
   d47c8:	1aa2      	subs	r2, r4, r2
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
   d47ca:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
   d47cc:	b212      	sxth	r2, r2
      break;
   d47ce:	e004      	b.n	d47da <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
   d47d0:	8944      	ldrh	r4, [r0, #10]
   d47d2:	3c01      	subs	r4, #1
   d47d4:	1a61      	subs	r1, r4, r1
   d47d6:	b209      	sxth	r1, r1
      break;
   d47d8:	e05f      	b.n	d489a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   d47da:	2900      	cmp	r1, #0
   d47dc:	db5c      	blt.n	d4898 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
   d47de:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d47e2:	428c      	cmp	r4, r1
   d47e4:	f340 8091 	ble.w	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   d47e8:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   d47ea:	bfbc      	itt	lt
   d47ec:	18d2      	addlt	r2, r2, r3
   d47ee:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d47f0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
   d47f4:	bfb8      	it	lt
   d47f6:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   d47f8:	18d4      	adds	r4, r2, r3
   d47fa:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
   d47fc:	bfc4      	itt	gt
   d47fe:	1a83      	subgt	r3, r0, r2
   d4800:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   d4802:	2b00      	cmp	r3, #0
   d4804:	f340 8081 	ble.w	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
   d4808:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d480a:	4e40      	ldr	r6, [pc, #256]	; (d490c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
   d480c:	b2da      	uxtb	r2, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d480e:	08e3      	lsrs	r3, r4, #3
  // and offset x columns in
  pBuf += x;
   d4810:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d4814:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d4818:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   d481c:	d017      	beq.n	d484e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   d481e:	f1c4 0408 	rsb	r4, r4, #8
   d4822:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4824:	4c3a      	ldr	r4, [pc, #232]	; (d4910 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   d4826:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   d4828:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
   d482a:	bf3f      	itttt	cc
   d482c:	ebc2 0e00 	rsbcc	lr, r2, r0
   d4830:	24ff      	movcc	r4, #255	; 0xff
   d4832:	fa44 f40e 	asrcc.w	r4, r4, lr
   d4836:	4027      	andcc	r7, r4
   d4838:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
   d483a:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d483c:	bf0c      	ite	eq
   d483e:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
   d4840:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4842:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
   d4844:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   d4846:	d360      	bcc.n	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
   d4848:	1a10      	subs	r0, r2, r0
   d484a:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
   d484c:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   d484e:	2a07      	cmp	r2, #7
   d4850:	d917      	bls.n	d4882 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   d4852:	2d01      	cmp	r5, #1
   d4854:	bf0c      	ite	eq
   d4856:	24ff      	moveq	r4, #255	; 0xff
   d4858:	2400      	movne	r4, #0
   d485a:	f103 0080 	add.w	r0, r3, #128	; 0x80
   d485e:	4611      	mov	r1, r2

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   d4860:	3908      	subs	r1, #8
   d4862:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
   d4864:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
   d4866:	f800 4c80 	strb.w	r4, [r0, #-128]
   d486a:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
   d486e:	d8f7      	bhi.n	d4860 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
   d4870:	f1a2 0108 	sub.w	r1, r2, #8
   d4874:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   d4878:	3101      	adds	r1, #1
   d487a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
   d487e:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   d4882:	2a00      	cmp	r2, #0
   d4884:	d041      	beq.n	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   d4886:	4923      	ldr	r1, [pc, #140]	; (d4914 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
   d4888:	5c89      	ldrb	r1, [r1, r2]
   d488a:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
   d488c:	2d01      	cmp	r5, #1
      *pBuf |= mask;
   d488e:	bf0c      	ite	eq
   d4890:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
   d4892:	438a      	bicne	r2, r1
   d4894:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
   d4896:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4898:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
   d489a:	2900      	cmp	r1, #0
   d489c:	db35      	blt.n	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d489e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d48a2:	428c      	cmp	r4, r1
   d48a4:	dd31      	ble.n	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
   d48a6:	2a00      	cmp	r2, #0
    w += x;
   d48a8:	bfbc      	itt	lt
   d48aa:	18d2      	addlt	r2, r2, r3
   d48ac:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d48ae:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
   d48b2:	bfb8      	it	lt
   d48b4:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
   d48b6:	18d6      	adds	r6, r2, r3
   d48b8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   d48ba:	bfc4      	itt	gt
   d48bc:	1aa3      	subgt	r3, r4, r2
   d48be:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
   d48c0:	2b00      	cmp	r3, #0
   d48c2:	dd22      	ble.n	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   d48c4:	10c8      	asrs	r0, r1, #3
  // and offset x columns in
  pBuf += x;
   d48c6:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
   d48ca:	4810      	ldr	r0, [pc, #64]	; (d490c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
   d48cc:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   d48d0:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
   d48d2:	2201      	movs	r2, #1
   d48d4:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
   d48d8:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
   d48da:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
   d48dc:	d109      	bne.n	d48f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
   d48de:	1e5a      	subs	r2, r3, #1
   d48e0:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
   d48e2:	1c5c      	adds	r4, r3, #1
   d48e4:	d011      	beq.n	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d48e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   d48ea:	430a      	orrs	r2, r1
   d48ec:	f800 2c01 	strb.w	r2, [r0, #-1]
   d48f0:	e7f5      	b.n	d48de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
   d48f2:	43c9      	mvns	r1, r1
   d48f4:	b2c9      	uxtb	r1, r1
   d48f6:	1e5a      	subs	r2, r3, #1
   d48f8:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
   d48fa:	1c5a      	adds	r2, r3, #1
   d48fc:	d005      	beq.n	d490a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
   d48fe:	f810 2b01 	ldrb.w	r2, [r0], #1
   d4902:	400a      	ands	r2, r1
   d4904:	f800 2c01 	strb.w	r2, [r0, #-1]
   d4908:	e7f5      	b.n	d48f6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   d490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d490c:	2003ded8 	.word	0x2003ded8
   d4910:	2003ded0 	.word	0x2003ded0
   d4914:	2003dec8 	.word	0x2003dec8

000d4918 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d4918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d491a:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d491c:	4606      	mov	r6, r0
   d491e:	4614      	mov	r4, r2
   d4920:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   d4922:	db3f      	blt.n	d49a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4924:	f000 fbbc 	bl	d50a0 <_ZN12Adafruit_GFX5widthEv>
   d4928:	4285      	cmp	r5, r0
   d492a:	da3b      	bge.n	d49a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d492c:	2c00      	cmp	r4, #0
   d492e:	db39      	blt.n	d49a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
   d4930:	4630      	mov	r0, r6
   d4932:	f000 fbb8 	bl	d50a6 <_ZN12Adafruit_GFX6heightEv>
   d4936:	4284      	cmp	r4, r0
   d4938:	da34      	bge.n	d49a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d493a:	4630      	mov	r0, r6
   d493c:	f000 fbae 	bl	d509c <_ZN12Adafruit_GFX11getRotationEv>
   d4940:	2802      	cmp	r0, #2
   d4942:	d127      	bne.n	d4994 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4944:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   d4946:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4948:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   d494a:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d494c:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
   d494e:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
   d4950:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
   d4952:	b204      	sxth	r4, r0
   d4954:	e006      	b.n	d4964 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4956:	2801      	cmp	r0, #1
   d4958:	d104      	bne.n	d4964 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
   d495a:	8933      	ldrh	r3, [r6, #8]
   d495c:	3b01      	subs	r3, #1
   d495e:	1b1b      	subs	r3, r3, r4
   d4960:	462c      	mov	r4, r5
   d4962:	b21d      	sxth	r5, r3
   d4964:	2008      	movs	r0, #8
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4966:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d4968:	fb94 f0f0 	sdiv	r0, r4, r0
   d496c:	b200      	sxth	r0, r0
   d496e:	4b0e      	ldr	r3, [pc, #56]	; (d49a8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
   d4970:	f004 0207 	and.w	r2, r4, #7
   d4974:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
   d4978:	d104      	bne.n	d4984 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   d497a:	4097      	lsls	r7, r2
   d497c:	5c5a      	ldrb	r2, [r3, r1]
   d497e:	4317      	orrs	r7, r2
   d4980:	545f      	strb	r7, [r3, r1]
   d4982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   d4984:	5c58      	ldrb	r0, [r3, r1]
   d4986:	2701      	movs	r7, #1
   d4988:	fa07 f202 	lsl.w	r2, r7, r2
   d498c:	ea20 0202 	bic.w	r2, r0, r2
   d4990:	545a      	strb	r2, [r3, r1]
   d4992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
   d4994:	2803      	cmp	r0, #3
   d4996:	d1de      	bne.n	d4956 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
   d4998:	8973      	ldrh	r3, [r6, #10]
   d499a:	3b01      	subs	r3, #1
   d499c:	1b5b      	subs	r3, r3, r5
   d499e:	4625      	mov	r5, r4
   d49a0:	b21c      	sxth	r4, r3
   d49a2:	e7df      	b.n	d4964 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
   d49a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d49a6:	bf00      	nop
   d49a8:	2003ded8 	.word	0x2003ded8

000d49ac <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d49ac:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d49ae:	2240      	movs	r2, #64	; 0x40
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   d49b0:	4604      	mov	r4, r0
   d49b2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   d49b4:	2180      	movs	r1, #128	; 0x80
   d49b6:	f000 fa87 	bl	d4ec8 <_ZN12Adafruit_GFXC1Ess>
   d49ba:	4b06      	ldr	r3, [pc, #24]	; (d49d4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   d49bc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   d49be:	23ff      	movs	r3, #255	; 0xff
   d49c0:	7763      	strb	r3, [r4, #29]
   d49c2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   d49c6:	77e3      	strb	r3, [r4, #31]
   d49c8:	77a3      	strb	r3, [r4, #30]
  rst = reset;
   d49ca:	f884 5020 	strb.w	r5, [r4, #32]
}
   d49ce:	4620      	mov	r0, r4
   d49d0:	bd38      	pop	{r3, r4, r5, pc}
   d49d2:	bf00      	nop
   d49d4:	000d7430 	.word	0x000d7430

000d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d49d8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   d49da:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d49de:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   d49e0:	4604      	mov	r4, r0
   d49e2:	460d      	mov	r5, r1
  if (sid != -1)
   d49e4:	d028      	beq.n	d4a38 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x60>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d49e6:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   d49ea:	2101      	movs	r1, #1
   d49ec:	b280      	uxth	r0, r0
   d49ee:	f002 f944 	bl	d6c7a <digitalWrite>
    digitalWrite(dc, LOW);
   d49f2:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d49f6:	2100      	movs	r1, #0
   d49f8:	b280      	uxth	r0, r0
   d49fa:	f002 f93e 	bl	d6c7a <digitalWrite>
    digitalWrite(cs, LOW);
   d49fe:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a02:	2100      	movs	r1, #0
   d4a04:	b280      	uxth	r0, r0
   d4a06:	f002 f938 	bl	d6c7a <digitalWrite>
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4a0a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4a0e:	b12b      	cbz	r3, d4a1c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>
    (void)SPI.transfer(d);
   d4a10:	f002 f970 	bl	d6cf4 <_ZN8particle7globals11instanceSpiEv>
   d4a14:	4629      	mov	r1, r5
   d4a16:	f001 f851 	bl	d5abc <_ZN8SPIClass8transferEh>
   d4a1a:	e005      	b.n	d4a28 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4a1c:	462b      	mov	r3, r5
   d4a1e:	2201      	movs	r2, #1
   d4a20:	7fa1      	ldrb	r1, [r4, #30]
   d4a22:	7f60      	ldrb	r0, [r4, #29]
   d4a24:	f002 f942 	bl	d6cac <shiftOut>
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4a28:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a2c:	2101      	movs	r1, #1
   d4a2e:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
   d4a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
   d4a34:	f002 b921 	b.w	d6c7a <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
   d4a38:	f002 f996 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d4a3c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4a40:	f001 ff3b 	bl	d68ba <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   d4a44:	f002 f990 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d4a48:	6803      	ldr	r3, [r0, #0]
   d4a4a:	2100      	movs	r1, #0
   d4a4c:	689b      	ldr	r3, [r3, #8]
   d4a4e:	4798      	blx	r3
    Wire.write(c);
   d4a50:	f002 f98a 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d4a54:	6803      	ldr	r3, [r0, #0]
   d4a56:	4629      	mov	r1, r5
   d4a58:	689b      	ldr	r3, [r3, #8]
   d4a5a:	4798      	blx	r3
    Wire.endTransmission();
   d4a5c:	f002 f984 	bl	d6d68 <_Z19__fetch_global_Wirev>
  }
}
   d4a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
   d4a64:	f001 bf30 	b.w	d68c8 <_ZN7TwoWire15endTransmissionEv>

000d4a68 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   d4a68:	b538      	push	{r3, r4, r5, lr}
   d4a6a:	4604      	mov	r4, r0
   d4a6c:	460d      	mov	r5, r1
  _vccstate = vccstate;
   d4a6e:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
   d4a70:	f990 301d 	ldrsb.w	r3, [r0, #29]
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
   d4a74:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
   d4a76:	3301      	adds	r3, #1
   d4a78:	d037      	beq.n	d4aea <_ZN16Adafruit_SSD13065beginEhh+0x82>
    pinMode(dc, OUTPUT);
   d4a7a:	f990 001f 	ldrsb.w	r0, [r0, #31]
   d4a7e:	2101      	movs	r1, #1
   d4a80:	b280      	uxth	r0, r0
   d4a82:	f002 f8e9 	bl	d6c58 <pinMode>
    pinMode(cs, OUTPUT);
   d4a86:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4a8a:	2101      	movs	r1, #1
   d4a8c:	b280      	uxth	r0, r0
   d4a8e:	f002 f8e3 	bl	d6c58 <pinMode>
    if (!hwSPI){
   d4a92:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4a96:	b95b      	cbnz	r3, d4ab0 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
   d4a98:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4a9c:	2101      	movs	r1, #1
   d4a9e:	b280      	uxth	r0, r0
   d4aa0:	f002 f8da 	bl	d6c58 <pinMode>
    	pinMode(sclk, OUTPUT);
   d4aa4:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4aa8:	2101      	movs	r1, #1
   d4aaa:	b280      	uxth	r0, r0
   d4aac:	f002 f8d4 	bl	d6c58 <pinMode>
    	}
    if (hwSPI){
   d4ab0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4ab4:	b1eb      	cbz	r3, d4af2 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
        digitalWrite(cs, HIGH);
   d4ab6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4aba:	2101      	movs	r1, #1
   d4abc:	b280      	uxth	r0, r0
   d4abe:	f002 f8dc 	bl	d6c7a <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
   d4ac2:	f002 f917 	bl	d6cf4 <_ZN8particle7globals11instanceSpiEv>
   d4ac6:	2101      	movs	r1, #1
   d4ac8:	f000 ff69 	bl	d599e <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
   d4acc:	f002 f912 	bl	d6cf4 <_ZN8particle7globals11instanceSpiEv>
   d4ad0:	2110      	movs	r1, #16
   d4ad2:	f000 ffcf 	bl	d5a74 <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
   d4ad6:	f002 f90d 	bl	d6cf4 <_ZN8particle7globals11instanceSpiEv>
   d4ada:	2100      	movs	r1, #0
   d4adc:	f000 ff70 	bl	d59c0 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
   d4ae0:	f002 f908 	bl	d6cf4 <_ZN8particle7globals11instanceSpiEv>
   d4ae4:	f000 ff4a 	bl	d597c <_ZN8SPIClass5beginEv>
   d4ae8:	e003      	b.n	d4af2 <_ZN16Adafruit_SSD13065beginEhh+0x8a>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
   d4aea:	f002 f93d 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d4aee:	f001 fea9 	bl	d6844 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
   d4af2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4af6:	2101      	movs	r1, #1
   d4af8:	b280      	uxth	r0, r0
   d4afa:	f002 f8ad 	bl	d6c58 <pinMode>
  digitalWrite(rst, HIGH);
   d4afe:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4b02:	2101      	movs	r1, #1
   d4b04:	b280      	uxth	r0, r0
   d4b06:	f002 f8b8 	bl	d6c7a <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
   d4b0a:	2001      	movs	r0, #1
   d4b0c:	f001 f950 	bl	d5db0 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
   d4b10:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4b14:	2100      	movs	r1, #0
   d4b16:	b280      	uxth	r0, r0
   d4b18:	f002 f8af 	bl	d6c7a <digitalWrite>
  // wait 10ms
  delay(10);
   d4b1c:	200a      	movs	r0, #10
   d4b1e:	f001 f947 	bl	d5db0 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
   d4b22:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4b26:	2101      	movs	r1, #1
   d4b28:	b280      	uxth	r0, r0
   d4b2a:	f002 f8a6 	bl	d6c7a <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   d4b2e:	4620      	mov	r0, r4
   d4b30:	21ae      	movs	r1, #174	; 0xae
   d4b32:	f7ff ff51 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   d4b36:	4620      	mov	r0, r4
   d4b38:	21d5      	movs	r1, #213	; 0xd5
   d4b3a:	f7ff ff4d 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   d4b3e:	4620      	mov	r0, r4
   d4b40:	2180      	movs	r1, #128	; 0x80
   d4b42:	f7ff ff49 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   d4b46:	4620      	mov	r0, r4
   d4b48:	21a8      	movs	r1, #168	; 0xa8
   d4b4a:	f7ff ff45 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   d4b4e:	4620      	mov	r0, r4
   d4b50:	213f      	movs	r1, #63	; 0x3f
   d4b52:	f7ff ff41 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   d4b56:	4620      	mov	r0, r4
   d4b58:	21d3      	movs	r1, #211	; 0xd3
   d4b5a:	f7ff ff3d 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   d4b5e:	4620      	mov	r0, r4
   d4b60:	2100      	movs	r1, #0
   d4b62:	f7ff ff39 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   d4b66:	4620      	mov	r0, r4
   d4b68:	2140      	movs	r1, #64	; 0x40
   d4b6a:	f7ff ff35 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   d4b6e:	218d      	movs	r1, #141	; 0x8d
   d4b70:	4620      	mov	r0, r4
   d4b72:	f7ff ff31 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4b76:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   d4b78:	bf0c      	ite	eq
   d4b7a:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
   d4b7c:	2114      	movne	r1, #20
   d4b7e:	4620      	mov	r0, r4
   d4b80:	f7ff ff2a 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   d4b84:	4620      	mov	r0, r4
   d4b86:	2120      	movs	r1, #32
   d4b88:	f7ff ff26 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   d4b8c:	4620      	mov	r0, r4
   d4b8e:	2100      	movs	r1, #0
   d4b90:	f7ff ff22 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   d4b94:	4620      	mov	r0, r4
   d4b96:	21a1      	movs	r1, #161	; 0xa1
   d4b98:	f7ff ff1e 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	21c8      	movs	r1, #200	; 0xc8
   d4ba0:	f7ff ff1a 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   d4ba4:	4620      	mov	r0, r4
   d4ba6:	21da      	movs	r1, #218	; 0xda
   d4ba8:	f7ff ff16 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   d4bac:	4620      	mov	r0, r4
   d4bae:	2112      	movs	r1, #18
   d4bb0:	f7ff ff12 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   d4bb4:	2181      	movs	r1, #129	; 0x81
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	f7ff ff0e 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4bbc:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   d4bbe:	bf0c      	ite	eq
   d4bc0:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
   d4bc2:	21cf      	movne	r1, #207	; 0xcf
   d4bc4:	4620      	mov	r0, r4
   d4bc6:	f7ff ff07 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   d4bca:	21d9      	movs	r1, #217	; 0xd9
   d4bcc:	4620      	mov	r0, r4
   d4bce:	f7ff ff03 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   d4bd2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   d4bd4:	bf0c      	ite	eq
   d4bd6:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
   d4bd8:	21f1      	movne	r1, #241	; 0xf1
   d4bda:	4620      	mov	r0, r4
   d4bdc:	f7ff fefc 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   d4be0:	4620      	mov	r0, r4
   d4be2:	21db      	movs	r1, #219	; 0xdb
   d4be4:	f7ff fef8 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   d4be8:	4620      	mov	r0, r4
   d4bea:	2140      	movs	r1, #64	; 0x40
   d4bec:	f7ff fef4 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	21a4      	movs	r1, #164	; 0xa4
   d4bf4:	f7ff fef0 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	21a6      	movs	r1, #166	; 0xa6
   d4bfc:	f7ff feec 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4c00:	4620      	mov	r0, r4
   d4c02:	21af      	movs	r1, #175	; 0xaf
}
   d4c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   d4c08:	f7ff bee6 	b.w	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

000d4c0c <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   d4c10:	2121      	movs	r1, #33	; 0x21
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
   d4c12:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   d4c14:	f7ff fee0 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   d4c18:	2100      	movs	r1, #0
   d4c1a:	4620      	mov	r0, r4
   d4c1c:	f7ff fedc 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   d4c20:	217f      	movs	r1, #127	; 0x7f
   d4c22:	4620      	mov	r0, r4
   d4c24:	f7ff fed8 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
   d4c28:	2122      	movs	r1, #34	; 0x22
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	f7ff fed4 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   d4c30:	2100      	movs	r1, #0
   d4c32:	4620      	mov	r0, r4
   d4c34:	f7ff fed0 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   d4c38:	2107      	movs	r1, #7
   d4c3a:	4620      	mov	r0, r4
   d4c3c:	f7ff fecc 	bl	d49d8 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
   d4c40:	f994 301d 	ldrsb.w	r3, [r4, #29]
   d4c44:	f8df 80bc 	ldr.w	r8, [pc, #188]	; d4d04 <_ZN16Adafruit_SSD13067displayEv+0xf8>
   d4c48:	3301      	adds	r3, #1
   d4c4a:	d035      	beq.n	d4cb8 <_ZN16Adafruit_SSD13067displayEv+0xac>
  {
    // SPI
    digitalWrite(cs, HIGH);
   d4c4c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c50:	2101      	movs	r1, #1
   d4c52:	b280      	uxth	r0, r0
   d4c54:	f002 f811 	bl	d6c7a <digitalWrite>
    digitalWrite(dc, HIGH);
   d4c58:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4c5c:	2101      	movs	r1, #1
   d4c5e:	b280      	uxth	r0, r0
   d4c60:	f002 f80b 	bl	d6c7a <digitalWrite>
    digitalWrite(cs, LOW);
   d4c64:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4c68:	2100      	movs	r1, #0
   d4c6a:	b280      	uxth	r0, r0
   d4c6c:	f002 f805 	bl	d6c7a <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4c70:	2001      	movs	r0, #1
   d4c72:	f000 fc45 	bl	d5500 <HAL_Delay_Microseconds>
   d4c76:	2500      	movs	r5, #0
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4c78:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
   d4c7c:	f818 6005 	ldrb.w	r6, [r8, r5]
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
   d4c80:	b12b      	cbz	r3, d4c8e <_ZN16Adafruit_SSD13067displayEv+0x82>
    (void)SPI.transfer(d);
   d4c82:	f002 f837 	bl	d6cf4 <_ZN8particle7globals11instanceSpiEv>
   d4c86:	4631      	mov	r1, r6
   d4c88:	f000 ff18 	bl	d5abc <_ZN8SPIClass8transferEh>
   d4c8c:	e005      	b.n	d4c9a <_ZN16Adafruit_SSD13067displayEv+0x8e>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   d4c8e:	4633      	mov	r3, r6
   d4c90:	2201      	movs	r2, #1
   d4c92:	7fa1      	ldrb	r1, [r4, #30]
   d4c94:	7f60      	ldrb	r0, [r4, #29]
   d4c96:	f002 f809 	bl	d6cac <shiftOut>
   d4c9a:	3501      	adds	r5, #1
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4c9c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4ca0:	d1ea      	bne.n	d4c78 <_ZN16Adafruit_SSD13067displayEv+0x6c>
   d4ca2:	2001      	movs	r0, #1
   d4ca4:	f000 fc2c 	bl	d5500 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4ca8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   d4cac:	2101      	movs	r1, #1
   d4cae:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
   d4cb4:	f001 bfe1 	b.w	d6c7a <digitalWrite>
   d4cb8:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
   d4cba:	f002 f855 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d4cbe:	f994 101b 	ldrsb.w	r1, [r4, #27]
   d4cc2:	f001 fdfa 	bl	d68ba <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   d4cc6:	f002 f84f 	bl	d6d68 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4cca:	6803      	ldr	r3, [r0, #0]
   d4ccc:	2140      	movs	r1, #64	; 0x40
   d4cce:	689b      	ldr	r3, [r3, #8]
   d4cd0:	4798      	blx	r3
   d4cd2:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
   d4cd4:	f002 f848 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d4cd8:	19af      	adds	r7, r5, r6
   d4cda:	6803      	ldr	r3, [r0, #0]
   d4cdc:	b2bf      	uxth	r7, r7
   d4cde:	689b      	ldr	r3, [r3, #8]
   d4ce0:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4ce4:	3601      	adds	r6, #1
   d4ce6:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
   d4ce8:	2e10      	cmp	r6, #16
   d4cea:	d1f3      	bne.n	d4cd4 <_ZN16Adafruit_SSD13067displayEv+0xc8>
   d4cec:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
   d4cee:	f002 f83b 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d4cf2:	b2ad      	uxth	r5, r5
   d4cf4:	f001 fde8 	bl	d68c8 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   d4cf8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   d4cfc:	d1dd      	bne.n	d4cba <_ZN16Adafruit_SSD13067displayEv+0xae>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
   d4cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d02:	bf00      	nop
   d4d04:	2003ded8 	.word	0x2003ded8

000d4d08 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   d4d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4d0c:	2100      	movs	r1, #0
   d4d0e:	4801      	ldr	r0, [pc, #4]	; (d4d14 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   d4d10:	f002 b9d5 	b.w	d70be <memset>
   d4d14:	2003ded8 	.word	0x2003ded8

000d4d18 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4d18:	f000 bb7a 	b.w	d5410 <HAL_Pin_Map>

000d4d1c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d20:	b085      	sub	sp, #20
   d4d22:	461e      	mov	r6, r3
   d4d24:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   d4d28:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
   d4d2c:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d4d2e:	1a9a      	subs	r2, r3, r2
   d4d30:	2a00      	cmp	r2, #0
   d4d32:	bfb8      	it	lt
   d4d34:	4252      	neglt	r2, r2
   d4d36:	9200      	str	r2, [sp, #0]
   d4d38:	1a72      	subs	r2, r6, r1
   d4d3a:	2a00      	cmp	r2, #0
   d4d3c:	bfb8      	it	lt
   d4d3e:	4252      	neglt	r2, r2
   d4d40:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4d42:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4d44:	9a00      	ldr	r2, [sp, #0]
   d4d46:	9901      	ldr	r1, [sp, #4]
   d4d48:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   d4d4a:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4d4c:	dd05      	ble.n	d4d5a <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
   d4d4e:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
   d4d50:	461e      	mov	r6, r3
   d4d52:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
   d4d54:	4622      	mov	r2, r4
    swap(x0, y0);
   d4d56:	462c      	mov	r4, r5
   d4d58:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4d5a:	42b4      	cmp	r4, r6
   d4d5c:	dd05      	ble.n	d4d6a <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
   d4d5e:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   d4d60:	461d      	mov	r5, r3
   d4d62:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
   d4d64:	4622      	mov	r2, r4
   d4d66:	4634      	mov	r4, r6
   d4d68:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4d6a:	1b5a      	subs	r2, r3, r5
   d4d6c:	2a00      	cmp	r2, #0
   d4d6e:	bfb8      	it	lt
   d4d70:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4d72:	ebc4 0806 	rsb	r8, r4, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4d76:	429d      	cmp	r5, r3
   d4d78:	bfb4      	ite	lt
   d4d7a:	2301      	movlt	r3, #1
   d4d7c:	f04f 33ff 	movge.w	r3, #4294967295
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
   d4d80:	fa1f f888 	uxth.w	r8, r8
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   d4d84:	9302      	str	r3, [sp, #8]
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
   d4d86:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
   d4d88:	fa0f f788 	sxth.w	r7, r8
   d4d8c:	2202      	movs	r2, #2
   d4d8e:	fb97 f7f2 	sdiv	r7, r7, r2
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4d92:	42b4      	cmp	r4, r6
   d4d94:	dc1f      	bgt.n	d4dd6 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
   d4d96:	9a01      	ldr	r2, [sp, #4]
   d4d98:	9b00      	ldr	r3, [sp, #0]
   d4d9a:	4293      	cmp	r3, r2
   d4d9c:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
   d4da0:	bfc8      	it	gt
   d4da2:	4622      	movgt	r2, r4
   d4da4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4da8:	bfc8      	it	gt
   d4daa:	4629      	movgt	r1, r5
   d4dac:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
   d4dae:	bfdc      	itt	le
   d4db0:	462a      	movle	r2, r5
   d4db2:	4621      	movle	r1, r4
   d4db4:	4648      	mov	r0, r9
   d4db6:	47d8      	blx	fp
    }
    err -= dy;
   d4db8:	9b03      	ldr	r3, [sp, #12]
   d4dba:	1aff      	subs	r7, r7, r3
   d4dbc:	b2bb      	uxth	r3, r7
   d4dbe:	b21f      	sxth	r7, r3
    if (err < 0) {
   d4dc0:	2f00      	cmp	r7, #0
   d4dc2:	da05      	bge.n	d4dd0 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
   d4dc4:	9a02      	ldr	r2, [sp, #8]
      err += dx;
   d4dc6:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
   d4dca:	4415      	add	r5, r2
   d4dcc:	b22d      	sxth	r5, r5
      err += dx;
   d4dce:	b23f      	sxth	r7, r7
   d4dd0:	3401      	adds	r4, #1
   d4dd2:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
   d4dd4:	e7dd      	b.n	d4d92 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
   d4dd6:	b005      	add	sp, #20
   d4dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4ddc <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4ddc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4de0:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   d4de4:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4de6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   d4dea:	9600      	str	r6, [sp, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4dec:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   d4dee:	69ff      	ldr	r7, [r7, #28]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   d4df0:	4691      	mov	r9, r2
   d4df2:	460d      	mov	r5, r1
   d4df4:	4698      	mov	r8, r3
  drawFastHLine(x, y, w, color);
   d4df6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   d4df8:	6823      	ldr	r3, [r4, #0]
   d4dfa:	9600      	str	r6, [sp, #0]
   d4dfc:	f10a 32ff 	add.w	r2, sl, #4294967295
   d4e00:	444a      	add	r2, r9
   d4e02:	69df      	ldr	r7, [r3, #28]
   d4e04:	4629      	mov	r1, r5
   d4e06:	4643      	mov	r3, r8
   d4e08:	4620      	mov	r0, r4
   d4e0a:	b212      	sxth	r2, r2
   d4e0c:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   d4e0e:	6823      	ldr	r3, [r4, #0]
   d4e10:	9600      	str	r6, [sp, #0]
   d4e12:	699f      	ldr	r7, [r3, #24]
   d4e14:	464a      	mov	r2, r9
   d4e16:	4653      	mov	r3, sl
   d4e18:	4629      	mov	r1, r5
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   d4e1e:	6823      	ldr	r3, [r4, #0]
   d4e20:	960a      	str	r6, [sp, #40]	; 0x28
   d4e22:	f108 31ff 	add.w	r1, r8, #4294967295
   d4e26:	4429      	add	r1, r5
   d4e28:	699d      	ldr	r5, [r3, #24]
   d4e2a:	464a      	mov	r2, r9
   d4e2c:	4653      	mov	r3, sl
   d4e2e:	b209      	sxth	r1, r1
   d4e30:	4620      	mov	r0, r4
   d4e32:	46ac      	mov	ip, r5
}
   d4e34:	b002      	add	sp, #8
   d4e36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
   d4e3a:	4760      	bx	ip

000d4e3c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   d4e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   d4e3e:	3b01      	subs	r3, #1
   d4e40:	4413      	add	r3, r2
   d4e42:	6804      	ldr	r4, [r0, #0]
   d4e44:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4e48:	9501      	str	r5, [sp, #4]
   d4e4a:	b21b      	sxth	r3, r3
   d4e4c:	9300      	str	r3, [sp, #0]
   d4e4e:	6964      	ldr	r4, [r4, #20]
   d4e50:	460b      	mov	r3, r1
   d4e52:	47a0      	blx	r4
}
   d4e54:	b003      	add	sp, #12
   d4e56:	bd30      	pop	{r4, r5, pc}

000d4e58 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   d4e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   d4e5a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   d4e5e:	6804      	ldr	r4, [r0, #0]
   d4e60:	e88d 0024 	stmia.w	sp, {r2, r5}
   d4e64:	3b01      	subs	r3, #1
   d4e66:	440b      	add	r3, r1
   d4e68:	6964      	ldr	r4, [r4, #20]
   d4e6a:	b21b      	sxth	r3, r3
   d4e6c:	47a0      	blx	r4
}
   d4e6e:	b003      	add	sp, #12
   d4e70:	bd30      	pop	{r4, r5, pc}

000d4e72 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   d4e72:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4e76:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
   d4e7a:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4e7e:	4605      	mov	r5, r0
   d4e80:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4e82:	460c      	mov	r4, r1
   d4e84:	eb01 0a03 	add.w	sl, r1, r3
   d4e88:	4554      	cmp	r4, sl
   d4e8a:	da0b      	bge.n	d4ea4 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
   d4e8c:	682b      	ldr	r3, [r5, #0]
   d4e8e:	f8cd 9000 	str.w	r9, [sp]
   d4e92:	699e      	ldr	r6, [r3, #24]
   d4e94:	4621      	mov	r1, r4
   d4e96:	4643      	mov	r3, r8
   d4e98:	463a      	mov	r2, r7
   d4e9a:	4628      	mov	r0, r5
   d4e9c:	3401      	adds	r4, #1
   d4e9e:	47b0      	blx	r6
   d4ea0:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   d4ea2:	e7f1      	b.n	d4e88 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
   d4ea4:	b002      	add	sp, #8
   d4ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4eaa <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   d4eaa:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   d4eac:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
   d4eb0:	6804      	ldr	r4, [r0, #0]
   d4eb2:	9101      	str	r1, [sp, #4]
   d4eb4:	9200      	str	r2, [sp, #0]
   d4eb6:	2200      	movs	r2, #0
   d4eb8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d4ebc:	6a64      	ldr	r4, [r4, #36]	; 0x24
   d4ebe:	4611      	mov	r1, r2
   d4ec0:	47a0      	blx	r4
}
   d4ec2:	b002      	add	sp, #8
   d4ec4:	bd10      	pop	{r4, pc}

000d4ec6 <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
   d4ec6:	4770      	bx	lr

000d4ec8 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4ec8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   d4eca:	8101      	strh	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4ecc:	2400      	movs	r4, #0
   d4ece:	4d08      	ldr	r5, [pc, #32]	; (d4ef0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d4ed0:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
   d4ed2:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
   d4ed4:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
   d4ed6:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
   d4eda:	2201      	movs	r2, #1
   d4edc:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
   d4ede:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
   d4ee0:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
   d4ee2:	8204      	strh	r4, [r0, #16]
   d4ee4:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
   d4ee6:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
   d4ee8:	82c1      	strh	r1, [r0, #22]
   d4eea:	8281      	strh	r1, [r0, #20]
  wrap      = true;
   d4eec:	7682      	strb	r2, [r0, #26]
}
   d4eee:	bd30      	pop	{r4, r5, pc}
   d4ef0:	000d7468 	.word	0x000d7468

000d4ef4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ef8:	b08f      	sub	sp, #60	; 0x3c
   d4efa:	4605      	mov	r5, r0
   d4efc:	9106      	str	r1, [sp, #24]
   d4efe:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   d4f02:	9107      	str	r1, [sp, #28]
   d4f04:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   d4f08:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
   d4f0a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   d4f0e:	9806      	ldr	r0, [sp, #24]
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
   d4f10:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68

  if((x >= _width)            || // Clip right
   d4f14:	4281      	cmp	r1, r0
   d4f16:	dd7c      	ble.n	d5012 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
   d4f18:	f9b5 100e 	ldrsh.w	r1, [r5, #14]
   d4f1c:	4291      	cmp	r1, r2
   d4f1e:	dd78      	ble.n	d5012 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
   d4f20:	2106      	movs	r1, #6
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
   d4f22:	fb11 0008 	smlabb	r0, r1, r8, r0
   d4f26:	2800      	cmp	r0, #0
   d4f28:	dd73      	ble.n	d5012 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
     ((x + 6 * size - 1) < 0) || // Clip left
   d4f2a:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
   d4f2e:	2800      	cmp	r0, #0
   d4f30:	dd6f      	ble.n	d5012 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4f32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d4f36:	b296      	uxth	r6, r2
   d4f38:	930c      	str	r3, [sp, #48]	; 0x30
   d4f3a:	f106 0308 	add.w	r3, r6, #8
   d4f3e:	b29b      	uxth	r3, r3
   d4f40:	9109      	str	r1, [sp, #36]	; 0x24
   d4f42:	2400      	movs	r4, #0
   d4f44:	930d      	str	r3, [sp, #52]	; 0x34
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
   d4f46:	2c05      	cmp	r4, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4f48:	bf1c      	itt	ne
   d4f4a:	4b33      	ldrne	r3, [pc, #204]	; (d5018 <_ZN12Adafruit_GFX8drawCharEsshtth+0x124>)
   d4f4c:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4f4e:	9605      	str	r6, [sp, #20]
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4f50:	bf16      	itet	ne
   d4f52:	191b      	addne	r3, r3, r4
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
   d4f54:	f04f 0900 	moveq.w	r9, #0
    else 
      line = pgm_read_byte(font+(c*5)+i);
   d4f58:	f813 9002 	ldrbne.w	r9, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4f5c:	9604      	str	r6, [sp, #16]
   d4f5e:	fa1f f388 	uxth.w	r3, r8
   d4f62:	9303      	str	r3, [sp, #12]
   d4f64:	9a03      	ldr	r2, [sp, #12]
   d4f66:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   d4f6a:	fb04 3202 	mla	r2, r4, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4f6e:	fa13 f384 	uxtah	r3, r3, r4
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4f72:	b212      	sxth	r2, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4f74:	b21b      	sxth	r3, r3
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4f76:	920a      	str	r2, [sp, #40]	; 0x28
   d4f78:	4637      	mov	r7, r6
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4f7a:	fa0f fa88 	sxth.w	sl, r8
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
   d4f7e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
   d4f80:	f019 0f01 	tst.w	r9, #1
   d4f84:	d011      	beq.n	d4faa <_ZN12Adafruit_GFX8drawCharEsshtth+0xb6>
        if (size == 1) // default size
   d4f86:	f1b8 0f01 	cmp.w	r8, #1
   d4f8a:	682b      	ldr	r3, [r5, #0]
   d4f8c:	d103      	bne.n	d4f96 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa2>
          drawPixel(x+i, y+j, color);
   d4f8e:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4f92:	9b07      	ldr	r3, [sp, #28]
   d4f94:	e014      	b.n	d4fc0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
   d4f96:	9a07      	ldr	r2, [sp, #28]
   d4f98:	9201      	str	r2, [sp, #4]
   d4f9a:	f8cd a000 	str.w	sl, [sp]
   d4f9e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4fa2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   d4fa6:	4653      	mov	r3, sl
   d4fa8:	e018      	b.n	d4fdc <_ZN12Adafruit_GFX8drawCharEsshtth+0xe8>
        } 
      } else if (bg != color) {
   d4faa:	9b07      	ldr	r3, [sp, #28]
   d4fac:	9a08      	ldr	r2, [sp, #32]
   d4fae:	4293      	cmp	r3, r2
   d4fb0:	d017      	beq.n	d4fe2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        if (size == 1) // default size
   d4fb2:	f1b8 0f01 	cmp.w	r8, #1
   d4fb6:	682b      	ldr	r3, [r5, #0]
   d4fb8:	d107      	bne.n	d4fca <_ZN12Adafruit_GFX8drawCharEsshtth+0xd6>
          drawPixel(x+i, y+j, bg);
   d4fba:	f8d3 b010 	ldr.w	fp, [r3, #16]
   d4fbe:	4613      	mov	r3, r2
   d4fc0:	b23a      	sxth	r2, r7
   d4fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   d4fc4:	4628      	mov	r0, r5
   d4fc6:	47d8      	blx	fp
   d4fc8:	e00b      	b.n	d4fe2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xee>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
   d4fca:	9a08      	ldr	r2, [sp, #32]
   d4fcc:	9201      	str	r2, [sp, #4]
   d4fce:	f8cd a000 	str.w	sl, [sp]
   d4fd2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4fd6:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   d4fda:	4653      	mov	r3, sl
   d4fdc:	990a      	ldr	r1, [sp, #40]	; 0x28
   d4fde:	4628      	mov	r0, r5
   d4fe0:	47d8      	blx	fp
   d4fe2:	9b04      	ldr	r3, [sp, #16]
   d4fe4:	9a03      	ldr	r2, [sp, #12]
   d4fe6:	4413      	add	r3, r2
   d4fe8:	b29b      	uxth	r3, r3
   d4fea:	9304      	str	r3, [sp, #16]
   d4fec:	9b05      	ldr	r3, [sp, #20]
   d4fee:	4413      	add	r3, r2
   d4ff0:	b29b      	uxth	r3, r3
   d4ff2:	3701      	adds	r7, #1
   d4ff4:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d4ff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4ff8:	b2bf      	uxth	r7, r7
   d4ffa:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
   d4ffc:	ea4f 0959 	mov.w	r9, r9, lsr #1
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
   d5000:	d1be      	bne.n	d4f80 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
   d5002:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d5004:	3b01      	subs	r3, #1
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
   d5006:	3401      	adds	r4, #1
   d5008:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d500c:	b264      	sxtb	r4, r4
   d500e:	9309      	str	r3, [sp, #36]	; 0x24
   d5010:	d199      	bne.n	d4f46 <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
   d5012:	b00f      	add	sp, #60	; 0x3c
   d5014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5018:	000d7498 	.word	0x000d7498

000d501c <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d501c:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
   d501e:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
   d5020:	b085      	sub	sp, #20
   d5022:	4604      	mov	r4, r0
   d5024:	460b      	mov	r3, r1

  if (c == '\n') {
   d5026:	d104      	bne.n	d5032 <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
   d5028:	7e02      	ldrb	r2, [r0, #24]
   d502a:	8a43      	ldrh	r3, [r0, #18]
   d502c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d5030:	e023      	b.n	d507a <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
   d5032:	290d      	cmp	r1, #13
   d5034:	d024      	beq.n	d5080 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   d5036:	7e05      	ldrb	r5, [r0, #24]
   d5038:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   d503c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   d5040:	9502      	str	r5, [sp, #8]
   d5042:	8ac5      	ldrh	r5, [r0, #22]
   d5044:	9501      	str	r5, [sp, #4]
   d5046:	8a85      	ldrh	r5, [r0, #20]
   d5048:	9500      	str	r5, [sp, #0]
   d504a:	f7ff ff53 	bl	d4ef4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   d504e:	7e22      	ldrb	r2, [r4, #24]
   d5050:	8a23      	ldrh	r3, [r4, #16]
   d5052:	b291      	uxth	r1, r2
   d5054:	eb01 0041 	add.w	r0, r1, r1, lsl #1
   d5058:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d505c:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
   d505e:	b21b      	sxth	r3, r3
   d5060:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   d5062:	b168      	cbz	r0, d5080 <_ZN12Adafruit_GFX5writeEh+0x64>
   d5064:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   d5068:	f06f 0505 	mvn.w	r5, #5
   d506c:	fb05 0202 	mla	r2, r5, r2, r0
   d5070:	4293      	cmp	r3, r2
   d5072:	dd05      	ble.n	d5080 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
   d5074:	8a63      	ldrh	r3, [r4, #18]
   d5076:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   d507a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   d507c:	2300      	movs	r3, #0
   d507e:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
   d5080:	2001      	movs	r0, #1
   d5082:	b005      	add	sp, #20
   d5084:	bd30      	pop	{r4, r5, pc}

000d5086 <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
   d5086:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   d5088:	8242      	strh	r2, [r0, #18]
   d508a:	4770      	bx	lr

000d508c <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
   d508c:	2900      	cmp	r1, #0
   d508e:	bf08      	it	eq
   d5090:	2101      	moveq	r1, #1
   d5092:	7601      	strb	r1, [r0, #24]
   d5094:	4770      	bx	lr

000d5096 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
   d5096:	82c1      	strh	r1, [r0, #22]
   d5098:	8281      	strh	r1, [r0, #20]
   d509a:	4770      	bx	lr

000d509c <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
   d509c:	7e40      	ldrb	r0, [r0, #25]
   d509e:	4770      	bx	lr

000d50a0 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
   d50a0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   d50a4:	4770      	bx	lr

000d50a6 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
   d50a6:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   d50aa:	4770      	bx	lr

000d50ac <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d50ac:	f000 b9b0 	b.w	d5410 <HAL_Pin_Map>

000d50b0 <_ZN13I2COperations12set_iic_addrEh>:
/**
    @brief change the I2C address from default.
    @param IIC_ADDR: I2C address to be set
*/
void I2COperations::set_iic_addr(uint8_t IIC_ADDR) {
    _IIC_ADDR = IIC_ADDR;
   d50b0:	7001      	strb	r1, [r0, #0]
   d50b2:	4770      	bx	lr

000d50b4 <_ZN13I2COperations12IIC_SEND_CMDEh>:
}

HM330XErrorCode I2COperations::IIC_SEND_CMD(uint8_t CMD) {
   d50b4:	b538      	push	{r3, r4, r5, lr}
   d50b6:	4605      	mov	r5, r0
   d50b8:	460c      	mov	r4, r1
    Wire.beginTransmission(_IIC_ADDR);
   d50ba:	f001 fe55 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d50be:	7829      	ldrb	r1, [r5, #0]
   d50c0:	f001 fbf7 	bl	d68b2 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(CMD);
   d50c4:	f001 fe50 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d50c8:	6803      	ldr	r3, [r0, #0]
   d50ca:	4621      	mov	r1, r4
   d50cc:	689b      	ldr	r3, [r3, #8]
   d50ce:	4798      	blx	r3
    byte ret = Wire.endTransmission();
   d50d0:	f001 fe4a 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d50d4:	f001 fbf8 	bl	d68c8 <_ZN7TwoWire15endTransmissionEv>
    if (ret == 0) {
   d50d8:	2800      	cmp	r0, #0
        return NO_ERROR1;
    } else {
        return ERROR_COMM;
    }
}
   d50da:	bf14      	ite	ne
   d50dc:	f06f 0001 	mvnne.w	r0, #1
   d50e0:	2000      	moveq	r0, #0
   d50e2:	bd38      	pop	{r3, r4, r5, pc}

000d50e4 <_GLOBAL__sub_I__ZN13I2COperations14IIC_write_byteEhh>:
   d50e4:	f000 b994 	b.w	d5410 <HAL_Pin_Map>

000d50e8 <_ZN6HM330XC1Eh>:
    THE SOFTWARE.
*/

#include "Seeed_HM330X.h"

HM330X::HM330X(uint8_t IIC_ADDR) {
   d50e8:	b510      	push	{r4, lr}
   d50ea:	4604      	mov	r4, r0
    set_iic_addr(IIC_ADDR);
   d50ec:	f7ff ffe0 	bl	d50b0 <_ZN13I2COperations12set_iic_addrEh>
}
   d50f0:	4620      	mov	r0, r4
   d50f2:	bd10      	pop	{r4, pc}

000d50f4 <_ZN6HM330X11select_commEv>:

HM330XErrorCode HM330X::select_comm() {
    return IIC_SEND_CMD(SELECT_COMM_CMD);
   d50f4:	2188      	movs	r1, #136	; 0x88
   d50f6:	f7ff bfdd 	b.w	d50b4 <_ZN13I2COperations12IIC_SEND_CMDEh>

000d50fa <_ZN6HM330X4initEv>:
}

HM330XErrorCode HM330X::init() {
   d50fa:	b510      	push	{r4, lr}
   d50fc:	4604      	mov	r4, r0
    Wire.begin();
   d50fe:	f001 fe33 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d5102:	f001 fb9f 	bl	d6844 <_ZN7TwoWire5beginEv>
    return select_comm();
   d5106:	4620      	mov	r0, r4
}
   d5108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return IIC_SEND_CMD(SELECT_COMM_CMD);
}

HM330XErrorCode HM330X::init() {
    Wire.begin();
    return select_comm();
   d510c:	f7ff bff2 	b.w	d50f4 <_ZN6HM330X11select_commEv>

000d5110 <_ZN6HM330X17read_sensor_valueEPhm>:
}

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
   d5110:	b570      	push	{r4, r5, r6, lr}
   d5112:	460c      	mov	r4, r1
   d5114:	4615      	mov	r5, r2
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
   d5116:	f001 fe27 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d511a:	221d      	movs	r2, #29
   d511c:	2140      	movs	r1, #64	; 0x40
   d511e:	f001 fbc5 	bl	d68ac <_ZN7TwoWire11requestFromEhj>
   d5122:	260b      	movs	r6, #11
    while (data_len != Wire.available()) {
   d5124:	f001 fe20 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d5128:	6803      	ldr	r3, [r0, #0]
   d512a:	691b      	ldr	r3, [r3, #16]
   d512c:	4798      	blx	r3
   d512e:	42a8      	cmp	r0, r5
   d5130:	d005      	beq.n	d513e <_ZN6HM330X17read_sensor_valueEPhm+0x2e>
        time_out_count++;
        if (time_out_count > 10) {
   d5132:	3e01      	subs	r6, #1
   d5134:	d00e      	beq.n	d5154 <_ZN6HM330X17read_sensor_valueEPhm+0x44>
            return ERROR_COMM;
        }
        delay(1);
   d5136:	2001      	movs	r0, #1
   d5138:	f000 fe3a 	bl	d5db0 <delay>

HM330XErrorCode HM330X::read_sensor_value(uint8_t* data, uint32_t data_len) {
    uint32_t time_out_count = 0;
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
   d513c:	e7f2      	b.n	d5124 <_ZN6HM330X17read_sensor_valueEPhm+0x14>
   d513e:	4425      	add	r5, r4
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d5140:	42a5      	cmp	r5, r4
   d5142:	d00a      	beq.n	d515a <_ZN6HM330X17read_sensor_valueEPhm+0x4a>
        data[i] = Wire.read();
   d5144:	f001 fe10 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d5148:	6803      	ldr	r3, [r0, #0]
   d514a:	695b      	ldr	r3, [r3, #20]
   d514c:	4798      	blx	r3
   d514e:	f804 0b01 	strb.w	r0, [r4], #1
        if (time_out_count > 10) {
            return ERROR_COMM;
        }
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
   d5152:	e7f5      	b.n	d5140 <_ZN6HM330X17read_sensor_valueEPhm+0x30>
    HM330XErrorCode ret = NO_ERROR1;
    Wire.requestFrom(0x40, 29);
    while (data_len != Wire.available()) {
        time_out_count++;
        if (time_out_count > 10) {
            return ERROR_COMM;
   d5154:	f06f 0001 	mvn.w	r0, #1
   d5158:	bd70      	pop	{r4, r5, r6, pc}
        delay(1);
    }
    for (int i = 0; i < data_len; i++) {
        data[i] = Wire.read();
    }
    return ret;
   d515a:	2000      	movs	r0, #0
}
   d515c:	bd70      	pop	{r4, r5, r6, pc}

000d515e <_GLOBAL__sub_I__ZN6HM330XC2Eh>:
   d515e:	f000 b957 	b.w	d5410 <HAL_Pin_Map>
	...

000d5164 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5164:	b510      	push	{r4, lr}
   d5166:	4b05      	ldr	r3, [pc, #20]	; (d517c <_ZN10JsonBufferD1Ev+0x18>)
   d5168:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d516a:	7c03      	ldrb	r3, [r0, #16]


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d516c:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d516e:	b91b      	cbnz	r3, d5178 <_ZN10JsonBufferD1Ev+0x14>
   d5170:	6840      	ldr	r0, [r0, #4]
   d5172:	b108      	cbz	r0, d5178 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d5174:	f000 fb80 	bl	d5878 <free>
	}
}
   d5178:	4620      	mov	r0, r4
   d517a:	bd10      	pop	{r4, pc}
   d517c:	000d799c 	.word	0x000d799c

000d5180 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   d5180:	b510      	push	{r4, lr}
   d5182:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
   d5184:	f7ff ffee 	bl	d5164 <_ZN10JsonBufferD1Ev>
   d5188:	4620      	mov	r0, r4
   d518a:	2114      	movs	r1, #20
   d518c:	f001 fe20 	bl	d6dd0 <_ZdlPvj>
   d5190:	4620      	mov	r0, r4
   d5192:	bd10      	pop	{r4, pc}

000d5194 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d5194:	b510      	push	{r4, lr}
   d5196:	4b03      	ldr	r3, [pc, #12]	; (d51a4 <_ZN10JsonWriterD1Ev+0x10>)
   d5198:	6003      	str	r3, [r0, #0]
   d519a:	4604      	mov	r4, r0
   d519c:	f7ff ffe2 	bl	d5164 <_ZN10JsonBufferD1Ev>

}
   d51a0:	4620      	mov	r0, r4
   d51a2:	bd10      	pop	{r4, pc}
   d51a4:	000d79ac 	.word	0x000d79ac

000d51a8 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   d51a8:	b510      	push	{r4, lr}
   d51aa:	4604      	mov	r4, r0

}
   d51ac:	f7ff fff2 	bl	d5194 <_ZN10JsonWriterD1Ev>
   d51b0:	4620      	mov	r0, r4
   d51b2:	2130      	movs	r1, #48	; 0x30
   d51b4:	f001 fe0c 	bl	d6dd0 <_ZdlPvj>
   d51b8:	4620      	mov	r0, r4
   d51ba:	bd10      	pop	{r4, pc}

000d51bc <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d51bc:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
   d51be:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
   d51c0:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
   d51c2:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   d51c4:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
   d51c6:	7643      	strb	r3, [r0, #25]

	truncated = false;
   d51c8:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
   d51cc:	4770      	bx	lr
	...

000d51d0 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d51d0:	2300      	movs	r3, #0

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d51d2:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d51d4:	60c3      	str	r3, [r0, #12]
   d51d6:	2301      	movs	r3, #1
   d51d8:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d51da:	4b05      	ldr	r3, [pc, #20]	; (d51f0 <_ZN10JsonWriterC1EPcj+0x20>)
   d51dc:	6003      	str	r3, [r0, #0]
   d51de:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d51e2:	6041      	str	r1, [r0, #4]
   d51e4:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
   d51e6:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
   d51e8:	f7ff ffe8 	bl	d51bc <_ZN10JsonWriter4initEv>
}
   d51ec:	bd10      	pop	{r4, pc}
   d51ee:	bf00      	nop
   d51f0:	000d79ac 	.word	0x000d79ac

000d51f4 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
   d51f4:	68c3      	ldr	r3, [r0, #12]
   d51f6:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
   d51f8:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   d51fa:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   d51fc:	bf3f      	itttt	cc
   d51fe:	6842      	ldrcc	r2, [r0, #4]
   d5200:	1c5c      	addcc	r4, r3, #1
   d5202:	60c4      	strcc	r4, [r0, #12]
   d5204:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
   d5206:	bf24      	itt	cs
   d5208:	2301      	movcs	r3, #1
   d520a:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
   d520e:	bd10      	pop	{r4, pc}

000d5210 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5210:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   d5212:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
   d5214:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   d5216:	b143      	cbz	r3, d522a <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   d5218:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   d521c:	7e59      	ldrb	r1, [r3, #25]
   d521e:	b109      	cbz	r1, d5224 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   d5220:	f7ff ffe8 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
   d5224:	6963      	ldr	r3, [r4, #20]
   d5226:	3b01      	subs	r3, #1
   d5228:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
   d522a:	68a3      	ldr	r3, [r4, #8]
   d522c:	68e0      	ldr	r0, [r4, #12]
   d522e:	6861      	ldr	r1, [r4, #4]
   d5230:	4298      	cmp	r0, r3
   d5232:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
   d5236:	bf2a      	itet	cs
   d5238:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
   d523a:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
   d523c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
   d5240:	bd10      	pop	{r4, pc}

000d5242 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   d5242:	b570      	push	{r4, r5, r6, lr}
   d5244:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   d5246:	68c0      	ldr	r0, [r0, #12]
   d5248:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d524a:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
   d524c:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   d524e:	4613      	mov	r3, r2
   d5250:	4430      	add	r0, r6
   d5252:	460a      	mov	r2, r1
   d5254:	4629      	mov	r1, r5
   d5256:	f000 fb1f 	bl	d5898 <vsnprintf>
	if (count <= spaceAvailable) {
   d525a:	4285      	cmp	r5, r0
		offset += count;
   d525c:	bf2d      	iteet	cs
   d525e:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
   d5260:	68a3      	ldrcc	r3, [r4, #8]
   d5262:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d5264:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d5266:	bf36      	itet	cc
   d5268:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
   d526a:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
   d526c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
   d5270:	bd70      	pop	{r4, r5, r6, pc}

000d5272 <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
   d5272:	b40e      	push	{r1, r2, r3}
   d5274:	b503      	push	{r0, r1, lr}
   d5276:	aa03      	add	r2, sp, #12
   d5278:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
   d527c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   d527e:	f7ff ffe0 	bl	d5242 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
   d5282:	b002      	add	sp, #8
   d5284:	f85d eb04 	ldr.w	lr, [sp], #4
   d5288:	b003      	add	sp, #12
   d528a:	4770      	bx	lr

000d528c <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5290:	4604      	mov	r4, r0
   d5292:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
   d5294:	4617      	mov	r7, r2
   d5296:	b112      	cbz	r2, d529e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   d5298:	2122      	movs	r1, #34	; 0x22
   d529a:	f7ff ffab 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
   d529e:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d52a0:	5d71      	ldrb	r1, [r6, r5]
   d52a2:	eb06 0805 	add.w	r8, r6, r5
   d52a6:	2900      	cmp	r1, #0
   d52a8:	d071      	beq.n	d538e <_ZN10JsonWriter12insertStringEPKcb+0x102>
   d52aa:	68e2      	ldr	r2, [r4, #12]
   d52ac:	68a3      	ldr	r3, [r4, #8]
   d52ae:	429a      	cmp	r2, r3
   d52b0:	d26d      	bcs.n	d538e <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
   d52b2:	060b      	lsls	r3, r1, #24
   d52b4:	d533      	bpl.n	d531e <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   d52b6:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   d52ba:	2be0      	cmp	r3, #224	; 0xe0
   d52bc:	d117      	bne.n	d52ee <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d52be:	f898 3001 	ldrb.w	r3, [r8, #1]
   d52c2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d52c6:	2a80      	cmp	r2, #128	; 0x80
   d52c8:	d111      	bne.n	d52ee <_ZN10JsonWriter12insertStringEPKcb+0x62>
   d52ca:	f105 0802 	add.w	r8, r5, #2
   d52ce:	f816 2008 	ldrb.w	r2, [r6, r8]
   d52d2:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
   d52d6:	2880      	cmp	r0, #128	; 0x80
   d52d8:	d109      	bne.n	d52ee <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d52da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   d52de:	019b      	lsls	r3, r3, #6
   d52e0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
   d52e4:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
   d52e8:	431a      	orrs	r2, r3
   d52ea:	b292      	uxth	r2, r2
   d52ec:	e011      	b.n	d5312 <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   d52ee:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   d52f2:	2bc0      	cmp	r3, #192	; 0xc0
   d52f4:	d146      	bne.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
   d52f6:	f105 0801 	add.w	r8, r5, #1
   d52fa:	f816 3008 	ldrb.w	r3, [r6, r8]
   d52fe:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   d5302:	2a80      	cmp	r2, #128	; 0x80
   d5304:	d13e      	bne.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
   d5306:	0189      	lsls	r1, r1, #6
   d5308:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   d530c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   d5310:	431a      	orrs	r2, r3
   d5312:	4923      	ldr	r1, [pc, #140]	; (d53a0 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
   d5314:	4620      	mov	r0, r4
   d5316:	f7ff ffac 	bl	d5272 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   d531a:	4645      	mov	r5, r8
   d531c:	e035      	b.n	d538a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d531e:	290c      	cmp	r1, #12
   d5320:	d018      	beq.n	d5354 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
   d5322:	d80b      	bhi.n	d533c <_ZN10JsonWriter12insertStringEPKcb+0xb0>
   d5324:	2909      	cmp	r1, #9
   d5326:	d021      	beq.n	d536c <_ZN10JsonWriter12insertStringEPKcb+0xe0>
   d5328:	290a      	cmp	r1, #10
   d532a:	d019      	beq.n	d5360 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
   d532c:	2908      	cmp	r1, #8
   d532e:	d129      	bne.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
   d5330:	215c      	movs	r1, #92	; 0x5c
   d5332:	4620      	mov	r0, r4
   d5334:	f7ff ff5e 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   d5338:	2162      	movs	r1, #98	; 0x62
   d533a:	e023      	b.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
   d533c:	2922      	cmp	r1, #34	; 0x22
   d533e:	d01b      	beq.n	d5378 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5340:	295c      	cmp	r1, #92	; 0x5c
   d5342:	d019      	beq.n	d5378 <_ZN10JsonWriter12insertStringEPKcb+0xec>
   d5344:	290d      	cmp	r1, #13
   d5346:	d11d      	bne.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
   d5348:	215c      	movs	r1, #92	; 0x5c
   d534a:	4620      	mov	r0, r4
   d534c:	f7ff ff52 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   d5350:	2172      	movs	r1, #114	; 0x72
   d5352:	e017      	b.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
   d5354:	215c      	movs	r1, #92	; 0x5c
   d5356:	4620      	mov	r0, r4
   d5358:	f7ff ff4c 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   d535c:	2166      	movs	r1, #102	; 0x66
   d535e:	e011      	b.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
   d5360:	215c      	movs	r1, #92	; 0x5c
   d5362:	4620      	mov	r0, r4
   d5364:	f7ff ff46 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   d5368:	216e      	movs	r1, #110	; 0x6e
   d536a:	e00b      	b.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
   d536c:	215c      	movs	r1, #92	; 0x5c
   d536e:	4620      	mov	r0, r4
   d5370:	f7ff ff40 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   d5374:	2174      	movs	r1, #116	; 0x74
   d5376:	e005      	b.n	d5384 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
   d5378:	215c      	movs	r1, #92	; 0x5c
   d537a:	4620      	mov	r0, r4
   d537c:	f7ff ff3a 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   d5380:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
   d5384:	4620      	mov	r0, r4
   d5386:	f7ff ff35 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   d538a:	3501      	adds	r5, #1
   d538c:	e788      	b.n	d52a0 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
   d538e:	b12f      	cbz	r7, d539c <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
   d5390:	4620      	mov	r0, r4
   d5392:	2122      	movs	r1, #34	; 0x22
	}

}
   d5394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
   d5398:	f7ff bf2c 	b.w	d51f4 <_ZN10JsonWriter10insertCharEc>
   d539c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d53a0:	000d79bd 	.word	0x000d79bd

000d53a4 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
   d53a4:	6942      	ldr	r2, [r0, #20]
   d53a6:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
   d53aa:	7e1a      	ldrb	r2, [r3, #24]
   d53ac:	b112      	cbz	r2, d53b4 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   d53ae:	2200      	movs	r2, #0
   d53b0:	761a      	strb	r2, [r3, #24]
   d53b2:	4770      	bx	lr
	}
	else {
		insertChar(',');
   d53b4:	212c      	movs	r1, #44	; 0x2c
   d53b6:	f7ff bf1d 	b.w	d51f4 <_ZN10JsonWriter10insertCharEc>

000d53ba <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d53ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d53bc:	6943      	ldr	r3, [r0, #20]
   d53be:	3301      	adds	r3, #1
   d53c0:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   d53c2:	460e      	mov	r6, r1
   d53c4:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   d53c6:	d80e      	bhi.n	d53e6 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
   d53c8:	f7ff ffec 	bl	d53a4 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
   d53cc:	6943      	ldr	r3, [r0, #20]
   d53ce:	1c5a      	adds	r2, r3, #1
   d53d0:	eb00 0343 	add.w	r3, r0, r3, lsl #1

	context[contextIndex].isFirst = true;
   d53d4:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
   d53d6:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
   d53d8:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
   d53da:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
   d53dc:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
   d53de:	f7ff ff09 	bl	d51f4 <_ZN10JsonWriter10insertCharEc>
   d53e2:	4620      	mov	r0, r4
   d53e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
   d53e6:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
   d53e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53ea <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
   d53ea:	f000 b811 	b.w	d5410 <HAL_Pin_Map>
	...

000d53f0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <netdb_freeaddrinfo+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	689b      	ldr	r3, [r3, #8]
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	00030268 	.word	0x00030268

000d5400 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <netdb_getaddrinfo+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	68db      	ldr	r3, [r3, #12]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	00030268 	.word	0x00030268

000d5410 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <HAL_Pin_Map+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	681b      	ldr	r3, [r3, #0]
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	0003022c 	.word	0x0003022c

000d5420 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <HAL_Pin_Mode+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	689b      	ldr	r3, [r3, #8]
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	0003022c 	.word	0x0003022c

000d5430 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5430:	b508      	push	{r3, lr}
   d5432:	4b02      	ldr	r3, [pc, #8]	; (d543c <HAL_Get_Pin_Mode+0xc>)
   d5434:	681b      	ldr	r3, [r3, #0]
   d5436:	68db      	ldr	r3, [r3, #12]
   d5438:	9301      	str	r3, [sp, #4]
   d543a:	bd08      	pop	{r3, pc}
   d543c:	0003022c 	.word	0x0003022c

000d5440 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5440:	b508      	push	{r3, lr}
   d5442:	4b02      	ldr	r3, [pc, #8]	; (d544c <HAL_GPIO_Write+0xc>)
   d5444:	681b      	ldr	r3, [r3, #0]
   d5446:	691b      	ldr	r3, [r3, #16]
   d5448:	9301      	str	r3, [sp, #4]
   d544a:	bd08      	pop	{r3, pc}
   d544c:	0003022c 	.word	0x0003022c

000d5450 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5450:	b508      	push	{r3, lr}
   d5452:	4b02      	ldr	r3, [pc, #8]	; (d545c <HAL_SPI_Begin+0xc>)
   d5454:	681b      	ldr	r3, [r3, #0]
   d5456:	681b      	ldr	r3, [r3, #0]
   d5458:	9301      	str	r3, [sp, #4]
   d545a:	bd08      	pop	{r3, pc}
   d545c:	00030230 	.word	0x00030230

000d5460 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d5460:	b508      	push	{r3, lr}
   d5462:	4b02      	ldr	r3, [pc, #8]	; (d546c <HAL_SPI_Set_Bit_Order+0xc>)
   d5464:	681b      	ldr	r3, [r3, #0]
   d5466:	689b      	ldr	r3, [r3, #8]
   d5468:	9301      	str	r3, [sp, #4]
   d546a:	bd08      	pop	{r3, pc}
   d546c:	00030230 	.word	0x00030230

000d5470 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d5470:	b508      	push	{r3, lr}
   d5472:	4b02      	ldr	r3, [pc, #8]	; (d547c <HAL_SPI_Set_Data_Mode+0xc>)
   d5474:	681b      	ldr	r3, [r3, #0]
   d5476:	68db      	ldr	r3, [r3, #12]
   d5478:	9301      	str	r3, [sp, #4]
   d547a:	bd08      	pop	{r3, pc}
   d547c:	00030230 	.word	0x00030230

000d5480 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d5480:	b508      	push	{r3, lr}
   d5482:	4b02      	ldr	r3, [pc, #8]	; (d548c <HAL_SPI_Set_Clock_Divider+0xc>)
   d5484:	681b      	ldr	r3, [r3, #0]
   d5486:	691b      	ldr	r3, [r3, #16]
   d5488:	9301      	str	r3, [sp, #4]
   d548a:	bd08      	pop	{r3, pc}
   d548c:	00030230 	.word	0x00030230

000d5490 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5490:	b508      	push	{r3, lr}
   d5492:	4b02      	ldr	r3, [pc, #8]	; (d549c <HAL_SPI_Send_Receive_Data+0xc>)
   d5494:	681b      	ldr	r3, [r3, #0]
   d5496:	695b      	ldr	r3, [r3, #20]
   d5498:	9301      	str	r3, [sp, #4]
   d549a:	bd08      	pop	{r3, pc}
   d549c:	00030230 	.word	0x00030230

000d54a0 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d54a0:	b508      	push	{r3, lr}
   d54a2:	4b02      	ldr	r3, [pc, #8]	; (d54ac <HAL_SPI_Init+0xc>)
   d54a4:	681b      	ldr	r3, [r3, #0]
   d54a6:	69db      	ldr	r3, [r3, #28]
   d54a8:	9301      	str	r3, [sp, #4]
   d54aa:	bd08      	pop	{r3, pc}
   d54ac:	00030230 	.word	0x00030230

000d54b0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d54b0:	b508      	push	{r3, lr}
   d54b2:	4b02      	ldr	r3, [pc, #8]	; (d54bc <HAL_SPI_Is_Enabled+0xc>)
   d54b4:	681b      	ldr	r3, [r3, #0]
   d54b6:	6a1b      	ldr	r3, [r3, #32]
   d54b8:	9301      	str	r3, [sp, #4]
   d54ba:	bd08      	pop	{r3, pc}
   d54bc:	00030230 	.word	0x00030230

000d54c0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d54c0:	b508      	push	{r3, lr}
   d54c2:	4b02      	ldr	r3, [pc, #8]	; (d54cc <HAL_SPI_Info+0xc>)
   d54c4:	681b      	ldr	r3, [r3, #0]
   d54c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54c8:	9301      	str	r3, [sp, #4]
   d54ca:	bd08      	pop	{r3, pc}
   d54cc:	00030230 	.word	0x00030230

000d54d0 <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d54d0:	b508      	push	{r3, lr}
   d54d2:	4b02      	ldr	r3, [pc, #8]	; (d54dc <HAL_SPI_Acquire+0xc>)
   d54d4:	681b      	ldr	r3, [r3, #0]
   d54d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d54d8:	9301      	str	r3, [sp, #4]
   d54da:	bd08      	pop	{r3, pc}
   d54dc:	00030230 	.word	0x00030230

000d54e0 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d54e0:	b508      	push	{r3, lr}
   d54e2:	4b02      	ldr	r3, [pc, #8]	; (d54ec <HAL_SPI_Release+0xc>)
   d54e4:	681b      	ldr	r3, [r3, #0]
   d54e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54e8:	9301      	str	r3, [sp, #4]
   d54ea:	bd08      	pop	{r3, pc}
   d54ec:	00030230 	.word	0x00030230

000d54f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d54f0:	b508      	push	{r3, lr}
   d54f2:	4b02      	ldr	r3, [pc, #8]	; (d54fc <HAL_RNG_GetRandomNumber+0xc>)
   d54f4:	681b      	ldr	r3, [r3, #0]
   d54f6:	685b      	ldr	r3, [r3, #4]
   d54f8:	9301      	str	r3, [sp, #4]
   d54fa:	bd08      	pop	{r3, pc}
   d54fc:	00030218 	.word	0x00030218

000d5500 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5500:	b508      	push	{r3, lr}
   d5502:	4b02      	ldr	r3, [pc, #8]	; (d550c <HAL_Delay_Microseconds+0xc>)
   d5504:	681b      	ldr	r3, [r3, #0]
   d5506:	68db      	ldr	r3, [r3, #12]
   d5508:	9301      	str	r3, [sp, #4]
   d550a:	bd08      	pop	{r3, pc}
   d550c:	00030218 	.word	0x00030218

000d5510 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5510:	b508      	push	{r3, lr}
   d5512:	4b02      	ldr	r3, [pc, #8]	; (d551c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5514:	681b      	ldr	r3, [r3, #0]
   d5516:	695b      	ldr	r3, [r3, #20]
   d5518:	9301      	str	r3, [sp, #4]
   d551a:	bd08      	pop	{r3, pc}
   d551c:	00030218 	.word	0x00030218

000d5520 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5520:	b508      	push	{r3, lr}
   d5522:	4b02      	ldr	r3, [pc, #8]	; (d552c <os_thread_is_current+0xc>)
   d5524:	681b      	ldr	r3, [r3, #0]
   d5526:	689b      	ldr	r3, [r3, #8]
   d5528:	9301      	str	r3, [sp, #4]
   d552a:	bd08      	pop	{r3, pc}
   d552c:	00030248 	.word	0x00030248

000d5530 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5530:	b508      	push	{r3, lr}
   d5532:	4b02      	ldr	r3, [pc, #8]	; (d553c <os_thread_join+0xc>)
   d5534:	681b      	ldr	r3, [r3, #0]
   d5536:	691b      	ldr	r3, [r3, #16]
   d5538:	9301      	str	r3, [sp, #4]
   d553a:	bd08      	pop	{r3, pc}
   d553c:	00030248 	.word	0x00030248

000d5540 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5540:	b508      	push	{r3, lr}
   d5542:	4b02      	ldr	r3, [pc, #8]	; (d554c <os_thread_cleanup+0xc>)
   d5544:	681b      	ldr	r3, [r3, #0]
   d5546:	695b      	ldr	r3, [r3, #20]
   d5548:	9301      	str	r3, [sp, #4]
   d554a:	bd08      	pop	{r3, pc}
   d554c:	00030248 	.word	0x00030248

000d5550 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5550:	b508      	push	{r3, lr}
   d5552:	4b02      	ldr	r3, [pc, #8]	; (d555c <os_mutex_recursive_create+0xc>)
   d5554:	681b      	ldr	r3, [r3, #0]
   d5556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5558:	9301      	str	r3, [sp, #4]
   d555a:	bd08      	pop	{r3, pc}
   d555c:	00030248 	.word	0x00030248

000d5560 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5560:	b508      	push	{r3, lr}
   d5562:	4b02      	ldr	r3, [pc, #8]	; (d556c <os_mutex_recursive_destroy+0xc>)
   d5564:	681b      	ldr	r3, [r3, #0]
   d5566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5568:	9301      	str	r3, [sp, #4]
   d556a:	bd08      	pop	{r3, pc}
   d556c:	00030248 	.word	0x00030248

000d5570 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b02      	ldr	r3, [pc, #8]	; (d557c <inet_inet_ntop+0xc>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	695b      	ldr	r3, [r3, #20]
   d5578:	9301      	str	r3, [sp, #4]
   d557a:	bd08      	pop	{r3, pc}
   d557c:	00030264 	.word	0x00030264

000d5580 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5580:	b508      	push	{r3, lr}
   d5582:	4b02      	ldr	r3, [pc, #8]	; (d558c <HAL_USART_Init+0xc>)
   d5584:	681b      	ldr	r3, [r3, #0]
   d5586:	681b      	ldr	r3, [r3, #0]
   d5588:	9301      	str	r3, [sp, #4]
   d558a:	bd08      	pop	{r3, pc}
   d558c:	0003023c 	.word	0x0003023c

000d5590 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5590:	b508      	push	{r3, lr}
   d5592:	4b02      	ldr	r3, [pc, #8]	; (d559c <HAL_USART_Write_Data+0xc>)
   d5594:	681b      	ldr	r3, [r3, #0]
   d5596:	68db      	ldr	r3, [r3, #12]
   d5598:	9301      	str	r3, [sp, #4]
   d559a:	bd08      	pop	{r3, pc}
   d559c:	0003023c 	.word	0x0003023c

000d55a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d55a0:	b508      	push	{r3, lr}
   d55a2:	4b02      	ldr	r3, [pc, #8]	; (d55ac <HAL_USART_Available_Data+0xc>)
   d55a4:	681b      	ldr	r3, [r3, #0]
   d55a6:	691b      	ldr	r3, [r3, #16]
   d55a8:	9301      	str	r3, [sp, #4]
   d55aa:	bd08      	pop	{r3, pc}
   d55ac:	0003023c 	.word	0x0003023c

000d55b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d55b0:	b508      	push	{r3, lr}
   d55b2:	4b02      	ldr	r3, [pc, #8]	; (d55bc <HAL_USART_Read_Data+0xc>)
   d55b4:	681b      	ldr	r3, [r3, #0]
   d55b6:	695b      	ldr	r3, [r3, #20]
   d55b8:	9301      	str	r3, [sp, #4]
   d55ba:	bd08      	pop	{r3, pc}
   d55bc:	0003023c 	.word	0x0003023c

000d55c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d55c0:	b508      	push	{r3, lr}
   d55c2:	4b02      	ldr	r3, [pc, #8]	; (d55cc <HAL_USART_Peek_Data+0xc>)
   d55c4:	681b      	ldr	r3, [r3, #0]
   d55c6:	699b      	ldr	r3, [r3, #24]
   d55c8:	9301      	str	r3, [sp, #4]
   d55ca:	bd08      	pop	{r3, pc}
   d55cc:	0003023c 	.word	0x0003023c

000d55d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d55d0:	b508      	push	{r3, lr}
   d55d2:	4b02      	ldr	r3, [pc, #8]	; (d55dc <HAL_USART_Flush_Data+0xc>)
   d55d4:	681b      	ldr	r3, [r3, #0]
   d55d6:	69db      	ldr	r3, [r3, #28]
   d55d8:	9301      	str	r3, [sp, #4]
   d55da:	bd08      	pop	{r3, pc}
   d55dc:	0003023c 	.word	0x0003023c

000d55e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d55e0:	b508      	push	{r3, lr}
   d55e2:	4b02      	ldr	r3, [pc, #8]	; (d55ec <HAL_USART_Is_Enabled+0xc>)
   d55e4:	681b      	ldr	r3, [r3, #0]
   d55e6:	6a1b      	ldr	r3, [r3, #32]
   d55e8:	9301      	str	r3, [sp, #4]
   d55ea:	bd08      	pop	{r3, pc}
   d55ec:	0003023c 	.word	0x0003023c

000d55f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d55f0:	b508      	push	{r3, lr}
   d55f2:	4b02      	ldr	r3, [pc, #8]	; (d55fc <HAL_USART_Available_Data_For_Write+0xc>)
   d55f4:	681b      	ldr	r3, [r3, #0]
   d55f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55f8:	9301      	str	r3, [sp, #4]
   d55fa:	bd08      	pop	{r3, pc}
   d55fc:	0003023c 	.word	0x0003023c

000d5600 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d5600:	b508      	push	{r3, lr}
   d5602:	4b02      	ldr	r3, [pc, #8]	; (d560c <HAL_I2C_Begin+0xc>)
   d5604:	681b      	ldr	r3, [r3, #0]
   d5606:	68db      	ldr	r3, [r3, #12]
   d5608:	9301      	str	r3, [sp, #4]
   d560a:	bd08      	pop	{r3, pc}
   d560c:	00030228 	.word	0x00030228

000d5610 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b02      	ldr	r3, [pc, #8]	; (d561c <HAL_I2C_Begin_Transmission+0xc>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	699b      	ldr	r3, [r3, #24]
   d5618:	9301      	str	r3, [sp, #4]
   d561a:	bd08      	pop	{r3, pc}
   d561c:	00030228 	.word	0x00030228

000d5620 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d5620:	b508      	push	{r3, lr}
   d5622:	4b02      	ldr	r3, [pc, #8]	; (d562c <HAL_I2C_End_Transmission+0xc>)
   d5624:	681b      	ldr	r3, [r3, #0]
   d5626:	69db      	ldr	r3, [r3, #28]
   d5628:	9301      	str	r3, [sp, #4]
   d562a:	bd08      	pop	{r3, pc}
   d562c:	00030228 	.word	0x00030228

000d5630 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5630:	b508      	push	{r3, lr}
   d5632:	4b02      	ldr	r3, [pc, #8]	; (d563c <HAL_I2C_Write_Data+0xc>)
   d5634:	681b      	ldr	r3, [r3, #0]
   d5636:	6a1b      	ldr	r3, [r3, #32]
   d5638:	9301      	str	r3, [sp, #4]
   d563a:	bd08      	pop	{r3, pc}
   d563c:	00030228 	.word	0x00030228

000d5640 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5640:	b508      	push	{r3, lr}
   d5642:	4b02      	ldr	r3, [pc, #8]	; (d564c <HAL_I2C_Available_Data+0xc>)
   d5644:	681b      	ldr	r3, [r3, #0]
   d5646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5648:	9301      	str	r3, [sp, #4]
   d564a:	bd08      	pop	{r3, pc}
   d564c:	00030228 	.word	0x00030228

000d5650 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5650:	b508      	push	{r3, lr}
   d5652:	4b02      	ldr	r3, [pc, #8]	; (d565c <HAL_I2C_Read_Data+0xc>)
   d5654:	681b      	ldr	r3, [r3, #0]
   d5656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5658:	9301      	str	r3, [sp, #4]
   d565a:	bd08      	pop	{r3, pc}
   d565c:	00030228 	.word	0x00030228

000d5660 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b02      	ldr	r3, [pc, #8]	; (d566c <HAL_I2C_Peek_Data+0xc>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5668:	9301      	str	r3, [sp, #4]
   d566a:	bd08      	pop	{r3, pc}
   d566c:	00030228 	.word	0x00030228

000d5670 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5670:	b508      	push	{r3, lr}
   d5672:	4b02      	ldr	r3, [pc, #8]	; (d567c <HAL_I2C_Flush_Data+0xc>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5678:	9301      	str	r3, [sp, #4]
   d567a:	bd08      	pop	{r3, pc}
   d567c:	00030228 	.word	0x00030228

000d5680 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5680:	b508      	push	{r3, lr}
   d5682:	4b02      	ldr	r3, [pc, #8]	; (d568c <HAL_I2C_Is_Enabled+0xc>)
   d5684:	681b      	ldr	r3, [r3, #0]
   d5686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5688:	9301      	str	r3, [sp, #4]
   d568a:	bd08      	pop	{r3, pc}
   d568c:	00030228 	.word	0x00030228

000d5690 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5690:	b508      	push	{r3, lr}
   d5692:	4b02      	ldr	r3, [pc, #8]	; (d569c <HAL_I2C_Init+0xc>)
   d5694:	681b      	ldr	r3, [r3, #0]
   d5696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5698:	9301      	str	r3, [sp, #4]
   d569a:	bd08      	pop	{r3, pc}
   d569c:	00030228 	.word	0x00030228

000d56a0 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d56a0:	b508      	push	{r3, lr}
   d56a2:	4b02      	ldr	r3, [pc, #8]	; (d56ac <HAL_I2C_Request_Data_Ex+0xc>)
   d56a4:	681b      	ldr	r3, [r3, #0]
   d56a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d56a8:	9301      	str	r3, [sp, #4]
   d56aa:	bd08      	pop	{r3, pc}
   d56ac:	00030228 	.word	0x00030228

000d56b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <HAL_USB_USART_Init+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	681b      	ldr	r3, [r3, #0]
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	0003024c 	.word	0x0003024c

000d56c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <HAL_USB_USART_Begin+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	685b      	ldr	r3, [r3, #4]
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	0003024c 	.word	0x0003024c

000d56d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <HAL_USB_USART_Available_Data+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	691b      	ldr	r3, [r3, #16]
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	0003024c 	.word	0x0003024c

000d56e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	695b      	ldr	r3, [r3, #20]
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	0003024c 	.word	0x0003024c

000d56f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <HAL_USB_USART_Receive_Data+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	699b      	ldr	r3, [r3, #24]
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	0003024c 	.word	0x0003024c

000d5700 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <HAL_USB_USART_Send_Data+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	69db      	ldr	r3, [r3, #28]
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	0003024c 	.word	0x0003024c

000d5710 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <HAL_USB_USART_Flush_Data+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	6a1b      	ldr	r3, [r3, #32]
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	0003024c 	.word	0x0003024c

000d5720 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <panic_+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	00030260 	.word	0x00030260

000d5730 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <set_system_mode+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	685b      	ldr	r3, [r3, #4]
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	00030220 	.word	0x00030220

000d5740 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <system_delay_ms+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	695b      	ldr	r3, [r3, #20]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	00030220 	.word	0x00030220

000d5750 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <application_thread_current+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	00030220 	.word	0x00030220

000d5760 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <application_thread_invoke+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	00030220 	.word	0x00030220

000d5770 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b03      	ldr	r3, [pc, #12]	; (d5780 <system_ctrl_set_app_request_handler+0x10>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d577a:	9301      	str	r3, [sp, #4]
   d577c:	bd08      	pop	{r3, pc}
   d577e:	0000      	.short	0x0000
   d5780:	00030220 	.word	0x00030220

000d5784 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b03      	ldr	r3, [pc, #12]	; (d5794 <system_ctrl_set_result+0x10>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d578e:	9301      	str	r3, [sp, #4]
   d5790:	bd08      	pop	{r3, pc}
   d5792:	0000      	.short	0x0000
   d5794:	00030220 	.word	0x00030220

000d5798 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <network_connect+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	685b      	ldr	r3, [r3, #4]
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030240 	.word	0x00030240

000d57a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <network_connecting+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	689b      	ldr	r3, [r3, #8]
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030240 	.word	0x00030240

000d57b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <network_disconnect+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	68db      	ldr	r3, [r3, #12]
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030240 	.word	0x00030240

000d57c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <network_ready+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	691b      	ldr	r3, [r3, #16]
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030240 	.word	0x00030240

000d57d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <network_on+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	695b      	ldr	r3, [r3, #20]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	00030240 	.word	0x00030240

000d57e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <network_off+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	699b      	ldr	r3, [r3, #24]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	00030240 	.word	0x00030240

000d57f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <network_listen+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	69db      	ldr	r3, [r3, #28]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030240 	.word	0x00030240

000d5808 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <network_listening+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	6a1b      	ldr	r3, [r3, #32]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030240 	.word	0x00030240

000d5818 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <network_set_listen_timeout+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030240 	.word	0x00030240

000d5828 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <network_get_listen_timeout+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030240 	.word	0x00030240

000d5838 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <spark_cloud_flag_connected+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	695b      	ldr	r3, [r3, #20]
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030244 	.word	0x00030244

000d5848 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <spark_send_event+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	6a1b      	ldr	r3, [r3, #32]
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030244 	.word	0x00030244

000d5858 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <spark_set_random_seed_from_cloud_handler+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	00030244 	.word	0x00030244

000d5868 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <malloc+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	681b      	ldr	r3, [r3, #0]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	0003021c 	.word	0x0003021c

000d5878 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <free+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	685b      	ldr	r3, [r3, #4]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003021c 	.word	0x0003021c

000d5888 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <realloc+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	689b      	ldr	r3, [r3, #8]
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003021c 	.word	0x0003021c

000d5898 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <vsnprintf+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003021c 	.word	0x0003021c

000d58a8 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <abort+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003021c 	.word	0x0003021c

000d58b8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <_malloc_r+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	0003021c 	.word	0x0003021c

000d58c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58c8:	2200      	movs	r2, #0
   d58ca:	4611      	mov	r1, r2
   d58cc:	6840      	ldr	r0, [r0, #4]
   d58ce:	f7ff bf9b 	b.w	d5808 <network_listening>

000d58d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d58d2:	2200      	movs	r2, #0
   d58d4:	4611      	mov	r1, r2
   d58d6:	6840      	ldr	r0, [r0, #4]
   d58d8:	f7ff bfa6 	b.w	d5828 <network_get_listen_timeout>

000d58dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d58dc:	2200      	movs	r2, #0
   d58de:	6840      	ldr	r0, [r0, #4]
   d58e0:	f7ff bf9a 	b.w	d5818 <network_set_listen_timeout>

000d58e4 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d58e4:	2200      	movs	r2, #0
   d58e6:	f081 0101 	eor.w	r1, r1, #1
   d58ea:	6840      	ldr	r0, [r0, #4]
   d58ec:	f7ff bf84 	b.w	d57f8 <network_listen>

000d58f0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d58f0:	2300      	movs	r3, #0
   d58f2:	461a      	mov	r2, r3
   d58f4:	4619      	mov	r1, r3
   d58f6:	6840      	ldr	r0, [r0, #4]
   d58f8:	f7ff bf76 	b.w	d57e8 <network_off>

000d58fc <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d58fc:	2300      	movs	r3, #0
   d58fe:	461a      	mov	r2, r3
   d5900:	4619      	mov	r1, r3
   d5902:	6840      	ldr	r0, [r0, #4]
   d5904:	f7ff bf68 	b.w	d57d8 <network_on>

000d5908 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5908:	2200      	movs	r2, #0
   d590a:	4611      	mov	r1, r2
   d590c:	6840      	ldr	r0, [r0, #4]
   d590e:	f7ff bf5b 	b.w	d57c8 <network_ready>

000d5912 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5912:	2200      	movs	r2, #0
   d5914:	4611      	mov	r1, r2
   d5916:	6840      	ldr	r0, [r0, #4]
   d5918:	f7ff bf46 	b.w	d57a8 <network_connecting>

000d591c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d591c:	2200      	movs	r2, #0
   d591e:	2102      	movs	r1, #2
   d5920:	6840      	ldr	r0, [r0, #4]
   d5922:	f7ff bf49 	b.w	d57b8 <network_disconnect>

000d5926 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5926:	2300      	movs	r3, #0
   d5928:	461a      	mov	r2, r3
   d592a:	6840      	ldr	r0, [r0, #4]
   d592c:	f7ff bf34 	b.w	d5798 <network_connect>

000d5930 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5930:	4b02      	ldr	r3, [pc, #8]	; (d593c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5932:	2203      	movs	r2, #3
   d5934:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5936:	4a02      	ldr	r2, [pc, #8]	; (d5940 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5938:	601a      	str	r2, [r3, #0]
   d593a:	4770      	bx	lr
   d593c:	2003e3cc 	.word	0x2003e3cc
   d5940:	000d79ec 	.word	0x000d79ec

000d5944 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5944:	4770      	bx	lr

000d5946 <_ZN8SPIClassD0Ev>:
   d5946:	b510      	push	{r4, lr}
   d5948:	210c      	movs	r1, #12
   d594a:	4604      	mov	r4, r0
   d594c:	f001 fa40 	bl	d6dd0 <_ZdlPvj>
   d5950:	4620      	mov	r0, r4
   d5952:	bd10      	pop	{r4, pc}

000d5954 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d5954:	2100      	movs	r1, #0
   d5956:	f7ff bdbb 	b.w	d54d0 <HAL_SPI_Acquire>

000d595a <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d595a:	2100      	movs	r1, #0
   d595c:	f7ff bdc0 	b.w	d54e0 <HAL_SPI_Release>

000d5960 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5960:	b510      	push	{r4, lr}
   d5962:	4b05      	ldr	r3, [pc, #20]	; (d5978 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d5964:	6003      	str	r3, [r0, #0]
   d5966:	4604      	mov	r4, r0
{
    _spi = spi;
   d5968:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d596a:	4608      	mov	r0, r1
   d596c:	f7ff fd98 	bl	d54a0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5970:	2300      	movs	r3, #0
   d5972:	60a3      	str	r3, [r4, #8]
}
   d5974:	4620      	mov	r0, r4
   d5976:	bd10      	pop	{r4, pc}
   d5978:	000d7a20 	.word	0x000d7a20

000d597c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d597c:	b510      	push	{r4, lr}
   d597e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5980:	7900      	ldrb	r0, [r0, #4]
   d5982:	f7ff ffe7 	bl	d5954 <_ZN8SPIClass4lockEv.isra.0>
   d5986:	b948      	cbnz	r0, d599c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d5988:	7920      	ldrb	r0, [r4, #4]
   d598a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d598e:	f7ff fd5f 	bl	d5450 <HAL_SPI_Begin>
        unlock();
   d5992:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d5998:	f7ff bfdf 	b.w	d595a <_ZN8SPIClass6unlockEv.isra.1>
   d599c:	bd10      	pop	{r4, pc}

000d599e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d599e:	b538      	push	{r3, r4, r5, lr}
   d59a0:	4604      	mov	r4, r0
    if (!lock())
   d59a2:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d59a4:	460d      	mov	r5, r1
    if (!lock())
   d59a6:	f7ff ffd5 	bl	d5954 <_ZN8SPIClass4lockEv.isra.0>
   d59aa:	b940      	cbnz	r0, d59be <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d59ac:	7920      	ldrb	r0, [r4, #4]
   d59ae:	4629      	mov	r1, r5
   d59b0:	f7ff fd56 	bl	d5460 <HAL_SPI_Set_Bit_Order>
        unlock();
   d59b4:	7920      	ldrb	r0, [r4, #4]
    }
}
   d59b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d59ba:	f7ff bfce 	b.w	d595a <_ZN8SPIClass6unlockEv.isra.1>
   d59be:	bd38      	pop	{r3, r4, r5, pc}

000d59c0 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d59c0:	b538      	push	{r3, r4, r5, lr}
   d59c2:	4604      	mov	r4, r0
    if (!lock())
   d59c4:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d59c6:	460d      	mov	r5, r1
    if (!lock())
   d59c8:	f7ff ffc4 	bl	d5954 <_ZN8SPIClass4lockEv.isra.0>
   d59cc:	b940      	cbnz	r0, d59e0 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d59ce:	7920      	ldrb	r0, [r4, #4]
   d59d0:	4629      	mov	r1, r5
   d59d2:	f7ff fd4d 	bl	d5470 <HAL_SPI_Set_Data_Mode>
        unlock();
   d59d6:	7920      	ldrb	r0, [r4, #4]
    }
}
   d59d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d59dc:	f7ff bfbd 	b.w	d595a <_ZN8SPIClass6unlockEv.isra.1>
   d59e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d59e4:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d59e6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d59e8:	6018      	str	r0, [r3, #0]
   d59ea:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d59ec:	6818      	ldr	r0, [r3, #0]
   d59ee:	4288      	cmp	r0, r1
   d59f0:	b2e5      	uxtb	r5, r4
   d59f2:	d906      	bls.n	d5a02 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d59f4:	3401      	adds	r4, #1
   d59f6:	2c08      	cmp	r4, #8
   d59f8:	d002      	beq.n	d5a00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d59fa:	0840      	lsrs	r0, r0, #1
   d59fc:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d59fe:	e7f5      	b.n	d59ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5a00:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5a02:	4b02      	ldr	r3, [pc, #8]	; (d5a0c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5a04:	5d5b      	ldrb	r3, [r3, r5]
   d5a06:	7013      	strb	r3, [r2, #0]
   d5a08:	bd30      	pop	{r4, r5, pc}
   d5a0a:	bf00      	nop
   d5a0c:	000d7a28 	.word	0x000d7a28

000d5a10 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a14:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5a16:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5a18:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5a1a:	7900      	ldrb	r0, [r0, #4]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5a1c:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5a1e:	460e      	mov	r6, r1
   d5a20:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5a22:	f7ff ff97 	bl	d5954 <_ZN8SPIClass4lockEv.isra.0>
   d5a26:	4605      	mov	r5, r0
   d5a28:	bb00      	cbnz	r0, d5a6c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5a2a:	f894 8004 	ldrb.w	r8, [r4, #4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5a2e:	4601      	mov	r1, r0
   d5a30:	2214      	movs	r2, #20
   d5a32:	a803      	add	r0, sp, #12
   d5a34:	f001 fb43 	bl	d70be <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a38:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d5a3a:	462a      	mov	r2, r5
   d5a3c:	a903      	add	r1, sp, #12
   d5a3e:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d5a40:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d5a44:	f7ff fd3c 	bl	d54c0 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5a48:	ab02      	add	r3, sp, #8
   d5a4a:	f10d 0207 	add.w	r2, sp, #7
   d5a4e:	fb07 f106 	mul.w	r1, r7, r6
   d5a52:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d5a54:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5a58:	f7ff ffc4 	bl	d59e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d5a5c:	7920      	ldrb	r0, [r4, #4]
   d5a5e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5a62:	f7ff fd0d 	bl	d5480 <HAL_SPI_Set_Clock_Divider>
        unlock();
   d5a66:	7920      	ldrb	r0, [r4, #4]
   d5a68:	f7ff ff77 	bl	d595a <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d5a6c:	9802      	ldr	r0, [sp, #8]
   d5a6e:	b008      	add	sp, #32
   d5a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5a74 <_ZN8SPIClass15setClockDividerEh>:
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5a74:	b538      	push	{r3, r4, r5, lr}
   d5a76:	4604      	mov	r4, r0
    if (!lock())
   d5a78:	7900      	ldrb	r0, [r0, #4]
        unlock();
    }
}

void SPIClass::setClockDivider(uint8_t rate)
{
   d5a7a:	460d      	mov	r5, r1
    if (!lock())
   d5a7c:	f7ff ff6a 	bl	d5954 <_ZN8SPIClass4lockEv.isra.0>
   d5a80:	b9c8      	cbnz	r0, d5ab6 <_ZN8SPIClass15setClockDividerEh+0x42>
    {
        if (_dividerReference)
   d5a82:	68a1      	ldr	r1, [r4, #8]
   d5a84:	b171      	cbz	r1, d5aa4 <_ZN8SPIClass15setClockDividerEh+0x30>
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result] == divider)
   d5a86:	4b0c      	ldr	r3, [pc, #48]	; (d5ab8 <_ZN8SPIClass15setClockDividerEh+0x44>)
   d5a88:	5cc2      	ldrb	r2, [r0, r3]
   d5a8a:	42aa      	cmp	r2, r5
   d5a8c:	d002      	beq.n	d5a94 <_ZN8SPIClass15setClockDividerEh+0x20>
 * Calculates how far a clock value should be right-shifted
 */
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result < arraySize(clock_divisors); result++)
   d5a8e:	3001      	adds	r0, #1
   d5a90:	2808      	cmp	r0, #8
   d5a92:	d1f9      	bne.n	d5a88 <_ZN8SPIClass15setClockDividerEh+0x14>
        if (_dividerReference)
        {
            // determine the clock speed
            uint8_t scale = divisorShiftScale(rate);
            unsigned targetSpeed = _dividerReference >> scale;
            setClockSpeed(targetSpeed);
   d5a94:	3001      	adds	r0, #1
   d5a96:	b2c0      	uxtb	r0, r0
   d5a98:	40c1      	lsrs	r1, r0
   d5a9a:	2201      	movs	r2, #1
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	f7ff ffb7 	bl	d5a10 <_ZN8SPIClass13setClockSpeedEjj>
   d5aa2:	e003      	b.n	d5aac <_ZN8SPIClass15setClockDividerEh+0x38>
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
   d5aa4:	4629      	mov	r1, r5
   d5aa6:	7920      	ldrb	r0, [r4, #4]
   d5aa8:	f7ff fcea 	bl	d5480 <HAL_SPI_Set_Clock_Divider>
        }
        unlock();
   d5aac:	7920      	ldrb	r0, [r4, #4]
    }
}
   d5aae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        }
        else
        {
            HAL_SPI_Set_Clock_Divider(_spi, rate);
        }
        unlock();
   d5ab2:	f7ff bf52 	b.w	d595a <_ZN8SPIClass6unlockEv.isra.1>
   d5ab6:	bd38      	pop	{r3, r4, r5, pc}
   d5ab8:	000d7a28 	.word	0x000d7a28

000d5abc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5abc:	b538      	push	{r3, r4, r5, lr}
   d5abe:	4604      	mov	r4, r0
    uint16_t result = 0;
    if (!lock())
   d5ac0:	7900      	ldrb	r0, [r0, #4]

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5ac2:	460d      	mov	r5, r1
    uint16_t result = 0;
    if (!lock())
   d5ac4:	f7ff ff46 	bl	d5954 <_ZN8SPIClass4lockEv.isra.0>
   d5ac8:	b940      	cbnz	r0, d5adc <_ZN8SPIClass8transferEh+0x20>
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
   d5aca:	4629      	mov	r1, r5
   d5acc:	7920      	ldrb	r0, [r4, #4]
   d5ace:	f7ff fcdf 	bl	d5490 <HAL_SPI_Send_Receive_Data>
   d5ad2:	4605      	mov	r5, r0
        unlock();
   d5ad4:	7920      	ldrb	r0, [r4, #4]
   d5ad6:	f7ff ff40 	bl	d595a <_ZN8SPIClass6unlockEv.isra.1>
   d5ada:	e000      	b.n	d5ade <_ZN8SPIClass8transferEh+0x22>
    return clock;
}

byte SPIClass::transfer(byte _data)
{
    uint16_t result = 0;
   d5adc:	2500      	movs	r5, #0
    {
        result = HAL_SPI_Send_Receive_Data(_spi, _data);
        unlock();
    }
    return static_cast<byte>(result);
}
   d5ade:	b2e8      	uxtb	r0, r5
   d5ae0:	bd38      	pop	{r3, r4, r5, pc}

000d5ae2 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d5ae2:	7900      	ldrb	r0, [r0, #4]
   d5ae4:	f7ff bce4 	b.w	d54b0 <HAL_SPI_Is_Enabled>

000d5ae8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5ae8:	b510      	push	{r4, lr}
   d5aea:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5aec:	6800      	ldr	r0, [r0, #0]
   d5aee:	b118      	cbz	r0, d5af8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d5af0:	f7ff fec2 	bl	d5878 <free>
            wakeupSource_ = nullptr;
   d5af4:	2300      	movs	r3, #0
   d5af6:	6023      	str	r3, [r4, #0]
   d5af8:	bd10      	pop	{r4, pc}

000d5afa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5afa:	b510      	push	{r4, lr}
   d5afc:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5afe:	f7ff fff3 	bl	d5ae8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b02:	4620      	mov	r0, r4
   d5b04:	bd10      	pop	{r4, pc}
	...

000d5b08 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b08:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b0a:	4c09      	ldr	r4, [pc, #36]	; (d5b30 <_GLOBAL__sub_I_System+0x28>)
   d5b0c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5b12:	6020      	str	r0, [r4, #0]
   d5b14:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5b16:	71a0      	strb	r0, [r4, #6]
   d5b18:	8120      	strh	r0, [r4, #8]
   d5b1a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b1c:	f7ff fe08 	bl	d5730 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b20:	4620      	mov	r0, r4
   d5b22:	4a04      	ldr	r2, [pc, #16]	; (d5b34 <_GLOBAL__sub_I_System+0x2c>)
   d5b24:	4904      	ldr	r1, [pc, #16]	; (d5b38 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5b2a:	f001 b943 	b.w	d6db4 <__aeabi_atexit>
   d5b2e:	bf00      	nop
   d5b30:	2003e3d4 	.word	0x2003e3d4
   d5b34:	2003e340 	.word	0x2003e340
   d5b38:	000d5afb 	.word	0x000d5afb

000d5b3c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5b3c:	b510      	push	{r4, lr}
   d5b3e:	4604      	mov	r4, r0
{
	free(buffer);
   d5b40:	6800      	ldr	r0, [r0, #0]
   d5b42:	f7ff fe99 	bl	d5878 <free>
}
   d5b46:	4620      	mov	r0, r4
   d5b48:	bd10      	pop	{r4, pc}

000d5b4a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5b4a:	b510      	push	{r4, lr}
   d5b4c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5b4e:	6800      	ldr	r0, [r0, #0]
   d5b50:	b108      	cbz	r0, d5b56 <_ZN6String10invalidateEv+0xc>
   d5b52:	f7ff fe91 	bl	d5878 <free>
	buffer = NULL;
   d5b56:	2300      	movs	r3, #0
   d5b58:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5b5a:	60a3      	str	r3, [r4, #8]
   d5b5c:	6063      	str	r3, [r4, #4]
   d5b5e:	bd10      	pop	{r4, pc}

000d5b60 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5b60:	b538      	push	{r3, r4, r5, lr}
   d5b62:	4604      	mov	r4, r0
   d5b64:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5b66:	6800      	ldr	r0, [r0, #0]
   d5b68:	3101      	adds	r1, #1
   d5b6a:	f7ff fe8d 	bl	d5888 <realloc>
	if (newbuffer) {
   d5b6e:	b110      	cbz	r0, d5b76 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5b70:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5b74:	2001      	movs	r0, #1
	}
	return 0;
}
   d5b76:	bd38      	pop	{r3, r4, r5, pc}

000d5b78 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5b78:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5b7a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5b7c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5b7e:	b113      	cbz	r3, d5b86 <_ZN6String7reserveEj+0xe>
   d5b80:	6843      	ldr	r3, [r0, #4]
   d5b82:	428b      	cmp	r3, r1
   d5b84:	d207      	bcs.n	d5b96 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5b86:	4620      	mov	r0, r4
   d5b88:	f7ff ffea 	bl	d5b60 <_ZN6String12changeBufferEj>
   d5b8c:	b120      	cbz	r0, d5b98 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5b8e:	68a3      	ldr	r3, [r4, #8]
   d5b90:	b90b      	cbnz	r3, d5b96 <_ZN6String7reserveEj+0x1e>
   d5b92:	6822      	ldr	r2, [r4, #0]
   d5b94:	7013      	strb	r3, [r2, #0]
   d5b96:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5b98:	bd10      	pop	{r4, pc}

000d5b9a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5b9a:	b570      	push	{r4, r5, r6, lr}
   d5b9c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5b9e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5ba0:	4604      	mov	r4, r0
   d5ba2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5ba4:	f7ff ffe8 	bl	d5b78 <_ZN6String7reserveEj>
   d5ba8:	b918      	cbnz	r0, d5bb2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5baa:	4620      	mov	r0, r4
   d5bac:	f7ff ffcd 	bl	d5b4a <_ZN6String10invalidateEv>
		return *this;
   d5bb0:	e009      	b.n	d5bc6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5bb2:	462a      	mov	r2, r5
   d5bb4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5bb6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5bb8:	6820      	ldr	r0, [r4, #0]
   d5bba:	f001 fa75 	bl	d70a8 <memcpy>
	buffer[len] = 0;
   d5bbe:	6822      	ldr	r2, [r4, #0]
   d5bc0:	68a3      	ldr	r3, [r4, #8]
   d5bc2:	2100      	movs	r1, #0
   d5bc4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	bd70      	pop	{r4, r5, r6, pc}

000d5bca <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5bca:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5bcc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5bce:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5bd0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5bd2:	6043      	str	r3, [r0, #4]
	len = 0;
   d5bd4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5bd6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5bd8:	460d      	mov	r5, r1
   d5bda:	b139      	cbz	r1, d5bec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5bdc:	4608      	mov	r0, r1
   d5bde:	f001 faba 	bl	d7156 <strlen>
   d5be2:	4629      	mov	r1, r5
   d5be4:	4602      	mov	r2, r0
   d5be6:	4620      	mov	r0, r4
   d5be8:	f7ff ffd7 	bl	d5b9a <_ZN6String4copyEPKcj>
}
   d5bec:	4620      	mov	r0, r4
   d5bee:	bd38      	pop	{r3, r4, r5, pc}

000d5bf0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5bf0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d5bf2:	b510      	push	{r4, lr}
   d5bf4:	460b      	mov	r3, r1
   d5bf6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5bf8:	d007      	beq.n	d5c0a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5bfa:	6809      	ldr	r1, [r1, #0]
   d5bfc:	b119      	cbz	r1, d5c06 <_ZN6StringaSERKS_+0x16>
   d5bfe:	689a      	ldr	r2, [r3, #8]
   d5c00:	f7ff ffcb 	bl	d5b9a <_ZN6String4copyEPKcj>
   d5c04:	e001      	b.n	d5c0a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5c06:	f7ff ffa0 	bl	d5b4a <_ZN6String10invalidateEv>

	return *this;
}
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	bd10      	pop	{r4, pc}

000d5c0e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5c0e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c10:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5c12:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5c14:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5c16:	6043      	str	r3, [r0, #4]
	len = 0;
   d5c18:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5c1a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5c1c:	f7ff ffe8 	bl	d5bf0 <_ZN6StringaSERKS_>
}
   d5c20:	4620      	mov	r0, r4
   d5c22:	bd10      	pop	{r4, pc}

000d5c24 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5c24:	b538      	push	{r3, r4, r5, lr}
   d5c26:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5c28:	460c      	mov	r4, r1
   d5c2a:	b141      	cbz	r1, d5c3e <_ZN6StringaSEPKc+0x1a>
   d5c2c:	4608      	mov	r0, r1
   d5c2e:	f001 fa92 	bl	d7156 <strlen>
   d5c32:	4621      	mov	r1, r4
   d5c34:	4602      	mov	r2, r0
   d5c36:	4628      	mov	r0, r5
   d5c38:	f7ff ffaf 	bl	d5b9a <_ZN6String4copyEPKcj>
   d5c3c:	e001      	b.n	d5c42 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5c3e:	f7ff ff84 	bl	d5b4a <_ZN6String10invalidateEv>

	return *this;
}
   d5c42:	4628      	mov	r0, r5
   d5c44:	bd38      	pop	{r3, r4, r5, pc}

000d5c46 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5c46:	b510      	push	{r4, lr}
   d5c48:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5c4a:	6800      	ldr	r0, [r0, #0]
   d5c4c:	b108      	cbz	r0, d5c52 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5c4e:	f7ff fc87 	bl	d5560 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5c52:	4620      	mov	r0, r4
   d5c54:	bd10      	pop	{r4, pc}

000d5c56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5c56:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5c58:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5c5a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5c5c:	689b      	ldr	r3, [r3, #8]
   d5c5e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5c60:	68a3      	ldr	r3, [r4, #8]
   d5c62:	3b01      	subs	r3, #1
   d5c64:	60a3      	str	r3, [r4, #8]
   d5c66:	b92b      	cbnz	r3, d5c74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5c68:	6823      	ldr	r3, [r4, #0]
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5c72:	4718      	bx	r3
   d5c74:	bd10      	pop	{r4, pc}

000d5c76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5c76:	680b      	ldr	r3, [r1, #0]
   d5c78:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5c7a:	b113      	cbz	r3, d5c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5c7c:	685a      	ldr	r2, [r3, #4]
   d5c7e:	3201      	adds	r2, #1
   d5c80:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5c82:	4770      	bx	lr

000d5c84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5c84:	b510      	push	{r4, lr}
   d5c86:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5c88:	6800      	ldr	r0, [r0, #0]
   d5c8a:	b128      	cbz	r0, d5c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5c8c:	6843      	ldr	r3, [r0, #4]
   d5c8e:	3b01      	subs	r3, #1
   d5c90:	6043      	str	r3, [r0, #4]
   d5c92:	b90b      	cbnz	r3, d5c98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5c94:	f7ff ffdf 	bl	d5c56 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5c98:	4620      	mov	r0, r4
   d5c9a:	bd10      	pop	{r4, pc}

000d5c9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c9c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5c9e:	4c06      	ldr	r4, [pc, #24]	; (d5cb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5ca0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5ca2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ca4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5ca6:	f7ff fc53 	bl	d5550 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5caa:	4620      	mov	r0, r4
   d5cac:	4a03      	ldr	r2, [pc, #12]	; (d5cbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5cae:	4904      	ldr	r1, [pc, #16]	; (d5cc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5cb4:	f001 b87e 	b.w	d6db4 <__aeabi_atexit>
   d5cb8:	2003e3e0 	.word	0x2003e3e0
   d5cbc:	2003e340 	.word	0x2003e340
   d5cc0:	000d5c47 	.word	0x000d5c47

000d5cc4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5cc6:	4606      	mov	r6, r0
   d5cc8:	460d      	mov	r5, r1
   d5cca:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5ccc:	2400      	movs	r4, #0
  while (size--) {
   d5cce:	42bd      	cmp	r5, r7
   d5cd0:	d00c      	beq.n	d5cec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5cd2:	6833      	ldr	r3, [r6, #0]
   d5cd4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5cd8:	689b      	ldr	r3, [r3, #8]
   d5cda:	4630      	mov	r0, r6
   d5cdc:	4798      	blx	r3
     if (chunk>=0)
   d5cde:	2800      	cmp	r0, #0
   d5ce0:	db01      	blt.n	d5ce6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5ce2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5ce4:	e7f3      	b.n	d5cce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5ce6:	2c00      	cmp	r4, #0
   d5ce8:	bf08      	it	eq
   d5cea:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5cec:	4620      	mov	r0, r4
   d5cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5cf0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5cf0:	b570      	push	{r4, r5, r6, lr}
   d5cf2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5cf4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5cf6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5cf8:	b149      	cbz	r1, d5d0e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5cfa:	f001 fa2c 	bl	d7156 <strlen>
   d5cfe:	682b      	ldr	r3, [r5, #0]
   d5d00:	4602      	mov	r2, r0
   d5d02:	4621      	mov	r1, r4
   d5d04:	4628      	mov	r0, r5
   d5d06:	68db      	ldr	r3, [r3, #12]
    }
   d5d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5d0c:	4718      	bx	r3
    }
   d5d0e:	bd70      	pop	{r4, r5, r6, pc}

000d5d10 <_ZN5Print5printEPKc>:
   d5d10:	b508      	push	{r3, lr}
   d5d12:	f7ff ffed 	bl	d5cf0 <_ZN5Print5writeEPKc>
   d5d16:	bd08      	pop	{r3, pc}

000d5d18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5d18:	6803      	ldr	r3, [r0, #0]
   d5d1a:	689b      	ldr	r3, [r3, #8]
   d5d1c:	4718      	bx	r3

000d5d1e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d1e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5d20:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d22:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5d24:	f7ff fff8 	bl	d5d18 <_ZN5Print5printEc>
  n += print('\n');
   d5d28:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5d2a:	4604      	mov	r4, r0
  n += print('\n');
   d5d2c:	4628      	mov	r0, r5
   d5d2e:	f7ff fff3 	bl	d5d18 <_ZN5Print5printEc>
  return n;
}
   d5d32:	4420      	add	r0, r4
   d5d34:	bd38      	pop	{r3, r4, r5, pc}

000d5d36 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5d36:	b538      	push	{r3, r4, r5, lr}
   d5d38:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5d3a:	f7ff ffd9 	bl	d5cf0 <_ZN5Print5writeEPKc>
   d5d3e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d5d40:	4628      	mov	r0, r5
   d5d42:	f7ff ffec 	bl	d5d1e <_ZN5Print7printlnEv>
  return n;
}
   d5d46:	4420      	add	r0, r4
   d5d48:	bd38      	pop	{r3, r4, r5, pc}

000d5d4a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d4a:	b530      	push	{r4, r5, lr}
   d5d4c:	b08b      	sub	sp, #44	; 0x2c
   d5d4e:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5d50:	2100      	movs	r1, #0
   d5d52:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5d56:	2a01      	cmp	r2, #1
   d5d58:	bf98      	it	ls
   d5d5a:	220a      	movls	r2, #10
   d5d5c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5d60:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5d64:	fb05 3312 	mls	r3, r5, r2, r3
   d5d68:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d6c:	2b09      	cmp	r3, #9
   d5d6e:	bf94      	ite	ls
   d5d70:	3330      	addls	r3, #48	; 0x30
   d5d72:	3337      	addhi	r3, #55	; 0x37
   d5d74:	b2db      	uxtb	r3, r3
   d5d76:	4621      	mov	r1, r4
   d5d78:	f804 3901 	strb.w	r3, [r4], #-1
   d5d7c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5d7e:	2d00      	cmp	r5, #0
   d5d80:	d1ee      	bne.n	d5d60 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5d82:	f7ff ffb5 	bl	d5cf0 <_ZN5Print5writeEPKc>
}
   d5d86:	b00b      	add	sp, #44	; 0x2c
   d5d88:	bd30      	pop	{r4, r5, pc}
	...

000d5d8c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5d8c:	4b01      	ldr	r3, [pc, #4]	; (d5d94 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5d8e:	4a02      	ldr	r2, [pc, #8]	; (d5d98 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5d90:	601a      	str	r2, [r3, #0]
   d5d92:	4770      	bx	lr
   d5d94:	2003e3e4 	.word	0x2003e3e4
   d5d98:	000d7aa3 	.word	0x000d7aa3

000d5d9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5d9c:	4b02      	ldr	r3, [pc, #8]	; (d5da8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5d9e:	681a      	ldr	r2, [r3, #0]
   d5da0:	4b02      	ldr	r3, [pc, #8]	; (d5dac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5da2:	601a      	str	r2, [r3, #0]
   d5da4:	4770      	bx	lr
   d5da6:	bf00      	nop
   d5da8:	2003e2d8 	.word	0x2003e2d8
   d5dac:	2003e3e8 	.word	0x2003e3e8

000d5db0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5db0:	2100      	movs	r1, #0
   d5db2:	f7ff bcc5 	b.w	d5740 <system_delay_ms>

000d5db6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5db6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5db8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5dba:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5dbc:	b113      	cbz	r3, d5dc4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5dbe:	2203      	movs	r2, #3
   d5dc0:	4601      	mov	r1, r0
   d5dc2:	4798      	blx	r3
    }
   d5dc4:	4620      	mov	r0, r4
   d5dc6:	bd10      	pop	{r4, pc}

000d5dc8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5dc8:	b510      	push	{r4, lr}
   d5dca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5dcc:	f7ff fff3 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>
   d5dd0:	4620      	mov	r0, r4
   d5dd2:	bd10      	pop	{r4, pc}

000d5dd4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5dd4:	b513      	push	{r0, r1, r4, lr}
   d5dd6:	460b      	mov	r3, r1
   d5dd8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dda:	c803      	ldmia	r0, {r0, r1}
   d5ddc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5de0:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5de4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5de8:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5dec:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5df0:	b002      	add	sp, #8
   d5df2:	bd10      	pop	{r4, pc}

000d5df4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5df4:	4803      	ldr	r0, [pc, #12]	; (d5e04 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5df6:	4a04      	ldr	r2, [pc, #16]	; (d5e08 <_GLOBAL__sub_I_RGB+0x14>)
   d5df8:	4904      	ldr	r1, [pc, #16]	; (d5e0c <_GLOBAL__sub_I_RGB+0x18>)
   d5dfa:	2300      	movs	r3, #0
   d5dfc:	6083      	str	r3, [r0, #8]
   d5dfe:	f000 bfd9 	b.w	d6db4 <__aeabi_atexit>
   d5e02:	bf00      	nop
   d5e04:	2003e3ec 	.word	0x2003e3ec
   d5e08:	2003e340 	.word	0x2003e340
   d5e0c:	000d5dc9 	.word	0x000d5dc9

000d5e10 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5e10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5e12:	4b0c      	ldr	r3, [pc, #48]	; (d5e44 <serialEventRun+0x34>)
   d5e14:	b133      	cbz	r3, d5e24 <serialEventRun+0x14>
   d5e16:	f000 fc1b 	bl	d6650 <_Z16_fetch_usbserialv>
   d5e1a:	6803      	ldr	r3, [r0, #0]
   d5e1c:	691b      	ldr	r3, [r3, #16]
   d5e1e:	4798      	blx	r3
   d5e20:	2800      	cmp	r0, #0
   d5e22:	dc09      	bgt.n	d5e38 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5e24:	4b08      	ldr	r3, [pc, #32]	; (d5e48 <serialEventRun+0x38>)
   d5e26:	b163      	cbz	r3, d5e42 <serialEventRun+0x32>
   d5e28:	f000 fc94 	bl	d6754 <_Z22__fetch_global_Serial1v>
   d5e2c:	6803      	ldr	r3, [r0, #0]
   d5e2e:	691b      	ldr	r3, [r3, #16]
   d5e30:	4798      	blx	r3
   d5e32:	2800      	cmp	r0, #0
   d5e34:	dc03      	bgt.n	d5e3e <serialEventRun+0x2e>
   d5e36:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5e38:	f3af 8000 	nop.w
   d5e3c:	e7f2      	b.n	d5e24 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5e3e:	f3af 8000 	nop.w
   d5e42:	bd08      	pop	{r3, pc}
	...

000d5e4c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5e4c:	b508      	push	{r3, lr}
	serialEventRun();
   d5e4e:	f7ff ffdf 	bl	d5e10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5e52:	f7ff fb5d 	bl	d5510 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5e56:	4b01      	ldr	r3, [pc, #4]	; (d5e5c <_post_loop+0x10>)
   d5e58:	6018      	str	r0, [r3, #0]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	2003e730 	.word	0x2003e730

000d5e60 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5e60:	4802      	ldr	r0, [pc, #8]	; (d5e6c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5e62:	4a03      	ldr	r2, [pc, #12]	; (d5e70 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5e64:	4903      	ldr	r1, [pc, #12]	; (d5e74 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5e66:	1a12      	subs	r2, r2, r0
   d5e68:	f001 b91e 	b.w	d70a8 <memcpy>
   d5e6c:	2003f400 	.word	0x2003f400
   d5e70:	2003f404 	.word	0x2003f404
   d5e74:	000d7d40 	.word	0x000d7d40

000d5e78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5e78:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5e7a:	2300      	movs	r3, #0
   d5e7c:	9300      	str	r3, [sp, #0]
   d5e7e:	461a      	mov	r2, r3
   d5e80:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5e84:	f7ff fc7e 	bl	d5784 <system_ctrl_set_result>
}
   d5e88:	b003      	add	sp, #12
   d5e8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5e90 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5e90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5e92:	8843      	ldrh	r3, [r0, #2]
   d5e94:	2b0a      	cmp	r3, #10
   d5e96:	d008      	beq.n	d5eaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5e98:	2b50      	cmp	r3, #80	; 0x50
   d5e9a:	d109      	bne.n	d5eb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5e9c:	4b09      	ldr	r3, [pc, #36]	; (d5ec4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5e9e:	681b      	ldr	r3, [r3, #0]
   d5ea0:	b13b      	cbz	r3, d5eb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5ea2:	b003      	add	sp, #12
   d5ea4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5ea8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5eaa:	f7ff ffe5 	bl	d5e78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5eae:	e006      	b.n	d5ebe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5eb0:	2300      	movs	r3, #0
   d5eb2:	9300      	str	r3, [sp, #0]
   d5eb4:	461a      	mov	r2, r3
   d5eb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5eba:	f7ff fc63 	bl	d5784 <system_ctrl_set_result>
        break;
    }
}
   d5ebe:	b003      	add	sp, #12
   d5ec0:	f85d fb04 	ldr.w	pc, [sp], #4
   d5ec4:	2003e3fc 	.word	0x2003e3fc

000d5ec8 <module_user_init_hook>:

void module_user_init_hook()
{
   d5ec8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5eca:	4c10      	ldr	r4, [pc, #64]	; (d5f0c <module_user_init_hook+0x44>)
   d5ecc:	4d10      	ldr	r5, [pc, #64]	; (d5f10 <module_user_init_hook+0x48>)
   d5ece:	6823      	ldr	r3, [r4, #0]
   d5ed0:	42ab      	cmp	r3, r5
   d5ed2:	4b10      	ldr	r3, [pc, #64]	; (d5f14 <module_user_init_hook+0x4c>)
   d5ed4:	bf0c      	ite	eq
   d5ed6:	2201      	moveq	r2, #1
   d5ed8:	2200      	movne	r2, #0
   d5eda:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5edc:	d002      	beq.n	d5ee4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5ede:	f7ff ffbf 	bl	d5e60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5ee2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5ee4:	f7ff fb04 	bl	d54f0 <HAL_RNG_GetRandomNumber>
   d5ee8:	4604      	mov	r4, r0
    srand(seed);
   d5eea:	f001 f8f1 	bl	d70d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5eee:	4b0a      	ldr	r3, [pc, #40]	; (d5f18 <module_user_init_hook+0x50>)
   d5ef0:	b113      	cbz	r3, d5ef8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d5ef2:	4620      	mov	r0, r4
   d5ef4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5ef8:	2100      	movs	r1, #0
   d5efa:	4807      	ldr	r0, [pc, #28]	; (d5f18 <module_user_init_hook+0x50>)
   d5efc:	f7ff fcac 	bl	d5858 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f00:	2100      	movs	r1, #0
   d5f02:	4806      	ldr	r0, [pc, #24]	; (d5f1c <module_user_init_hook+0x54>)
}
   d5f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5f08:	f7ff bc32 	b.w	d5770 <system_ctrl_set_app_request_handler>
   d5f0c:	2003f400 	.word	0x2003f400
   d5f10:	9a271c1e 	.word	0x9a271c1e
   d5f14:	2003e400 	.word	0x2003e400
   d5f18:	00000000 	.word	0x00000000
   d5f1c:	000d5e91 	.word	0x000d5e91

000d5f20 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5f20:	4770      	bx	lr

000d5f22 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d5f22:	2000      	movs	r0, #0
   d5f24:	4770      	bx	lr

000d5f26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5f26:	b510      	push	{r4, lr}
   d5f28:	2110      	movs	r1, #16
   d5f2a:	4604      	mov	r4, r0
   d5f2c:	f000 ff50 	bl	d6dd0 <_ZdlPvj>
   d5f30:	4620      	mov	r0, r4
   d5f32:	bd10      	pop	{r4, pc}

000d5f34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d5f34:	b508      	push	{r3, lr}
      { delete this; }
   d5f36:	b108      	cbz	r0, d5f3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5f38:	f7ff fff5 	bl	d5f26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5f3c:	bd08      	pop	{r3, pc}

000d5f3e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5f3e:	2200      	movs	r2, #0
   d5f40:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5f42:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5f44:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d5f48:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5f4a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d5f4e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f50:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f52:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f54:	680c      	ldr	r4, [r1, #0]
   d5f56:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f58:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5f5a:	bd10      	pop	{r4, pc}

000d5f5c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5f5c:	b510      	push	{r4, lr}
   d5f5e:	4604      	mov	r4, r0
    free((void*)msg_);
   d5f60:	6800      	ldr	r0, [r0, #0]
   d5f62:	f7ff fc89 	bl	d5878 <free>
}
   d5f66:	4620      	mov	r0, r4
   d5f68:	bd10      	pop	{r4, pc}

000d5f6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5f6a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5f6c:	68c4      	ldr	r4, [r0, #12]
   d5f6e:	b1f4      	cbz	r4, d5fae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5f70:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5f72:	2b02      	cmp	r3, #2
   d5f74:	d103      	bne.n	d5f7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5f76:	f104 000c 	add.w	r0, r4, #12
   d5f7a:	f7ff ffef 	bl	d5f5c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5f7e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5f80:	b135      	cbz	r5, d5f90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5f82:	4628      	mov	r0, r5
   d5f84:	f7ff ff17 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>
   d5f88:	2110      	movs	r1, #16
   d5f8a:	4628      	mov	r0, r5
   d5f8c:	f000 ff20 	bl	d6dd0 <_ZdlPvj>
   d5f90:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5f92:	b135      	cbz	r5, d5fa2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5f94:	4628      	mov	r0, r5
   d5f96:	f7ff ff0e 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>
   d5f9a:	2110      	movs	r1, #16
   d5f9c:	4628      	mov	r0, r5
   d5f9e:	f000 ff17 	bl	d6dd0 <_ZdlPvj>
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	2114      	movs	r1, #20
   d5fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5faa:	f000 bf11 	b.w	d6dd0 <_ZdlPvj>
   d5fae:	bd38      	pop	{r3, r4, r5, pc}

000d5fb0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5fb0:	b513      	push	{r0, r1, r4, lr}
   d5fb2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5fb4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5fb8:	2300      	movs	r3, #0
   d5fba:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5fbc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5fbe:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5fc0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5fc2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5fc4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5fc6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5fc8:	f7ff fe5c 	bl	d5c84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fcc:	4620      	mov	r0, r4
   d5fce:	b002      	add	sp, #8
   d5fd0:	bd10      	pop	{r4, pc}

000d5fd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5fd4:	460c      	mov	r4, r1
   d5fd6:	ad02      	add	r5, sp, #8
   d5fd8:	f854 3b04 	ldr.w	r3, [r4], #4
   d5fdc:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5fe0:	4606      	mov	r6, r0
   d5fe2:	460f      	mov	r7, r1
   d5fe4:	a801      	add	r0, sp, #4
   d5fe6:	4621      	mov	r1, r4
   d5fe8:	f7ff fe45 	bl	d5c76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5fec:	4629      	mov	r1, r5
   d5fee:	4630      	mov	r0, r6
   d5ff0:	f7ff ffde 	bl	d5fb0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ff4:	a801      	add	r0, sp, #4
   d5ff6:	f7ff fe45 	bl	d5c84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ffa:	4620      	mov	r0, r4
   d5ffc:	f7ff fe42 	bl	d5c84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6000:	4638      	mov	r0, r7
   d6002:	2108      	movs	r1, #8
   d6004:	f000 fee4 	bl	d6dd0 <_ZdlPvj>
        return p;
    }
   d6008:	4630      	mov	r0, r6
   d600a:	b003      	add	sp, #12
   d600c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d6010:	b538      	push	{r3, r4, r5, lr}
   d6012:	2300      	movs	r3, #0
   d6014:	4604      	mov	r4, r0
   d6016:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6018:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d601a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d601c:	f7fe f83b 	bl	d4096 <_Znwj>
   d6020:	b128      	cbz	r0, d602e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6022:	2301      	movs	r3, #1
   d6024:	6043      	str	r3, [r0, #4]
   d6026:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d6028:	4b02      	ldr	r3, [pc, #8]	; (d6034 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d602a:	6003      	str	r3, [r0, #0]
   d602c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d602e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d6030:	4620      	mov	r0, r4
   d6032:	bd38      	pop	{r3, r4, r5, pc}
   d6034:	000d7b40 	.word	0x000d7b40

000d6038 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6038:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d603a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d603c:	b90a      	cbnz	r2, d6042 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d603e:	f000 feda 	bl	d6df6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6042:	68c3      	ldr	r3, [r0, #12]
    }
   d6044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6048:	4718      	bx	r3

000d604a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d604a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d604c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d604e:	f100 0110 	add.w	r1, r0, #16
   d6052:	f7ff fff1 	bl	d6038 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6056:	bd08      	pop	{r3, pc}

000d6058 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6058:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d605a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d605c:	b90a      	cbnz	r2, d6062 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d605e:	f000 feca 	bl	d6df6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6062:	68c3      	ldr	r3, [r0, #12]
    }
   d6064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6068:	4718      	bx	r3

000d606a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d606a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d606c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d606e:	f100 0110 	add.w	r1, r0, #16
   d6072:	f7ff fff1 	bl	d6058 <_ZNKSt8functionIFvRKbEEclES1_>
   d6076:	bd08      	pop	{r3, pc}

000d6078 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6078:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d607a:	2300      	movs	r3, #0
   d607c:	6083      	str	r3, [r0, #8]
   d607e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6080:	4604      	mov	r4, r0
   d6082:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6084:	b12b      	cbz	r3, d6092 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6086:	2202      	movs	r2, #2
   d6088:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d608a:	68eb      	ldr	r3, [r5, #12]
   d608c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d608e:	68ab      	ldr	r3, [r5, #8]
   d6090:	60a3      	str	r3, [r4, #8]
	}
    }
   d6092:	4620      	mov	r0, r4
   d6094:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6098:	b5f0      	push	{r4, r5, r6, r7, lr}
   d609a:	b089      	sub	sp, #36	; 0x24
   d609c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d609e:	4668      	mov	r0, sp
   d60a0:	f7ff ff4d 	bl	d5f3e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d60a4:	2300      	movs	r3, #0
   d60a6:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d60aa:	f04f 0202 	mov.w	r2, #2
   d60ae:	e8d4 3f4f 	ldrexb	r3, [r4]
   d60b2:	2b00      	cmp	r3, #0
   d60b4:	d103      	bne.n	d60be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d60b6:	e8c4 2f41 	strexb	r1, r2, [r4]
   d60ba:	2900      	cmp	r1, #0
   d60bc:	d1f7      	bne.n	d60ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d60be:	d002      	beq.n	d60c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d60c0:	f88d 3008 	strb.w	r3, [sp, #8]
   d60c4:	e063      	b.n	d618e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d60c6:	f114 050c 	adds.w	r5, r4, #12
   d60ca:	d003      	beq.n	d60d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d60cc:	4669      	mov	r1, sp
   d60ce:	4628      	mov	r0, r5
   d60d0:	f7ff ff35 	bl	d5f3e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d60d4:	f3bf 8f5f 	dmb	sy
   d60d8:	2301      	movs	r3, #1
   d60da:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d60dc:	2000      	movs	r0, #0
   d60de:	f104 0308 	add.w	r3, r4, #8
   d60e2:	f3bf 8f5f 	dmb	sy
   d60e6:	e853 6f00 	ldrex	r6, [r3]
   d60ea:	e843 0200 	strex	r2, r0, [r3]
   d60ee:	2a00      	cmp	r2, #0
   d60f0:	d1f9      	bne.n	d60e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d60f2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d60f6:	2e00      	cmp	r6, #0
   d60f8:	d049      	beq.n	d618e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d60fa:	f7ff fb29 	bl	d5750 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d60fe:	b120      	cbz	r0, d610a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6100:	4629      	mov	r1, r5
   d6102:	4630      	mov	r0, r6
   d6104:	f7ff ff98 	bl	d6038 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6108:	e03a      	b.n	d6180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d610a:	4631      	mov	r1, r6
   d610c:	a802      	add	r0, sp, #8
   d610e:	f7ff ffb3 	bl	d6078 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6112:	68e0      	ldr	r0, [r4, #12]
   d6114:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6118:	b108      	cbz	r0, d611e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d611a:	f001 f801 	bl	d7120 <strdup>
   d611e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6120:	2010      	movs	r0, #16
   d6122:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6126:	f7fd ffb6 	bl	d4096 <_Znwj>
   d612a:	4605      	mov	r5, r0
   d612c:	b1e8      	cbz	r0, d616a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d612e:	2700      	movs	r7, #0
   d6130:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6132:	2018      	movs	r0, #24
   d6134:	f7fd ffaf 	bl	d4096 <_Znwj>
   d6138:	4604      	mov	r4, r0
   d613a:	b188      	cbz	r0, d6160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d613c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d613e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6140:	a802      	add	r0, sp, #8
   d6142:	f7ff fe47 	bl	d5dd4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6146:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6148:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d614a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d614c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d614e:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6150:	a906      	add	r1, sp, #24
   d6152:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6154:	60e3      	str	r3, [r4, #12]
   d6156:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d615a:	9205      	str	r2, [sp, #20]
   d615c:	f7ff feef 	bl	d5f3e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6160:	4b0d      	ldr	r3, [pc, #52]	; (d6198 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d6162:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6164:	4b0d      	ldr	r3, [pc, #52]	; (d619c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6166:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6168:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d616a:	a806      	add	r0, sp, #24
   d616c:	f7ff fef6 	bl	d5f5c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6170:	a802      	add	r0, sp, #8
   d6172:	f7ff fe20 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6176:	2200      	movs	r2, #0
   d6178:	4629      	mov	r1, r5
   d617a:	4809      	ldr	r0, [pc, #36]	; (d61a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d617c:	f7ff faf0 	bl	d5760 <application_thread_invoke>
   d6180:	4630      	mov	r0, r6
   d6182:	f7ff fe18 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6186:	2110      	movs	r1, #16
   d6188:	4630      	mov	r0, r6
   d618a:	f000 fe21 	bl	d6dd0 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d618e:	4668      	mov	r0, sp
   d6190:	f7ff fee4 	bl	d5f5c <_ZN8particle5ErrorD1Ev>
    }
   d6194:	b009      	add	sp, #36	; 0x24
   d6196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6198:	000d604b 	.word	0x000d604b
   d619c:	000d62c1 	.word	0x000d62c1
   d61a0:	000d67a1 	.word	0x000d67a1

000d61a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d61a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d61a8:	b08b      	sub	sp, #44	; 0x2c
   d61aa:	4606      	mov	r6, r0
   d61ac:	460f      	mov	r7, r1
   d61ae:	4690      	mov	r8, r2
   d61b0:	4699      	mov	r9, r3
   d61b2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d61b6:	f7ff fb3f 	bl	d5838 <spark_cloud_flag_connected>
   d61ba:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d61bc:	4683      	mov	fp, r0
   d61be:	bb30      	cbnz	r0, d620e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d61c0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d61c4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d61c6:	a905      	add	r1, sp, #20
   d61c8:	4628      	mov	r0, r5
   d61ca:	f8ad 3018 	strh.w	r3, [sp, #24]
   d61ce:	f7ff feb6 	bl	d5f3e <_ZN8particle5ErrorC1EOS0_>
   d61d2:	2014      	movs	r0, #20
   d61d4:	f7fd ff5f 	bl	d4096 <_Znwj>
   d61d8:	4604      	mov	r4, r0
   d61da:	b158      	cbz	r0, d61f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d61dc:	2302      	movs	r3, #2
   d61de:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d61e0:	2301      	movs	r3, #1
   d61e2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d61e4:	f8c0 b004 	str.w	fp, [r0, #4]
   d61e8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d61ec:	4629      	mov	r1, r5
   d61ee:	300c      	adds	r0, #12
   d61f0:	f7ff fea5 	bl	d5f3e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d61f4:	4630      	mov	r0, r6
   d61f6:	4621      	mov	r1, r4
   d61f8:	f840 4b04 	str.w	r4, [r0], #4
   d61fc:	f7ff ff08 	bl	d6010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6200:	4628      	mov	r0, r5
   d6202:	f7ff feab 	bl	d5f5c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6206:	a805      	add	r0, sp, #20
   d6208:	f7ff fea8 	bl	d5f5c <_ZN8particle5ErrorD1Ev>
   d620c:	e052      	b.n	d62b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d620e:	2400      	movs	r4, #0
   d6210:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6212:	2014      	movs	r0, #20
   d6214:	606c      	str	r4, [r5, #4]
   d6216:	60ac      	str	r4, [r5, #8]
   d6218:	9307      	str	r3, [sp, #28]
   d621a:	f7fd ff3c 	bl	d4096 <_Znwj>
   d621e:	4601      	mov	r1, r0
   d6220:	b118      	cbz	r0, d622a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d6222:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6224:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6226:	6044      	str	r4, [r0, #4]
   d6228:	6084      	str	r4, [r0, #8]
   d622a:	a804      	add	r0, sp, #16
   d622c:	9103      	str	r1, [sp, #12]
   d622e:	f7ff feef 	bl	d6010 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6232:	4b22      	ldr	r3, [pc, #136]	; (d62bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d6234:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6236:	2008      	movs	r0, #8
   d6238:	f7fd ff2d 	bl	d4096 <_Znwj>
   d623c:	4604      	mov	r4, r0
   d623e:	b128      	cbz	r0, d624c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6240:	9b03      	ldr	r3, [sp, #12]
   d6242:	f840 3b04 	str.w	r3, [r0], #4
   d6246:	a904      	add	r1, sp, #16
   d6248:	f7ff fd15 	bl	d5c76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d624c:	9500      	str	r5, [sp, #0]
   d624e:	fa5f f38a 	uxtb.w	r3, sl
   d6252:	464a      	mov	r2, r9
   d6254:	4641      	mov	r1, r8
   d6256:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6258:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d625a:	f7ff faf5 	bl	d5848 <spark_send_event>
   d625e:	b920      	cbnz	r0, d626a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6260:	9b03      	ldr	r3, [sp, #12]
   d6262:	785b      	ldrb	r3, [r3, #1]
   d6264:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6268:	b183      	cbz	r3, d628c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d626a:	9b03      	ldr	r3, [sp, #12]
   d626c:	9305      	str	r3, [sp, #20]
   d626e:	a904      	add	r1, sp, #16
   d6270:	a806      	add	r0, sp, #24
   d6272:	f7ff fd00 	bl	d5c76 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6276:	a905      	add	r1, sp, #20
   d6278:	4630      	mov	r0, r6
   d627a:	f7ff fe99 	bl	d5fb0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d627e:	a806      	add	r0, sp, #24
   d6280:	f7ff fd00 	bl	d5c84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6284:	a804      	add	r0, sp, #16
   d6286:	f7ff fcfd 	bl	d5c84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d628a:	e013      	b.n	d62b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d628c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6290:	a905      	add	r1, sp, #20
   d6292:	a803      	add	r0, sp, #12
   d6294:	9205      	str	r2, [sp, #20]
   d6296:	f8ad 3018 	strh.w	r3, [sp, #24]
   d629a:	f7ff fefd 	bl	d6098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d629e:	a805      	add	r0, sp, #20
   d62a0:	f7ff fe5c 	bl	d5f5c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d62a4:	a805      	add	r0, sp, #20
   d62a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   d62a8:	f7ff fe93 	bl	d5fd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d62ac:	a806      	add	r0, sp, #24
   d62ae:	f7ff fce9 	bl	d5c84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62b2:	e7da      	b.n	d626a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d62b4:	4630      	mov	r0, r6
   d62b6:	b00b      	add	sp, #44	; 0x2c
   d62b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d62bc:	000d6431 	.word	0x000d6431

000d62c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d62c0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d62c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62c4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d62c6:	d006      	beq.n	d62d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d62c8:	2a03      	cmp	r2, #3
   d62ca:	d017      	beq.n	d62fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d62cc:	2a01      	cmp	r2, #1
   d62ce:	d122      	bne.n	d6316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d62d0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d62d2:	6003      	str	r3, [r0, #0]
	      break;
   d62d4:	e01f      	b.n	d6316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d62d6:	2018      	movs	r0, #24
   d62d8:	680e      	ldr	r6, [r1, #0]
   d62da:	f7fd fedc 	bl	d4096 <_Znwj>
   d62de:	4605      	mov	r5, r0
   d62e0:	b150      	cbz	r0, d62f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d62e2:	4631      	mov	r1, r6
   d62e4:	f7ff fec8 	bl	d6078 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d62e8:	6930      	ldr	r0, [r6, #16]
   d62ea:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d62ee:	b108      	cbz	r0, d62f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d62f0:	f000 ff16 	bl	d7120 <strdup>
   d62f4:	6128      	str	r0, [r5, #16]
   d62f6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d62f8:	6025      	str	r5, [r4, #0]
   d62fa:	e00c      	b.n	d6316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d62fc:	6804      	ldr	r4, [r0, #0]
   d62fe:	b154      	cbz	r4, d6316 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d6300:	f104 0010 	add.w	r0, r4, #16
   d6304:	f7ff fe2a 	bl	d5f5c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6308:	4620      	mov	r0, r4
   d630a:	f7ff fd54 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d630e:	2118      	movs	r1, #24
   d6310:	4620      	mov	r0, r4
   d6312:	f000 fd5d 	bl	d6dd0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6316:	2000      	movs	r0, #0
   d6318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d631a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d631a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d631c:	2300      	movs	r3, #0
   d631e:	6083      	str	r3, [r0, #8]
   d6320:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6322:	4604      	mov	r4, r0
   d6324:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6326:	b12b      	cbz	r3, d6334 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6328:	2202      	movs	r2, #2
   d632a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d632c:	68eb      	ldr	r3, [r5, #12]
   d632e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6330:	68ab      	ldr	r3, [r5, #8]
   d6332:	60a3      	str	r3, [r4, #8]
	}
    }
   d6334:	4620      	mov	r0, r4
   d6336:	bd38      	pop	{r3, r4, r5, pc}

000d6338 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6338:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d633a:	b570      	push	{r4, r5, r6, lr}
   d633c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d633e:	d006      	beq.n	d634e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6340:	2a03      	cmp	r2, #3
   d6342:	d011      	beq.n	d6368 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6344:	2a01      	cmp	r2, #1
   d6346:	d118      	bne.n	d637a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6348:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d634a:	6003      	str	r3, [r0, #0]
	      break;
   d634c:	e015      	b.n	d637a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d634e:	2014      	movs	r0, #20
   d6350:	680e      	ldr	r6, [r1, #0]
   d6352:	f7fd fea0 	bl	d4096 <_Znwj>
   d6356:	4605      	mov	r5, r0
   d6358:	b120      	cbz	r0, d6364 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d635a:	4631      	mov	r1, r6
   d635c:	f7ff ffdd 	bl	d631a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6360:	7c33      	ldrb	r3, [r6, #16]
   d6362:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6364:	6025      	str	r5, [r4, #0]
   d6366:	e008      	b.n	d637a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6368:	6804      	ldr	r4, [r0, #0]
   d636a:	b134      	cbz	r4, d637a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d636c:	4620      	mov	r0, r4
   d636e:	f7ff fd22 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6372:	2114      	movs	r1, #20
   d6374:	4620      	mov	r0, r4
   d6376:	f000 fd2b 	bl	d6dd0 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d637a:	2000      	movs	r0, #0
   d637c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6380 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6380:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6382:	2300      	movs	r3, #0
   d6384:	b087      	sub	sp, #28
   d6386:	460c      	mov	r4, r1
   d6388:	f3bf 8f5f 	dmb	sy
   d638c:	e850 6f00 	ldrex	r6, [r0]
   d6390:	e840 3200 	strex	r2, r3, [r0]
   d6394:	2a00      	cmp	r2, #0
   d6396:	d1f9      	bne.n	d638c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6398:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d639c:	2e00      	cmp	r6, #0
   d639e:	d03f      	beq.n	d6420 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d63a0:	4618      	mov	r0, r3
   d63a2:	f7ff f9d5 	bl	d5750 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d63a6:	4607      	mov	r7, r0
   d63a8:	b120      	cbz	r0, d63b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d63aa:	4621      	mov	r1, r4
   d63ac:	4630      	mov	r0, r6
   d63ae:	f7ff fe53 	bl	d6058 <_ZNKSt8functionIFvRKbEEclES1_>
   d63b2:	e02e      	b.n	d6412 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d63b4:	4631      	mov	r1, r6
   d63b6:	a801      	add	r0, sp, #4
   d63b8:	f7ff ffaf 	bl	d631a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d63bc:	7823      	ldrb	r3, [r4, #0]
   d63be:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d63c2:	2010      	movs	r0, #16
   d63c4:	f7fd fe67 	bl	d4096 <_Znwj>
   d63c8:	4605      	mov	r5, r0
   d63ca:	b1d0      	cbz	r0, d6402 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63ce:	2014      	movs	r0, #20
   d63d0:	f7fd fe61 	bl	d4096 <_Znwj>
   d63d4:	4604      	mov	r4, r0
   d63d6:	b178      	cbz	r0, d63f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63d8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d63da:	4601      	mov	r1, r0
   d63dc:	a801      	add	r0, sp, #4
   d63de:	f7ff fcf9 	bl	d5dd4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63e2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d63e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d63e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d63e8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d63ea:	9203      	str	r2, [sp, #12]
   d63ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d63ee:	60e3      	str	r3, [r4, #12]
   d63f0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d63f4:	9204      	str	r2, [sp, #16]
   d63f6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d63f8:	4b0a      	ldr	r3, [pc, #40]	; (d6424 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d63fa:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d63fc:	4b0a      	ldr	r3, [pc, #40]	; (d6428 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d63fe:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6400:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6402:	a801      	add	r0, sp, #4
   d6404:	f7ff fcd7 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6408:	2200      	movs	r2, #0
   d640a:	4629      	mov	r1, r5
   d640c:	4807      	ldr	r0, [pc, #28]	; (d642c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d640e:	f7ff f9a7 	bl	d5760 <application_thread_invoke>
   d6412:	4630      	mov	r0, r6
   d6414:	f7ff fccf 	bl	d5db6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6418:	2110      	movs	r1, #16
   d641a:	4630      	mov	r0, r6
   d641c:	f000 fcd8 	bl	d6dd0 <_ZdlPvj>
        }
    }
   d6420:	b007      	add	sp, #28
   d6422:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6424:	000d606b 	.word	0x000d606b
   d6428:	000d6339 	.word	0x000d6339
   d642c:	000d67a1 	.word	0x000d67a1

000d6430 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6430:	b530      	push	{r4, r5, lr}
   d6432:	b085      	sub	sp, #20
   d6434:	4604      	mov	r4, r0
   d6436:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6438:	4668      	mov	r0, sp
   d643a:	4611      	mov	r1, r2
   d643c:	f7ff fdc9 	bl	d5fd2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6440:	b17c      	cbz	r4, d6462 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6442:	b224      	sxth	r4, r4
   d6444:	4628      	mov	r0, r5
   d6446:	b10d      	cbz	r5, d644c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6448:	f000 fe6a 	bl	d7120 <strdup>
   d644c:	9002      	str	r0, [sp, #8]
   d644e:	a902      	add	r1, sp, #8
   d6450:	4668      	mov	r0, sp
   d6452:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6456:	f7ff fe1f 	bl	d6098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d645a:	a802      	add	r0, sp, #8
   d645c:	f7ff fd7e 	bl	d5f5c <_ZN8particle5ErrorD1Ev>
   d6460:	e01d      	b.n	d649e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6462:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6464:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6468:	f04f 0201 	mov.w	r2, #1
   d646c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6470:	42a3      	cmp	r3, r4
   d6472:	d103      	bne.n	d647c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6474:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6478:	2900      	cmp	r1, #0
   d647a:	d1f7      	bne.n	d646c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d647c:	d002      	beq.n	d6484 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d647e:	f88d 3008 	strb.w	r3, [sp, #8]
   d6482:	e00c      	b.n	d649e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6484:	f110 010c 	adds.w	r1, r0, #12
   d6488:	f04f 0301 	mov.w	r3, #1
   d648c:	bf18      	it	ne
   d648e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6490:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6494:	3004      	adds	r0, #4
   d6496:	f800 3c03 	strb.w	r3, [r0, #-3]
   d649a:	f7ff ff71 	bl	d6380 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d649e:	a801      	add	r0, sp, #4
   d64a0:	f7ff fbf0 	bl	d5c84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d64a4:	b005      	add	sp, #20
   d64a6:	bd30      	pop	{r4, r5, pc}

000d64a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d64a8:	4770      	bx	lr

000d64aa <_ZN9IPAddressD0Ev>:
   d64aa:	b510      	push	{r4, lr}
   d64ac:	2118      	movs	r1, #24
   d64ae:	4604      	mov	r4, r0
   d64b0:	f000 fc8e 	bl	d6dd0 <_ZdlPvj>
   d64b4:	4620      	mov	r0, r4
   d64b6:	bd10      	pop	{r4, pc}

000d64b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64ba:	7d03      	ldrb	r3, [r0, #20]
   d64bc:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64be:	b08d      	sub	sp, #52	; 0x34
   d64c0:	460e      	mov	r6, r1
   d64c2:	f100 0704 	add.w	r7, r0, #4
   d64c6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64ca:	d002      	beq.n	d64d2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d64cc:	f100 0508 	add.w	r5, r0, #8
   d64d0:	e018      	b.n	d6504 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d64d2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64d4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d64d6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d64da:	232f      	movs	r3, #47	; 0x2f
   d64dc:	462a      	mov	r2, r5
   d64de:	200a      	movs	r0, #10
   d64e0:	f7ff f846 	bl	d5570 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d64e4:	4628      	mov	r0, r5
   d64e6:	f000 fe36 	bl	d7156 <strlen>
   d64ea:	6833      	ldr	r3, [r6, #0]
   d64ec:	4602      	mov	r2, r0
   d64ee:	68db      	ldr	r3, [r3, #12]
   d64f0:	4629      	mov	r1, r5
   d64f2:	4630      	mov	r0, r6
   d64f4:	4798      	blx	r3
   d64f6:	e00f      	b.n	d6518 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d64f8:	b124      	cbz	r4, d6504 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d64fa:	212e      	movs	r1, #46	; 0x2e
   d64fc:	4630      	mov	r0, r6
   d64fe:	f7ff fc0b 	bl	d5d18 <_ZN5Print5printEc>
   d6502:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6504:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6508:	220a      	movs	r2, #10
   d650a:	4630      	mov	r0, r6
   d650c:	f7ff fc1d 	bl	d5d4a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6510:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6512:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6514:	d1f0      	bne.n	d64f8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6516:	4620      	mov	r0, r4
    }
    return n;
}
   d6518:	b00d      	add	sp, #52	; 0x34
   d651a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d651c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d651c:	b510      	push	{r4, lr}
   d651e:	4b05      	ldr	r3, [pc, #20]	; (d6534 <_ZN9IPAddressC1Ev+0x18>)
   d6520:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6522:	2211      	movs	r2, #17
   d6524:	f840 3b04 	str.w	r3, [r0], #4
   d6528:	2100      	movs	r1, #0
   d652a:	f000 fdc8 	bl	d70be <memset>
{
    clear();
}
   d652e:	4620      	mov	r0, r4
   d6530:	bd10      	pop	{r4, pc}
   d6532:	bf00      	nop
   d6534:	000d7b5c 	.word	0x000d7b5c

000d6538 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6538:	4603      	mov	r3, r0
   d653a:	4a07      	ldr	r2, [pc, #28]	; (d6558 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d653c:	b510      	push	{r4, lr}
   d653e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6542:	f101 0210 	add.w	r2, r1, #16
   d6546:	f851 4b04 	ldr.w	r4, [r1], #4
   d654a:	f843 4b04 	str.w	r4, [r3], #4
   d654e:	4291      	cmp	r1, r2
   d6550:	d1f9      	bne.n	d6546 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6552:	780a      	ldrb	r2, [r1, #0]
   d6554:	701a      	strb	r2, [r3, #0]
}
   d6556:	bd10      	pop	{r4, pc}
   d6558:	000d7b5c 	.word	0x000d7b5c

000d655c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d655c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d655e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6562:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6566:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d656a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d656e:	2304      	movs	r3, #4
   d6570:	6041      	str	r1, [r0, #4]
   d6572:	7503      	strb	r3, [r0, #20]
   d6574:	bd10      	pop	{r4, pc}

000d6576 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6576:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6578:	780d      	ldrb	r5, [r1, #0]
   d657a:	788b      	ldrb	r3, [r1, #2]
   d657c:	784a      	ldrb	r2, [r1, #1]
   d657e:	78c9      	ldrb	r1, [r1, #3]
   d6580:	9100      	str	r1, [sp, #0]
   d6582:	4629      	mov	r1, r5
   d6584:	f7ff ffea 	bl	d655c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6588:	b003      	add	sp, #12
   d658a:	bd30      	pop	{r4, r5, pc}

000d658c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d658c:	7441      	strb	r1, [r0, #17]
   d658e:	4770      	bx	lr

000d6590 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6590:	4770      	bx	lr

000d6592 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d6592:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6594:	2100      	movs	r1, #0
   d6596:	7c00      	ldrb	r0, [r0, #16]
   d6598:	f7ff f8aa 	bl	d56f0 <HAL_USB_USART_Receive_Data>
}
   d659c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65a0:	bf28      	it	cs
   d65a2:	f04f 30ff 	movcs.w	r0, #4294967295
   d65a6:	bd08      	pop	{r3, pc}

000d65a8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d65a8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d65aa:	2101      	movs	r1, #1
   d65ac:	7c00      	ldrb	r0, [r0, #16]
   d65ae:	f7ff f89f 	bl	d56f0 <HAL_USB_USART_Receive_Data>
}
   d65b2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65b6:	bf28      	it	cs
   d65b8:	f04f 30ff 	movcs.w	r0, #4294967295
   d65bc:	bd08      	pop	{r3, pc}

000d65be <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d65be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d65c0:	7c00      	ldrb	r0, [r0, #16]
   d65c2:	f7ff f88d 	bl	d56e0 <HAL_USB_USART_Available_Data_For_Write>
}
   d65c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65ca:	bd08      	pop	{r3, pc}

000d65cc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d65cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d65ce:	7c00      	ldrb	r0, [r0, #16]
   d65d0:	f7ff f87e 	bl	d56d0 <HAL_USB_USART_Available_Data>
}
   d65d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65d8:	bd08      	pop	{r3, pc}

000d65da <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d65da:	7c00      	ldrb	r0, [r0, #16]
   d65dc:	f7ff b898 	b.w	d5710 <HAL_USB_USART_Flush_Data>

000d65e0 <_ZN9USBSerialD0Ev>:
   d65e0:	b510      	push	{r4, lr}
   d65e2:	2114      	movs	r1, #20
   d65e4:	4604      	mov	r4, r0
   d65e6:	f000 fbf3 	bl	d6dd0 <_ZdlPvj>
   d65ea:	4620      	mov	r0, r4
   d65ec:	bd10      	pop	{r4, pc}

000d65ee <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d65ee:	b538      	push	{r3, r4, r5, lr}
   d65f0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d65f2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d65f4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d65f6:	f7ff f873 	bl	d56e0 <HAL_USB_USART_Available_Data_For_Write>
   d65fa:	2800      	cmp	r0, #0
   d65fc:	dc01      	bgt.n	d6602 <_ZN9USBSerial5writeEh+0x14>
   d65fe:	7c60      	ldrb	r0, [r4, #17]
   d6600:	b128      	cbz	r0, d660e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6602:	4629      	mov	r1, r5
   d6604:	7c20      	ldrb	r0, [r4, #16]
   d6606:	f7ff f87b 	bl	d5700 <HAL_USB_USART_Send_Data>
   d660a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d660e:	bd38      	pop	{r3, r4, r5, pc}

000d6610 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6610:	b510      	push	{r4, lr}
   d6612:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6614:	2300      	movs	r3, #0
   d6616:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d661c:	60a3      	str	r3, [r4, #8]
   d661e:	4b05      	ldr	r3, [pc, #20]	; (d6634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6620:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6622:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6624:	4608      	mov	r0, r1
{
  _serial = serial;
   d6626:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6628:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d662a:	4611      	mov	r1, r2
   d662c:	f7ff f840 	bl	d56b0 <HAL_USB_USART_Init>
}
   d6630:	4620      	mov	r0, r4
   d6632:	bd10      	pop	{r4, pc}
   d6634:	000d7b70 	.word	0x000d7b70

000d6638 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6638:	2200      	movs	r2, #0
   d663a:	7c00      	ldrb	r0, [r0, #16]
   d663c:	f7ff b840 	b.w	d56c0 <HAL_USB_USART_Begin>

000d6640 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6640:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6642:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6644:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6646:	2100      	movs	r1, #0
   d6648:	f000 fd39 	bl	d70be <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d664c:	4620      	mov	r0, r4
   d664e:	bd10      	pop	{r4, pc}

000d6650 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6650:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6652:	4d0e      	ldr	r5, [pc, #56]	; (d668c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6654:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6656:	a801      	add	r0, sp, #4
   d6658:	f7ff fff2 	bl	d6640 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d665c:	6829      	ldr	r1, [r5, #0]
   d665e:	f011 0401 	ands.w	r4, r1, #1
   d6662:	d110      	bne.n	d6686 <_Z16_fetch_usbserialv+0x36>
   d6664:	4628      	mov	r0, r5
   d6666:	f7fd fd27 	bl	d40b8 <__cxa_guard_acquire>
   d666a:	b160      	cbz	r0, d6686 <_Z16_fetch_usbserialv+0x36>
   d666c:	aa01      	add	r2, sp, #4
   d666e:	4621      	mov	r1, r4
   d6670:	4807      	ldr	r0, [pc, #28]	; (d6690 <_Z16_fetch_usbserialv+0x40>)
   d6672:	f7ff ffcd 	bl	d6610 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6676:	4628      	mov	r0, r5
   d6678:	f7fd fd23 	bl	d40c2 <__cxa_guard_release>
   d667c:	4a05      	ldr	r2, [pc, #20]	; (d6694 <_Z16_fetch_usbserialv+0x44>)
   d667e:	4906      	ldr	r1, [pc, #24]	; (d6698 <_Z16_fetch_usbserialv+0x48>)
   d6680:	4803      	ldr	r0, [pc, #12]	; (d6690 <_Z16_fetch_usbserialv+0x40>)
   d6682:	f000 fb97 	bl	d6db4 <__aeabi_atexit>
	return _usbserial;
}
   d6686:	4802      	ldr	r0, [pc, #8]	; (d6690 <_Z16_fetch_usbserialv+0x40>)
   d6688:	b007      	add	sp, #28
   d668a:	bd30      	pop	{r4, r5, pc}
   d668c:	2003e404 	.word	0x2003e404
   d6690:	2003e408 	.word	0x2003e408
   d6694:	2003e340 	.word	0x2003e340
   d6698:	000d6591 	.word	0x000d6591

000d669c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d669c:	4770      	bx	lr

000d669e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d669e:	7441      	strb	r1, [r0, #17]
   d66a0:	4770      	bx	lr

000d66a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d66a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d66a4:	7c00      	ldrb	r0, [r0, #16]
   d66a6:	f7fe ffa3 	bl	d55f0 <HAL_USART_Available_Data_For_Write>
}
   d66aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66ae:	bd08      	pop	{r3, pc}

000d66b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d66b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d66b2:	7c00      	ldrb	r0, [r0, #16]
   d66b4:	f7fe ff74 	bl	d55a0 <HAL_USART_Available_Data>
}
   d66b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66bc:	bd08      	pop	{r3, pc}

000d66be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d66be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d66c0:	7c00      	ldrb	r0, [r0, #16]
   d66c2:	f7fe ff7d 	bl	d55c0 <HAL_USART_Peek_Data>
}
   d66c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d66ca:	bf28      	it	cs
   d66cc:	f04f 30ff 	movcs.w	r0, #4294967295
   d66d0:	bd08      	pop	{r3, pc}

000d66d2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d66d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d66d4:	7c00      	ldrb	r0, [r0, #16]
   d66d6:	f7fe ff6b 	bl	d55b0 <HAL_USART_Read_Data>
}
   d66da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d66de:	bf28      	it	cs
   d66e0:	f04f 30ff 	movcs.w	r0, #4294967295
   d66e4:	bd08      	pop	{r3, pc}

000d66e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d66e6:	7c00      	ldrb	r0, [r0, #16]
   d66e8:	f7fe bf72 	b.w	d55d0 <HAL_USART_Flush_Data>

000d66ec <_ZN11USARTSerialD0Ev>:
   d66ec:	b510      	push	{r4, lr}
   d66ee:	2114      	movs	r1, #20
   d66f0:	4604      	mov	r4, r0
   d66f2:	f000 fb6d 	bl	d6dd0 <_ZdlPvj>
   d66f6:	4620      	mov	r0, r4
   d66f8:	bd10      	pop	{r4, pc}

000d66fa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d66fa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d66fc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d66fe:	4604      	mov	r4, r0
   d6700:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6702:	b925      	cbnz	r5, d670e <_ZN11USARTSerial5writeEh+0x14>
   d6704:	7c00      	ldrb	r0, [r0, #16]
   d6706:	f7fe ff73 	bl	d55f0 <HAL_USART_Available_Data_For_Write>
   d670a:	2800      	cmp	r0, #0
   d670c:	dd05      	ble.n	d671a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d670e:	4631      	mov	r1, r6
   d6710:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6716:	f7fe bf3b 	b.w	d5590 <HAL_USART_Write_Data>
  }
  return 0;
}
   d671a:	4628      	mov	r0, r5
   d671c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6720 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6720:	b510      	push	{r4, lr}
   d6722:	4604      	mov	r4, r0
   d6724:	4608      	mov	r0, r1
   d6726:	4611      	mov	r1, r2
   d6728:	2200      	movs	r2, #0
   d672a:	6062      	str	r2, [r4, #4]
   d672c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6730:	60a2      	str	r2, [r4, #8]
   d6732:	4a05      	ldr	r2, [pc, #20]	; (d6748 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6734:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6736:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6738:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d673a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d673c:	461a      	mov	r2, r3
   d673e:	f7fe ff1f 	bl	d5580 <HAL_USART_Init>
}
   d6742:	4620      	mov	r0, r4
   d6744:	bd10      	pop	{r4, pc}
   d6746:	bf00      	nop
   d6748:	000d7ba0 	.word	0x000d7ba0

000d674c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d674c:	7c00      	ldrb	r0, [r0, #16]
   d674e:	f7fe bf47 	b.w	d55e0 <HAL_USART_Is_Enabled>
	...

000d6754 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6754:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6756:	4d0c      	ldr	r5, [pc, #48]	; (d6788 <_Z22__fetch_global_Serial1v+0x34>)
   d6758:	6829      	ldr	r1, [r5, #0]
   d675a:	f011 0401 	ands.w	r4, r1, #1
   d675e:	d111      	bne.n	d6784 <_Z22__fetch_global_Serial1v+0x30>
   d6760:	4628      	mov	r0, r5
   d6762:	f7fd fca9 	bl	d40b8 <__cxa_guard_acquire>
   d6766:	b168      	cbz	r0, d6784 <_Z22__fetch_global_Serial1v+0x30>
   d6768:	4a08      	ldr	r2, [pc, #32]	; (d678c <_Z22__fetch_global_Serial1v+0x38>)
   d676a:	4b09      	ldr	r3, [pc, #36]	; (d6790 <_Z22__fetch_global_Serial1v+0x3c>)
   d676c:	4809      	ldr	r0, [pc, #36]	; (d6794 <_Z22__fetch_global_Serial1v+0x40>)
   d676e:	4621      	mov	r1, r4
   d6770:	f7ff ffd6 	bl	d6720 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6774:	4628      	mov	r0, r5
   d6776:	f7fd fca4 	bl	d40c2 <__cxa_guard_release>
   d677a:	4a07      	ldr	r2, [pc, #28]	; (d6798 <_Z22__fetch_global_Serial1v+0x44>)
   d677c:	4907      	ldr	r1, [pc, #28]	; (d679c <_Z22__fetch_global_Serial1v+0x48>)
   d677e:	4805      	ldr	r0, [pc, #20]	; (d6794 <_Z22__fetch_global_Serial1v+0x40>)
   d6780:	f000 fb18 	bl	d6db4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6784:	4803      	ldr	r0, [pc, #12]	; (d6794 <_Z22__fetch_global_Serial1v+0x40>)
   d6786:	bd38      	pop	{r3, r4, r5, pc}
   d6788:	2003e4b4 	.word	0x2003e4b4
   d678c:	2003e4b8 	.word	0x2003e4b8
   d6790:	2003e430 	.word	0x2003e430
   d6794:	2003e41c 	.word	0x2003e41c
   d6798:	2003e340 	.word	0x2003e340
   d679c:	000d669d 	.word	0x000d669d

000d67a0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d67a0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d67a2:	6883      	ldr	r3, [r0, #8]
   d67a4:	4604      	mov	r4, r0
   d67a6:	b90b      	cbnz	r3, d67ac <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d67a8:	f000 fb25 	bl	d6df6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d67ac:	68c3      	ldr	r3, [r0, #12]
   d67ae:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d67b0:	68a3      	ldr	r3, [r4, #8]
   d67b2:	b11b      	cbz	r3, d67bc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d67b4:	2203      	movs	r2, #3
   d67b6:	4621      	mov	r1, r4
   d67b8:	4620      	mov	r0, r4
   d67ba:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d67bc:	4620      	mov	r0, r4
   d67be:	2110      	movs	r1, #16
}
   d67c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d67c4:	f000 bb04 	b.w	d6dd0 <_ZdlPvj>

000d67c8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d67c8:	4770      	bx	lr

000d67ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d67ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67cc:	4606      	mov	r6, r0
   d67ce:	4615      	mov	r5, r2
   d67d0:	460c      	mov	r4, r1
   d67d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67d4:	42bc      	cmp	r4, r7
   d67d6:	d006      	beq.n	d67e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d67d8:	6833      	ldr	r3, [r6, #0]
   d67da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d67de:	689b      	ldr	r3, [r3, #8]
   d67e0:	4630      	mov	r0, r6
   d67e2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67e4:	e7f6      	b.n	d67d4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d67e6:	4628      	mov	r0, r5
   d67e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67ea <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d67ea:	2200      	movs	r2, #0
   d67ec:	7c00      	ldrb	r0, [r0, #16]
   d67ee:	f7fe bf1f 	b.w	d5630 <HAL_I2C_Write_Data>

000d67f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d67f2:	2100      	movs	r1, #0
   d67f4:	7c00      	ldrb	r0, [r0, #16]
   d67f6:	f7fe bf23 	b.w	d5640 <HAL_I2C_Available_Data>

000d67fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d67fa:	2100      	movs	r1, #0
   d67fc:	7c00      	ldrb	r0, [r0, #16]
   d67fe:	f7fe bf27 	b.w	d5650 <HAL_I2C_Read_Data>

000d6802 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6802:	2100      	movs	r1, #0
   d6804:	7c00      	ldrb	r0, [r0, #16]
   d6806:	f7fe bf2b 	b.w	d5660 <HAL_I2C_Peek_Data>

000d680a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d680a:	2100      	movs	r1, #0
   d680c:	7c00      	ldrb	r0, [r0, #16]
   d680e:	f7fe bf2f 	b.w	d5670 <HAL_I2C_Flush_Data>

000d6812 <_ZN7TwoWireD0Ev>:
   d6812:	b510      	push	{r4, lr}
   d6814:	2114      	movs	r1, #20
   d6816:	4604      	mov	r4, r0
   d6818:	f000 fada 	bl	d6dd0 <_ZdlPvj>
   d681c:	4620      	mov	r0, r4
   d681e:	bd10      	pop	{r4, pc}

000d6820 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6820:	b510      	push	{r4, lr}
   d6822:	4604      	mov	r4, r0
   d6824:	2300      	movs	r3, #0
   d6826:	6063      	str	r3, [r4, #4]
   d6828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d682c:	60a3      	str	r3, [r4, #8]
   d682e:	4b04      	ldr	r3, [pc, #16]	; (d6840 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6830:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6832:	4608      	mov	r0, r1
   d6834:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d6836:	4611      	mov	r1, r2
   d6838:	f7fe ff2a 	bl	d5690 <HAL_I2C_Init>
}
   d683c:	4620      	mov	r0, r4
   d683e:	bd10      	pop	{r4, pc}
   d6840:	000d7bd0 	.word	0x000d7bd0

000d6844 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6844:	2300      	movs	r3, #0
   d6846:	461a      	mov	r2, r3
   d6848:	4619      	mov	r1, r3
   d684a:	7c00      	ldrb	r0, [r0, #16]
   d684c:	f7fe bed8 	b.w	d5600 <HAL_I2C_Begin>

000d6850 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6850:	b570      	push	{r4, r5, r6, lr}
   d6852:	460c      	mov	r4, r1
   d6854:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d6856:	2514      	movs	r5, #20
   d6858:	4606      	mov	r6, r0
   d685a:	462a      	mov	r2, r5
   d685c:	2100      	movs	r1, #0
   d685e:	a801      	add	r0, sp, #4
   d6860:	f000 fc2d 	bl	d70be <memset>
   d6864:	7823      	ldrb	r3, [r4, #0]
   d6866:	f88d 3008 	strb.w	r3, [sp, #8]
   d686a:	6863      	ldr	r3, [r4, #4]
   d686c:	9303      	str	r3, [sp, #12]
   d686e:	68e3      	ldr	r3, [r4, #12]
   d6870:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d6872:	2200      	movs	r2, #0
   d6874:	7a23      	ldrb	r3, [r4, #8]
   d6876:	7c30      	ldrb	r0, [r6, #16]
   d6878:	f8ad 5004 	strh.w	r5, [sp, #4]
   d687c:	a901      	add	r1, sp, #4
   d687e:	9305      	str	r3, [sp, #20]
   d6880:	f7fe ff0e 	bl	d56a0 <HAL_I2C_Request_Data_Ex>
}
   d6884:	b006      	add	sp, #24
   d6886:	bd70      	pop	{r4, r5, r6, pc}

000d6888 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d6888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d688a:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d688c:	f88d 1000 	strb.w	r1, [sp]
   d6890:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6894:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d6896:	bf18      	it	ne
   d6898:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d689a:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d689c:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d689e:	f88d 3008 	strb.w	r3, [sp, #8]
   d68a2:	f7ff ffd5 	bl	d6850 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d68a6:	b005      	add	sp, #20
   d68a8:	f85d fb04 	ldr.w	pc, [sp], #4

000d68ac <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d68ac:	2301      	movs	r3, #1
   d68ae:	f7ff bfeb 	b.w	d6888 <_ZN7TwoWire11requestFromEhjh>

000d68b2 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d68b2:	2200      	movs	r2, #0
   d68b4:	7c00      	ldrb	r0, [r0, #16]
   d68b6:	f7fe beab 	b.w	d5610 <HAL_I2C_Begin_Transmission>

000d68ba <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d68ba:	b2c9      	uxtb	r1, r1
   d68bc:	f7ff bff9 	b.w	d68b2 <_ZN7TwoWire17beginTransmissionEh>

000d68c0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d68c0:	2200      	movs	r2, #0
   d68c2:	7c00      	ldrb	r0, [r0, #16]
   d68c4:	f7fe beac 	b.w	d5620 <HAL_I2C_End_Transmission>

000d68c8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d68c8:	2101      	movs	r1, #1
   d68ca:	f7ff bff9 	b.w	d68c0 <_ZN7TwoWire15endTransmissionEh>

000d68ce <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d68ce:	2100      	movs	r1, #0
   d68d0:	7c00      	ldrb	r0, [r0, #16]
   d68d2:	f7fe bed5 	b.w	d5680 <HAL_I2C_Is_Enabled>

000d68d6 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d68d6:	2200      	movs	r2, #0
   d68d8:	4611      	mov	r1, r2
   d68da:	6840      	ldr	r0, [r0, #4]
   d68dc:	f7fe bf94 	b.w	d5808 <network_listening>

000d68e0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d68e0:	2200      	movs	r2, #0
   d68e2:	4611      	mov	r1, r2
   d68e4:	6840      	ldr	r0, [r0, #4]
   d68e6:	f7fe bf9f 	b.w	d5828 <network_get_listen_timeout>

000d68ea <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d68ea:	2200      	movs	r2, #0
   d68ec:	6840      	ldr	r0, [r0, #4]
   d68ee:	f7fe bf93 	b.w	d5818 <network_set_listen_timeout>

000d68f2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d68f2:	2200      	movs	r2, #0
   d68f4:	f081 0101 	eor.w	r1, r1, #1
   d68f8:	6840      	ldr	r0, [r0, #4]
   d68fa:	f7fe bf7d 	b.w	d57f8 <network_listen>

000d68fe <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d68fe:	2300      	movs	r3, #0
   d6900:	461a      	mov	r2, r3
   d6902:	2101      	movs	r1, #1
   d6904:	6840      	ldr	r0, [r0, #4]
   d6906:	f7fe bf6f 	b.w	d57e8 <network_off>

000d690a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d690a:	2300      	movs	r3, #0
   d690c:	461a      	mov	r2, r3
   d690e:	4619      	mov	r1, r3
   d6910:	6840      	ldr	r0, [r0, #4]
   d6912:	f7fe bf61 	b.w	d57d8 <network_on>

000d6916 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6916:	2200      	movs	r2, #0
   d6918:	4611      	mov	r1, r2
   d691a:	6840      	ldr	r0, [r0, #4]
   d691c:	f7fe bf54 	b.w	d57c8 <network_ready>

000d6920 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6920:	2200      	movs	r2, #0
   d6922:	4611      	mov	r1, r2
   d6924:	6840      	ldr	r0, [r0, #4]
   d6926:	f7fe bf3f 	b.w	d57a8 <network_connecting>

000d692a <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d692a:	2200      	movs	r2, #0
   d692c:	2102      	movs	r1, #2
   d692e:	6840      	ldr	r0, [r0, #4]
   d6930:	f7fe bf42 	b.w	d57b8 <network_disconnect>

000d6934 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6934:	2300      	movs	r3, #0
   d6936:	461a      	mov	r2, r3
   d6938:	6840      	ldr	r0, [r0, #4]
   d693a:	f7fe bf2d 	b.w	d5798 <network_connect>

000d693e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d693e:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6940:	4605      	mov	r5, r0
   d6942:	b188      	cbz	r0, d6968 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6944:	6804      	ldr	r4, [r0, #0]
   d6946:	b14c      	cbz	r4, d695c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6948:	68a3      	ldr	r3, [r4, #8]
   d694a:	b11b      	cbz	r3, d6954 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d694c:	2203      	movs	r2, #3
   d694e:	4621      	mov	r1, r4
   d6950:	4620      	mov	r0, r4
   d6952:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6954:	2110      	movs	r1, #16
   d6956:	4620      	mov	r0, r4
   d6958:	f000 fa3a 	bl	d6dd0 <_ZdlPvj>
   d695c:	4628      	mov	r0, r5
   d695e:	2114      	movs	r1, #20
      }
   d6960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6964:	f000 ba34 	b.w	d6dd0 <_ZdlPvj>
   d6968:	bd38      	pop	{r3, r4, r5, pc}

000d696a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d696a:	b110      	cbz	r0, d6972 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d696c:	6803      	ldr	r3, [r0, #0]
   d696e:	685b      	ldr	r3, [r3, #4]
   d6970:	4718      	bx	r3
   d6972:	4770      	bx	lr

000d6974 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6974:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6976:	6803      	ldr	r3, [r0, #0]
   d6978:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d697a:	b1bb      	cbz	r3, d69ac <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d697c:	6858      	ldr	r0, [r3, #4]
   d697e:	f7fe fdcf 	bl	d5520 <os_thread_is_current>
   d6982:	b978      	cbnz	r0, d69a4 <_ZN6ThreadD1Ev+0x30>
   d6984:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6986:	7c5a      	ldrb	r2, [r3, #17]
   d6988:	b912      	cbnz	r2, d6990 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d698a:	6858      	ldr	r0, [r3, #4]
   d698c:	f7fe fdd0 	bl	d5530 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6990:	6823      	ldr	r3, [r4, #0]
   d6992:	6858      	ldr	r0, [r3, #4]
   d6994:	f7fe fdd4 	bl	d5540 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6998:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d699a:	2300      	movs	r3, #0
   d699c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d699e:	b128      	cbz	r0, d69ac <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d69a0:	f7ff ffcd 	bl	d693e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69a4:	6820      	ldr	r0, [r4, #0]
   d69a6:	b108      	cbz	r0, d69ac <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d69a8:	f7ff ffc9 	bl	d693e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d69ac:	4620      	mov	r0, r4
   d69ae:	bd10      	pop	{r4, pc}

000d69b0 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d69b0:	b538      	push	{r3, r4, r5, lr}
   d69b2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69b4:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d69b8:	b108      	cbz	r0, d69be <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d69ba:	f7fd fb70 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d69be:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d69c2:	b108      	cbz	r0, d69c8 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d69c4:	f7fe fdcc 	bl	d5560 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69c8:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d69cc:	b135      	cbz	r5, d69dc <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d69ce:	4628      	mov	r0, r5
   d69d0:	f7ff ffd0 	bl	d6974 <_ZN6ThreadD1Ev>
   d69d4:	2104      	movs	r1, #4
   d69d6:	4628      	mov	r0, r5
   d69d8:	f000 f9fa 	bl	d6dd0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d69dc:	6820      	ldr	r0, [r4, #0]
   d69de:	b108      	cbz	r0, d69e4 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d69e0:	f7ff ffc3 	bl	d696a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d69e4:	4620      	mov	r0, r4
   d69e6:	bd38      	pop	{r3, r4, r5, pc}

000d69e8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d69e8:	b510      	push	{r4, lr}
   d69ea:	4b04      	ldr	r3, [pc, #16]	; (d69fc <_ZN5spark9MeshClassD1Ev+0x14>)
   d69ec:	4604      	mov	r4, r0
   d69ee:	f840 3b08 	str.w	r3, [r0], #8
   d69f2:	f7ff ffdd 	bl	d69b0 <_ZN5spark11MeshPublishD1Ev>
   d69f6:	4620      	mov	r0, r4
   d69f8:	bd10      	pop	{r4, pc}
   d69fa:	bf00      	nop
   d69fc:	000d7bf8 	.word	0x000d7bf8

000d6a00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6a00:	b538      	push	{r3, r4, r5, lr}
   d6a02:	4c0e      	ldr	r4, [pc, #56]	; (d6a3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6a04:	4b0e      	ldr	r3, [pc, #56]	; (d6a40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6a06:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6a08:	2500      	movs	r5, #0
   d6a0a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6a0c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6a10:	6063      	str	r3, [r4, #4]
   d6a12:	60a5      	str	r5, [r4, #8]
   d6a14:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a18:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6a1c:	f7fe fd98 	bl	d5550 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6a20:	4b08      	ldr	r3, [pc, #32]	; (d6a44 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6a22:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6a26:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6a2a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6a2c:	4620      	mov	r0, r4
   d6a2e:	4a06      	ldr	r2, [pc, #24]	; (d6a48 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6a30:	4906      	ldr	r1, [pc, #24]	; (d6a4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6a36:	f000 b9bd 	b.w	d6db4 <__aeabi_atexit>
   d6a3a:	bf00      	nop
   d6a3c:	2003e53c 	.word	0x2003e53c
   d6a40:	000d7c60 	.word	0x000d7c60
   d6a44:	000d7bf8 	.word	0x000d7bf8
   d6a48:	2003e340 	.word	0x2003e340
   d6a4c:	000d69e9 	.word	0x000d69e9

000d6a50 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6a50:	2200      	movs	r2, #0
   d6a52:	4611      	mov	r1, r2
   d6a54:	6840      	ldr	r0, [r0, #4]
   d6a56:	f7fe beb7 	b.w	d57c8 <network_ready>

000d6a5a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a5a:	2200      	movs	r2, #0
   d6a5c:	4611      	mov	r1, r2
   d6a5e:	6840      	ldr	r0, [r0, #4]
   d6a60:	f7fe bed2 	b.w	d5808 <network_listening>

000d6a64 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a64:	2200      	movs	r2, #0
   d6a66:	4611      	mov	r1, r2
   d6a68:	6840      	ldr	r0, [r0, #4]
   d6a6a:	f7fe bedd 	b.w	d5828 <network_get_listen_timeout>

000d6a6e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a6e:	2200      	movs	r2, #0
   d6a70:	6840      	ldr	r0, [r0, #4]
   d6a72:	f7fe bed1 	b.w	d5818 <network_set_listen_timeout>

000d6a76 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a76:	2200      	movs	r2, #0
   d6a78:	f081 0101 	eor.w	r1, r1, #1
   d6a7c:	6840      	ldr	r0, [r0, #4]
   d6a7e:	f7fe bebb 	b.w	d57f8 <network_listen>

000d6a82 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d6a82:	2300      	movs	r3, #0
   d6a84:	461a      	mov	r2, r3
   d6a86:	4619      	mov	r1, r3
   d6a88:	6840      	ldr	r0, [r0, #4]
   d6a8a:	f7fe bead 	b.w	d57e8 <network_off>

000d6a8e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6a8e:	2300      	movs	r3, #0
   d6a90:	461a      	mov	r2, r3
   d6a92:	4619      	mov	r1, r3
   d6a94:	6840      	ldr	r0, [r0, #4]
   d6a96:	f7fe be9f 	b.w	d57d8 <network_on>

000d6a9a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a9a:	2200      	movs	r2, #0
   d6a9c:	4611      	mov	r1, r2
   d6a9e:	6840      	ldr	r0, [r0, #4]
   d6aa0:	f7fe be82 	b.w	d57a8 <network_connecting>

000d6aa4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6aa4:	2200      	movs	r2, #0
   d6aa6:	2102      	movs	r1, #2
   d6aa8:	6840      	ldr	r0, [r0, #4]
   d6aaa:	f7fe be85 	b.w	d57b8 <network_disconnect>

000d6aae <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6aae:	2300      	movs	r3, #0
   d6ab0:	461a      	mov	r2, r3
   d6ab2:	6840      	ldr	r0, [r0, #4]
   d6ab4:	f7fe be70 	b.w	d5798 <network_connect>

000d6ab8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6ab8:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6aba:	2204      	movs	r2, #4
   d6abc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6abe:	4a02      	ldr	r2, [pc, #8]	; (d6ac8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6ac0:	601a      	str	r2, [r3, #0]
   d6ac2:	4770      	bx	lr
   d6ac4:	2003e710 	.word	0x2003e710
   d6ac8:	000d7c2c 	.word	0x000d7c2c

000d6acc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6acc:	2300      	movs	r3, #0
   d6ace:	461a      	mov	r2, r3
   d6ad0:	6840      	ldr	r0, [r0, #4]
   d6ad2:	f7fe be61 	b.w	d5798 <network_connect>

000d6ad6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6ad6:	2200      	movs	r2, #0
   d6ad8:	2102      	movs	r1, #2
   d6ada:	6840      	ldr	r0, [r0, #4]
   d6adc:	f7fe be6c 	b.w	d57b8 <network_disconnect>

000d6ae0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6ae0:	2200      	movs	r2, #0
   d6ae2:	4611      	mov	r1, r2
   d6ae4:	6840      	ldr	r0, [r0, #4]
   d6ae6:	f7fe be5f 	b.w	d57a8 <network_connecting>

000d6aea <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6aea:	2200      	movs	r2, #0
   d6aec:	4611      	mov	r1, r2
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	f7fe be6a 	b.w	d57c8 <network_ready>

000d6af4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6af4:	2300      	movs	r3, #0
   d6af6:	461a      	mov	r2, r3
   d6af8:	4619      	mov	r1, r3
   d6afa:	6840      	ldr	r0, [r0, #4]
   d6afc:	f7fe be6c 	b.w	d57d8 <network_on>

000d6b00 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6b00:	2300      	movs	r3, #0
   d6b02:	461a      	mov	r2, r3
   d6b04:	4619      	mov	r1, r3
   d6b06:	6840      	ldr	r0, [r0, #4]
   d6b08:	f7fe be6e 	b.w	d57e8 <network_off>

000d6b0c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6b0c:	2200      	movs	r2, #0
   d6b0e:	f081 0101 	eor.w	r1, r1, #1
   d6b12:	6840      	ldr	r0, [r0, #4]
   d6b14:	f7fe be70 	b.w	d57f8 <network_listen>

000d6b18 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6b18:	2200      	movs	r2, #0
   d6b1a:	6840      	ldr	r0, [r0, #4]
   d6b1c:	f7fe be7c 	b.w	d5818 <network_set_listen_timeout>

000d6b20 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6b20:	2200      	movs	r2, #0
   d6b22:	4611      	mov	r1, r2
   d6b24:	6840      	ldr	r0, [r0, #4]
   d6b26:	f7fe be7f 	b.w	d5828 <network_get_listen_timeout>

000d6b2a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6b2a:	2200      	movs	r2, #0
   d6b2c:	4611      	mov	r1, r2
   d6b2e:	6840      	ldr	r0, [r0, #4]
   d6b30:	f7fe be6a 	b.w	d5808 <network_listening>

000d6b34 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b38:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6b3a:	b095      	sub	sp, #84	; 0x54
   d6b3c:	4616      	mov	r6, r2
   d6b3e:	460d      	mov	r5, r1
   d6b40:	4607      	mov	r7, r0
    IPAddress addr;
   d6b42:	f7ff fceb 	bl	d651c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6b46:	4621      	mov	r1, r4
   d6b48:	2220      	movs	r2, #32
   d6b4a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6b4c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6b4e:	f000 fab6 	bl	d70be <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6b52:	2340      	movs	r3, #64	; 0x40
   d6b54:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6b56:	4621      	mov	r1, r4
   d6b58:	466b      	mov	r3, sp
   d6b5a:	aa0c      	add	r2, sp, #48	; 0x30
   d6b5c:	4630      	mov	r0, r6
   d6b5e:	f7fe fc4f 	bl	d5400 <netdb_getaddrinfo>
    if (!r) {
   d6b62:	4604      	mov	r4, r0
   d6b64:	2800      	cmp	r0, #0
   d6b66:	d144      	bne.n	d6bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b68:	4602      	mov	r2, r0
   d6b6a:	2101      	movs	r1, #1
   d6b6c:	6868      	ldr	r0, [r5, #4]
   d6b6e:	f7fe fe2b 	bl	d57c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b72:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6b74:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b76:	4622      	mov	r2, r4
   d6b78:	6868      	ldr	r0, [r5, #4]
   d6b7a:	f7fe fe25 	bl	d57c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b7e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6b80:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6b82:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b84:	2e00      	cmp	r6, #0
   d6b86:	d034      	beq.n	d6bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6b88:	2900      	cmp	r1, #0
   d6b8a:	d132      	bne.n	d6bf2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6b8c:	6873      	ldr	r3, [r6, #4]
   d6b8e:	2b02      	cmp	r3, #2
   d6b90:	d002      	beq.n	d6b98 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6b92:	2b0a      	cmp	r3, #10
   d6b94:	d009      	beq.n	d6baa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6b96:	e02a      	b.n	d6bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6b98:	f1b8 0f00 	cmp.w	r8, #0
   d6b9c:	d027      	beq.n	d6bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6b9e:	6971      	ldr	r1, [r6, #20]
   d6ba0:	4638      	mov	r0, r7
   d6ba2:	3104      	adds	r1, #4
   d6ba4:	f7ff fce7 	bl	d6576 <_ZN9IPAddressaSEPKh>
   d6ba8:	e020      	b.n	d6bec <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6baa:	f1b9 0f00 	cmp.w	r9, #0
   d6bae:	d01e      	beq.n	d6bee <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6bb0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6bb2:	2211      	movs	r2, #17
   d6bb4:	a801      	add	r0, sp, #4
   d6bb6:	f000 fa82 	bl	d70be <memset>
                    a.v = 6;
   d6bba:	2306      	movs	r3, #6
   d6bbc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6bc0:	ad01      	add	r5, sp, #4
   d6bc2:	f104 0308 	add.w	r3, r4, #8
   d6bc6:	3418      	adds	r4, #24
   d6bc8:	6818      	ldr	r0, [r3, #0]
   d6bca:	6859      	ldr	r1, [r3, #4]
   d6bcc:	462a      	mov	r2, r5
   d6bce:	c203      	stmia	r2!, {r0, r1}
   d6bd0:	3308      	adds	r3, #8
   d6bd2:	42a3      	cmp	r3, r4
   d6bd4:	4615      	mov	r5, r2
   d6bd6:	d1f7      	bne.n	d6bc8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6bd8:	a901      	add	r1, sp, #4
   d6bda:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6bdc:	ad07      	add	r5, sp, #28
   d6bde:	f7ff fcab 	bl	d6538 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6be4:	1d3c      	adds	r4, r7, #4
   d6be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6be8:	682b      	ldr	r3, [r5, #0]
   d6bea:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6bec:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6bee:	69f6      	ldr	r6, [r6, #28]
   d6bf0:	e7c8      	b.n	d6b84 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6bf2:	9800      	ldr	r0, [sp, #0]
   d6bf4:	f7fe fbfc 	bl	d53f0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6bf8:	4638      	mov	r0, r7
   d6bfa:	b015      	add	sp, #84	; 0x54
   d6bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6c00 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6c00:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6c02:	4a03      	ldr	r2, [pc, #12]	; (d6c10 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6c04:	601a      	str	r2, [r3, #0]
   d6c06:	2200      	movs	r2, #0
   d6c08:	605a      	str	r2, [r3, #4]
   d6c0a:	4770      	bx	lr
   d6c0c:	2003e718 	.word	0x2003e718
   d6c10:	000d7c60 	.word	0x000d7c60

000d6c14 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6c14:	b510      	push	{r4, lr}
   d6c16:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6c18:	f000 f86c 	bl	d6cf4 <_ZN8particle7globals11instanceSpiEv>
   d6c1c:	f7fe ff61 	bl	d5ae2 <_ZN8SPIClass9isEnabledEv>
   d6c20:	b128      	cbz	r0, d6c2e <pinAvailable+0x1a>
   d6c22:	f1a4 030b 	sub.w	r3, r4, #11
   d6c26:	2b02      	cmp	r3, #2
   d6c28:	d801      	bhi.n	d6c2e <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d6c2a:	2000      	movs	r0, #0
   d6c2c:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6c2e:	f000 f89b 	bl	d6d68 <_Z19__fetch_global_Wirev>
   d6c32:	f7ff fe4c 	bl	d68ce <_ZN7TwoWire9isEnabledEv>
   d6c36:	b108      	cbz	r0, d6c3c <pinAvailable+0x28>
   d6c38:	2c01      	cmp	r4, #1
   d6c3a:	d9f6      	bls.n	d6c2a <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6c3c:	f7ff fd8a 	bl	d6754 <_Z22__fetch_global_Serial1v>
   d6c40:	f7ff fd84 	bl	d674c <_ZN11USARTSerial9isEnabledEv>
   d6c44:	b118      	cbz	r0, d6c4e <pinAvailable+0x3a>
   d6c46:	f1a4 0309 	sub.w	r3, r4, #9
   d6c4a:	2b01      	cmp	r3, #1
   d6c4c:	d9ed      	bls.n	d6c2a <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6c4e:	2c23      	cmp	r4, #35	; 0x23
   d6c50:	bf8c      	ite	hi
   d6c52:	2000      	movhi	r0, #0
   d6c54:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6c56:	bd10      	pop	{r4, pc}

000d6c58 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c58:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6c5a:	b538      	push	{r3, r4, r5, lr}
   d6c5c:	4604      	mov	r4, r0
   d6c5e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c60:	d80a      	bhi.n	d6c78 <pinMode+0x20>
   d6c62:	29ff      	cmp	r1, #255	; 0xff
   d6c64:	d008      	beq.n	d6c78 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6c66:	f7ff ffd5 	bl	d6c14 <pinAvailable>
   d6c6a:	b128      	cbz	r0, d6c78 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c6c:	4629      	mov	r1, r5
   d6c6e:	4620      	mov	r0, r4
}
   d6c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c74:	f7fe bbd4 	b.w	d5420 <HAL_Pin_Mode>
   d6c78:	bd38      	pop	{r3, r4, r5, pc}

000d6c7a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6c7a:	b538      	push	{r3, r4, r5, lr}
   d6c7c:	4604      	mov	r4, r0
   d6c7e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6c80:	f7fe fbd6 	bl	d5430 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6c84:	28ff      	cmp	r0, #255	; 0xff
   d6c86:	d010      	beq.n	d6caa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6c88:	2806      	cmp	r0, #6
   d6c8a:	d804      	bhi.n	d6c96 <digitalWrite+0x1c>
   d6c8c:	234d      	movs	r3, #77	; 0x4d
   d6c8e:	fa23 f000 	lsr.w	r0, r3, r0
   d6c92:	07c3      	lsls	r3, r0, #31
   d6c94:	d409      	bmi.n	d6caa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6c96:	4620      	mov	r0, r4
   d6c98:	f7ff ffbc 	bl	d6c14 <pinAvailable>
   d6c9c:	b128      	cbz	r0, d6caa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6c9e:	4629      	mov	r1, r5
   d6ca0:	4620      	mov	r0, r4
}
   d6ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6ca6:	f7fe bbcb 	b.w	d5440 <HAL_GPIO_Write>
   d6caa:	bd38      	pop	{r3, r4, r5, pc}

000d6cac <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   d6cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6cb0:	4690      	mov	r8, r2
   d6cb2:	461e      	mov	r6, r3
   d6cb4:	2407      	movs	r4, #7
   d6cb6:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   d6cb8:	460d      	mov	r5, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
   d6cba:	f1b8 0f00 	cmp.w	r8, #0
   d6cbe:	d104      	bne.n	d6cca <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   d6cc0:	f1c4 0107 	rsb	r1, r4, #7
   d6cc4:	fa46 f101 	asr.w	r1, r6, r1
   d6cc8:	e001      	b.n	d6cce <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   d6cca:	fa46 f104 	asr.w	r1, r6, r4
   d6cce:	f001 0101 	and.w	r1, r1, #1
   d6cd2:	4638      	mov	r0, r7
   d6cd4:	f7ff ffd1 	bl	d6c7a <digitalWrite>

    digitalWrite(clockPin, HIGH);
   d6cd8:	2101      	movs	r1, #1
   d6cda:	4628      	mov	r0, r5
   d6cdc:	f7ff ffcd 	bl	d6c7a <digitalWrite>
    digitalWrite(clockPin, LOW);
   d6ce0:	2100      	movs	r1, #0
   d6ce2:	4628      	mov	r0, r5
   d6ce4:	f7ff ffc9 	bl	d6c7a <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
   d6ce8:	f114 34ff 	adds.w	r4, r4, #4294967295
   d6cec:	d2e5      	bcs.n	d6cba <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
   d6cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d6cf4 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d6cf4:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d6cf6:	4d0b      	ldr	r5, [pc, #44]	; (d6d24 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d6cf8:	6829      	ldr	r1, [r5, #0]
   d6cfa:	f011 0401 	ands.w	r4, r1, #1
   d6cfe:	d10f      	bne.n	d6d20 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d6d00:	4628      	mov	r0, r5
   d6d02:	f7fd f9d9 	bl	d40b8 <__cxa_guard_acquire>
   d6d06:	b158      	cbz	r0, d6d20 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d6d08:	4621      	mov	r1, r4
   d6d0a:	4807      	ldr	r0, [pc, #28]	; (d6d28 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d6d0c:	f7fe fe28 	bl	d5960 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6d10:	4628      	mov	r0, r5
   d6d12:	f7fd f9d6 	bl	d40c2 <__cxa_guard_release>
   d6d16:	4a05      	ldr	r2, [pc, #20]	; (d6d2c <_ZN8particle7globals11instanceSpiEv+0x38>)
   d6d18:	4905      	ldr	r1, [pc, #20]	; (d6d30 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d6d1a:	4803      	ldr	r0, [pc, #12]	; (d6d28 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d6d1c:	f000 f84a 	bl	d6db4 <__aeabi_atexit>
    return instance;
}
   d6d20:	4801      	ldr	r0, [pc, #4]	; (d6d28 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d6d22:	bd38      	pop	{r3, r4, r5, pc}
   d6d24:	2003e72c 	.word	0x2003e72c
   d6d28:	2003e720 	.word	0x2003e720
   d6d2c:	2003e340 	.word	0x2003e340
   d6d30:	000d5945 	.word	0x000d5945

000d6d34 <_Z17acquireWireBufferv>:
   d6d34:	b570      	push	{r4, r5, r6, lr}
   d6d36:	4604      	mov	r4, r0
   d6d38:	2514      	movs	r5, #20
   d6d3a:	462a      	mov	r2, r5
   d6d3c:	4e09      	ldr	r6, [pc, #36]	; (d6d64 <_Z17acquireWireBufferv+0x30>)
   d6d3e:	2100      	movs	r1, #0
   d6d40:	f000 f9bd 	bl	d70be <memset>
   d6d44:	8025      	strh	r5, [r4, #0]
   d6d46:	2520      	movs	r5, #32
   d6d48:	4631      	mov	r1, r6
   d6d4a:	60a5      	str	r5, [r4, #8]
   d6d4c:	6125      	str	r5, [r4, #16]
   d6d4e:	4628      	mov	r0, r5
   d6d50:	f000 f840 	bl	d6dd4 <_ZnajRKSt9nothrow_t>
   d6d54:	4631      	mov	r1, r6
   d6d56:	6060      	str	r0, [r4, #4]
   d6d58:	4628      	mov	r0, r5
   d6d5a:	f000 f83b 	bl	d6dd4 <_ZnajRKSt9nothrow_t>
   d6d5e:	60e0      	str	r0, [r4, #12]
   d6d60:	4620      	mov	r0, r4
   d6d62:	bd70      	pop	{r4, r5, r6, pc}
   d6d64:	000d7c8c 	.word	0x000d7c8c

000d6d68 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6d68:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6d6a:	4d0e      	ldr	r5, [pc, #56]	; (d6da4 <_Z19__fetch_global_Wirev+0x3c>)
   d6d6c:	6829      	ldr	r1, [r5, #0]
   d6d6e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6d72:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6d74:	d113      	bne.n	d6d9e <_Z19__fetch_global_Wirev+0x36>
   d6d76:	4628      	mov	r0, r5
   d6d78:	f7fd f99e 	bl	d40b8 <__cxa_guard_acquire>
   d6d7c:	b178      	cbz	r0, d6d9e <_Z19__fetch_global_Wirev+0x36>
   d6d7e:	a801      	add	r0, sp, #4
   d6d80:	f7ff ffd8 	bl	d6d34 <_Z17acquireWireBufferv>
   d6d84:	aa01      	add	r2, sp, #4
   d6d86:	4621      	mov	r1, r4
   d6d88:	4807      	ldr	r0, [pc, #28]	; (d6da8 <_Z19__fetch_global_Wirev+0x40>)
   d6d8a:	f7ff fd49 	bl	d6820 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6d8e:	4628      	mov	r0, r5
   d6d90:	f7fd f997 	bl	d40c2 <__cxa_guard_release>
   d6d94:	4a05      	ldr	r2, [pc, #20]	; (d6dac <_Z19__fetch_global_Wirev+0x44>)
   d6d96:	4906      	ldr	r1, [pc, #24]	; (d6db0 <_Z19__fetch_global_Wirev+0x48>)
   d6d98:	4803      	ldr	r0, [pc, #12]	; (d6da8 <_Z19__fetch_global_Wirev+0x40>)
   d6d9a:	f000 f80b 	bl	d6db4 <__aeabi_atexit>
	return wire;
}
   d6d9e:	4802      	ldr	r0, [pc, #8]	; (d6da8 <_Z19__fetch_global_Wirev+0x40>)
   d6da0:	b007      	add	sp, #28
   d6da2:	bd30      	pop	{r4, r5, pc}
   d6da4:	2003e734 	.word	0x2003e734
   d6da8:	2003e738 	.word	0x2003e738
   d6dac:	2003e340 	.word	0x2003e340
   d6db0:	000d67c9 	.word	0x000d67c9

000d6db4 <__aeabi_atexit>:
   d6db4:	460b      	mov	r3, r1
   d6db6:	4601      	mov	r1, r0
   d6db8:	4618      	mov	r0, r3
   d6dba:	f000 b967 	b.w	d708c <__cxa_atexit>
	...

000d6dc0 <_ZSt15get_new_handlerv>:
   d6dc0:	4b02      	ldr	r3, [pc, #8]	; (d6dcc <_ZSt15get_new_handlerv+0xc>)
   d6dc2:	6818      	ldr	r0, [r3, #0]
   d6dc4:	f3bf 8f5f 	dmb	sy
   d6dc8:	4770      	bx	lr
   d6dca:	bf00      	nop
   d6dcc:	2003e74c 	.word	0x2003e74c

000d6dd0 <_ZdlPvj>:
   d6dd0:	f7fd b963 	b.w	d409a <_ZdlPv>

000d6dd4 <_ZnajRKSt9nothrow_t>:
   d6dd4:	f000 b800 	b.w	d6dd8 <_ZnwjRKSt9nothrow_t>

000d6dd8 <_ZnwjRKSt9nothrow_t>:
   d6dd8:	b510      	push	{r4, lr}
   d6dda:	2800      	cmp	r0, #0
   d6ddc:	bf14      	ite	ne
   d6dde:	4604      	movne	r4, r0
   d6de0:	2401      	moveq	r4, #1
   d6de2:	4620      	mov	r0, r4
   d6de4:	f7fe fd40 	bl	d5868 <malloc>
   d6de8:	b920      	cbnz	r0, d6df4 <_ZnwjRKSt9nothrow_t+0x1c>
   d6dea:	f7ff ffe9 	bl	d6dc0 <_ZSt15get_new_handlerv>
   d6dee:	b108      	cbz	r0, d6df4 <_ZnwjRKSt9nothrow_t+0x1c>
   d6df0:	4780      	blx	r0
   d6df2:	e7f6      	b.n	d6de2 <_ZnwjRKSt9nothrow_t+0xa>
   d6df4:	bd10      	pop	{r4, pc}

000d6df6 <_ZSt25__throw_bad_function_callv>:
   d6df6:	b508      	push	{r3, lr}
   d6df8:	f7fe fd56 	bl	d58a8 <abort>

000d6dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6dfc:	4b18      	ldr	r3, [pc, #96]	; (d6e60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6dfe:	681a      	ldr	r2, [r3, #0]
   d6e00:	07d1      	lsls	r1, r2, #31
   d6e02:	bf5c      	itt	pl
   d6e04:	2201      	movpl	r2, #1
   d6e06:	601a      	strpl	r2, [r3, #0]
   d6e08:	4b16      	ldr	r3, [pc, #88]	; (d6e64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6e0a:	681a      	ldr	r2, [r3, #0]
   d6e0c:	07d2      	lsls	r2, r2, #31
   d6e0e:	bf5c      	itt	pl
   d6e10:	2201      	movpl	r2, #1
   d6e12:	601a      	strpl	r2, [r3, #0]
   d6e14:	4b14      	ldr	r3, [pc, #80]	; (d6e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6e16:	681a      	ldr	r2, [r3, #0]
   d6e18:	07d0      	lsls	r0, r2, #31
   d6e1a:	bf5c      	itt	pl
   d6e1c:	2201      	movpl	r2, #1
   d6e1e:	601a      	strpl	r2, [r3, #0]
   d6e20:	4b12      	ldr	r3, [pc, #72]	; (d6e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e22:	681a      	ldr	r2, [r3, #0]
   d6e24:	07d1      	lsls	r1, r2, #31
   d6e26:	bf5c      	itt	pl
   d6e28:	2201      	movpl	r2, #1
   d6e2a:	601a      	strpl	r2, [r3, #0]
   d6e2c:	4b10      	ldr	r3, [pc, #64]	; (d6e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e2e:	681a      	ldr	r2, [r3, #0]
   d6e30:	07d2      	lsls	r2, r2, #31
   d6e32:	bf5c      	itt	pl
   d6e34:	2201      	movpl	r2, #1
   d6e36:	601a      	strpl	r2, [r3, #0]
   d6e38:	4b0e      	ldr	r3, [pc, #56]	; (d6e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6e3a:	681a      	ldr	r2, [r3, #0]
   d6e3c:	07d0      	lsls	r0, r2, #31
   d6e3e:	bf5c      	itt	pl
   d6e40:	2201      	movpl	r2, #1
   d6e42:	601a      	strpl	r2, [r3, #0]
   d6e44:	4b0c      	ldr	r3, [pc, #48]	; (d6e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6e46:	681a      	ldr	r2, [r3, #0]
   d6e48:	07d1      	lsls	r1, r2, #31
   d6e4a:	bf5c      	itt	pl
   d6e4c:	2201      	movpl	r2, #1
   d6e4e:	601a      	strpl	r2, [r3, #0]
   d6e50:	4b0a      	ldr	r3, [pc, #40]	; (d6e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6e52:	681a      	ldr	r2, [r3, #0]
   d6e54:	07d2      	lsls	r2, r2, #31
   d6e56:	bf5c      	itt	pl
   d6e58:	2201      	movpl	r2, #1
   d6e5a:	601a      	strpl	r2, [r3, #0]
   d6e5c:	4770      	bx	lr
   d6e5e:	bf00      	nop
   d6e60:	2003e76c 	.word	0x2003e76c
   d6e64:	2003e768 	.word	0x2003e768
   d6e68:	2003e764 	.word	0x2003e764
   d6e6c:	2003e760 	.word	0x2003e760
   d6e70:	2003e75c 	.word	0x2003e75c
   d6e74:	2003e758 	.word	0x2003e758
   d6e78:	2003e754 	.word	0x2003e754
   d6e7c:	2003e750 	.word	0x2003e750

000d6e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6e80:	4b24      	ldr	r3, [pc, #144]	; (d6f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6e82:	681a      	ldr	r2, [r3, #0]
   d6e84:	07d0      	lsls	r0, r2, #31
   d6e86:	bf5c      	itt	pl
   d6e88:	2201      	movpl	r2, #1
   d6e8a:	601a      	strpl	r2, [r3, #0]
   d6e8c:	4b22      	ldr	r3, [pc, #136]	; (d6f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6e8e:	681a      	ldr	r2, [r3, #0]
   d6e90:	07d1      	lsls	r1, r2, #31
   d6e92:	bf5c      	itt	pl
   d6e94:	2201      	movpl	r2, #1
   d6e96:	601a      	strpl	r2, [r3, #0]
   d6e98:	4b20      	ldr	r3, [pc, #128]	; (d6f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6e9a:	681a      	ldr	r2, [r3, #0]
   d6e9c:	07d2      	lsls	r2, r2, #31
   d6e9e:	bf5c      	itt	pl
   d6ea0:	2201      	movpl	r2, #1
   d6ea2:	601a      	strpl	r2, [r3, #0]
   d6ea4:	4b1e      	ldr	r3, [pc, #120]	; (d6f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6ea6:	681a      	ldr	r2, [r3, #0]
   d6ea8:	07d0      	lsls	r0, r2, #31
   d6eaa:	bf5c      	itt	pl
   d6eac:	2201      	movpl	r2, #1
   d6eae:	601a      	strpl	r2, [r3, #0]
   d6eb0:	4b1c      	ldr	r3, [pc, #112]	; (d6f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6eb2:	681a      	ldr	r2, [r3, #0]
   d6eb4:	07d1      	lsls	r1, r2, #31
   d6eb6:	bf5c      	itt	pl
   d6eb8:	2201      	movpl	r2, #1
   d6eba:	601a      	strpl	r2, [r3, #0]
   d6ebc:	4b1a      	ldr	r3, [pc, #104]	; (d6f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6ebe:	681a      	ldr	r2, [r3, #0]
   d6ec0:	07d2      	lsls	r2, r2, #31
   d6ec2:	bf5c      	itt	pl
   d6ec4:	2201      	movpl	r2, #1
   d6ec6:	601a      	strpl	r2, [r3, #0]
   d6ec8:	4b18      	ldr	r3, [pc, #96]	; (d6f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6eca:	681a      	ldr	r2, [r3, #0]
   d6ecc:	07d0      	lsls	r0, r2, #31
   d6ece:	bf5c      	itt	pl
   d6ed0:	2201      	movpl	r2, #1
   d6ed2:	601a      	strpl	r2, [r3, #0]
   d6ed4:	4b16      	ldr	r3, [pc, #88]	; (d6f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6ed6:	681a      	ldr	r2, [r3, #0]
   d6ed8:	07d1      	lsls	r1, r2, #31
   d6eda:	bf5c      	itt	pl
   d6edc:	2201      	movpl	r2, #1
   d6ede:	601a      	strpl	r2, [r3, #0]
   d6ee0:	4b14      	ldr	r3, [pc, #80]	; (d6f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6ee2:	681a      	ldr	r2, [r3, #0]
   d6ee4:	07d2      	lsls	r2, r2, #31
   d6ee6:	bf5c      	itt	pl
   d6ee8:	2201      	movpl	r2, #1
   d6eea:	601a      	strpl	r2, [r3, #0]
   d6eec:	4b12      	ldr	r3, [pc, #72]	; (d6f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d0      	lsls	r0, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b10      	ldr	r3, [pc, #64]	; (d6f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d1      	lsls	r1, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b0e      	ldr	r3, [pc, #56]	; (d6f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d2      	lsls	r2, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4770      	bx	lr
   d6f12:	bf00      	nop
   d6f14:	2003e79c 	.word	0x2003e79c
   d6f18:	2003e798 	.word	0x2003e798
   d6f1c:	2003e794 	.word	0x2003e794
   d6f20:	2003e790 	.word	0x2003e790
   d6f24:	2003e78c 	.word	0x2003e78c
   d6f28:	2003e788 	.word	0x2003e788
   d6f2c:	2003e784 	.word	0x2003e784
   d6f30:	2003e780 	.word	0x2003e780
   d6f34:	2003e77c 	.word	0x2003e77c
   d6f38:	2003e778 	.word	0x2003e778
   d6f3c:	2003e774 	.word	0x2003e774
   d6f40:	2003e770 	.word	0x2003e770

000d6f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6f44:	4b24      	ldr	r3, [pc, #144]	; (d6fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6f46:	681a      	ldr	r2, [r3, #0]
   d6f48:	07d0      	lsls	r0, r2, #31
   d6f4a:	bf5c      	itt	pl
   d6f4c:	2201      	movpl	r2, #1
   d6f4e:	601a      	strpl	r2, [r3, #0]
   d6f50:	4b22      	ldr	r3, [pc, #136]	; (d6fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6f52:	681a      	ldr	r2, [r3, #0]
   d6f54:	07d1      	lsls	r1, r2, #31
   d6f56:	bf5c      	itt	pl
   d6f58:	2201      	movpl	r2, #1
   d6f5a:	601a      	strpl	r2, [r3, #0]
   d6f5c:	4b20      	ldr	r3, [pc, #128]	; (d6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6f5e:	681a      	ldr	r2, [r3, #0]
   d6f60:	07d2      	lsls	r2, r2, #31
   d6f62:	bf5c      	itt	pl
   d6f64:	2201      	movpl	r2, #1
   d6f66:	601a      	strpl	r2, [r3, #0]
   d6f68:	4b1e      	ldr	r3, [pc, #120]	; (d6fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6f6a:	681a      	ldr	r2, [r3, #0]
   d6f6c:	07d0      	lsls	r0, r2, #31
   d6f6e:	bf5c      	itt	pl
   d6f70:	2201      	movpl	r2, #1
   d6f72:	601a      	strpl	r2, [r3, #0]
   d6f74:	4b1c      	ldr	r3, [pc, #112]	; (d6fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6f76:	681a      	ldr	r2, [r3, #0]
   d6f78:	07d1      	lsls	r1, r2, #31
   d6f7a:	bf5c      	itt	pl
   d6f7c:	2201      	movpl	r2, #1
   d6f7e:	601a      	strpl	r2, [r3, #0]
   d6f80:	4b1a      	ldr	r3, [pc, #104]	; (d6fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6f82:	681a      	ldr	r2, [r3, #0]
   d6f84:	07d2      	lsls	r2, r2, #31
   d6f86:	bf5c      	itt	pl
   d6f88:	2201      	movpl	r2, #1
   d6f8a:	601a      	strpl	r2, [r3, #0]
   d6f8c:	4b18      	ldr	r3, [pc, #96]	; (d6ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6f8e:	681a      	ldr	r2, [r3, #0]
   d6f90:	07d0      	lsls	r0, r2, #31
   d6f92:	bf5c      	itt	pl
   d6f94:	2201      	movpl	r2, #1
   d6f96:	601a      	strpl	r2, [r3, #0]
   d6f98:	4b16      	ldr	r3, [pc, #88]	; (d6ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6f9a:	681a      	ldr	r2, [r3, #0]
   d6f9c:	07d1      	lsls	r1, r2, #31
   d6f9e:	bf5c      	itt	pl
   d6fa0:	2201      	movpl	r2, #1
   d6fa2:	601a      	strpl	r2, [r3, #0]
   d6fa4:	4b14      	ldr	r3, [pc, #80]	; (d6ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6fa6:	681a      	ldr	r2, [r3, #0]
   d6fa8:	07d2      	lsls	r2, r2, #31
   d6faa:	bf5c      	itt	pl
   d6fac:	2201      	movpl	r2, #1
   d6fae:	601a      	strpl	r2, [r3, #0]
   d6fb0:	4b12      	ldr	r3, [pc, #72]	; (d6ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6fb2:	681a      	ldr	r2, [r3, #0]
   d6fb4:	07d0      	lsls	r0, r2, #31
   d6fb6:	bf5c      	itt	pl
   d6fb8:	2201      	movpl	r2, #1
   d6fba:	601a      	strpl	r2, [r3, #0]
   d6fbc:	4b10      	ldr	r3, [pc, #64]	; (d7000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6fbe:	681a      	ldr	r2, [r3, #0]
   d6fc0:	07d1      	lsls	r1, r2, #31
   d6fc2:	bf5c      	itt	pl
   d6fc4:	2201      	movpl	r2, #1
   d6fc6:	601a      	strpl	r2, [r3, #0]
   d6fc8:	4b0e      	ldr	r3, [pc, #56]	; (d7004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6fca:	681a      	ldr	r2, [r3, #0]
   d6fcc:	07d2      	lsls	r2, r2, #31
   d6fce:	bf5c      	itt	pl
   d6fd0:	2201      	movpl	r2, #1
   d6fd2:	601a      	strpl	r2, [r3, #0]
   d6fd4:	4770      	bx	lr
   d6fd6:	bf00      	nop
   d6fd8:	2003e7cc 	.word	0x2003e7cc
   d6fdc:	2003e7c8 	.word	0x2003e7c8
   d6fe0:	2003e7c4 	.word	0x2003e7c4
   d6fe4:	2003e7c0 	.word	0x2003e7c0
   d6fe8:	2003e7bc 	.word	0x2003e7bc
   d6fec:	2003e7b8 	.word	0x2003e7b8
   d6ff0:	2003e7b4 	.word	0x2003e7b4
   d6ff4:	2003e7b0 	.word	0x2003e7b0
   d6ff8:	2003e7ac 	.word	0x2003e7ac
   d6ffc:	2003e7a8 	.word	0x2003e7a8
   d7000:	2003e7a4 	.word	0x2003e7a4
   d7004:	2003e7a0 	.word	0x2003e7a0

000d7008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7008:	4b18      	ldr	r3, [pc, #96]	; (d706c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d700a:	681a      	ldr	r2, [r3, #0]
   d700c:	07d1      	lsls	r1, r2, #31
   d700e:	bf5c      	itt	pl
   d7010:	2201      	movpl	r2, #1
   d7012:	601a      	strpl	r2, [r3, #0]
   d7014:	4b16      	ldr	r3, [pc, #88]	; (d7070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7016:	681a      	ldr	r2, [r3, #0]
   d7018:	07d2      	lsls	r2, r2, #31
   d701a:	bf5c      	itt	pl
   d701c:	2201      	movpl	r2, #1
   d701e:	601a      	strpl	r2, [r3, #0]
   d7020:	4b14      	ldr	r3, [pc, #80]	; (d7074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7022:	681a      	ldr	r2, [r3, #0]
   d7024:	07d0      	lsls	r0, r2, #31
   d7026:	bf5c      	itt	pl
   d7028:	2201      	movpl	r2, #1
   d702a:	601a      	strpl	r2, [r3, #0]
   d702c:	4b12      	ldr	r3, [pc, #72]	; (d7078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d702e:	681a      	ldr	r2, [r3, #0]
   d7030:	07d1      	lsls	r1, r2, #31
   d7032:	bf5c      	itt	pl
   d7034:	2201      	movpl	r2, #1
   d7036:	601a      	strpl	r2, [r3, #0]
   d7038:	4b10      	ldr	r3, [pc, #64]	; (d707c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d703a:	681a      	ldr	r2, [r3, #0]
   d703c:	07d2      	lsls	r2, r2, #31
   d703e:	bf5c      	itt	pl
   d7040:	2201      	movpl	r2, #1
   d7042:	601a      	strpl	r2, [r3, #0]
   d7044:	4b0e      	ldr	r3, [pc, #56]	; (d7080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7046:	681a      	ldr	r2, [r3, #0]
   d7048:	07d0      	lsls	r0, r2, #31
   d704a:	bf5c      	itt	pl
   d704c:	2201      	movpl	r2, #1
   d704e:	601a      	strpl	r2, [r3, #0]
   d7050:	4b0c      	ldr	r3, [pc, #48]	; (d7084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7052:	681a      	ldr	r2, [r3, #0]
   d7054:	07d1      	lsls	r1, r2, #31
   d7056:	bf5c      	itt	pl
   d7058:	2201      	movpl	r2, #1
   d705a:	601a      	strpl	r2, [r3, #0]
   d705c:	4b0a      	ldr	r3, [pc, #40]	; (d7088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d705e:	681a      	ldr	r2, [r3, #0]
   d7060:	07d2      	lsls	r2, r2, #31
   d7062:	bf5c      	itt	pl
   d7064:	2201      	movpl	r2, #1
   d7066:	601a      	strpl	r2, [r3, #0]
   d7068:	4770      	bx	lr
   d706a:	bf00      	nop
   d706c:	2003e7ec 	.word	0x2003e7ec
   d7070:	2003e7e8 	.word	0x2003e7e8
   d7074:	2003e7e4 	.word	0x2003e7e4
   d7078:	2003e7e0 	.word	0x2003e7e0
   d707c:	2003e7dc 	.word	0x2003e7dc
   d7080:	2003e7d8 	.word	0x2003e7d8
   d7084:	2003e7d4 	.word	0x2003e7d4
   d7088:	2003e7d0 	.word	0x2003e7d0

000d708c <__cxa_atexit>:
   d708c:	b510      	push	{r4, lr}
   d708e:	4c05      	ldr	r4, [pc, #20]	; (d70a4 <__cxa_atexit+0x18>)
   d7090:	4613      	mov	r3, r2
   d7092:	b12c      	cbz	r4, d70a0 <__cxa_atexit+0x14>
   d7094:	460a      	mov	r2, r1
   d7096:	4601      	mov	r1, r0
   d7098:	2002      	movs	r0, #2
   d709a:	f3af 8000 	nop.w
   d709e:	bd10      	pop	{r4, pc}
   d70a0:	4620      	mov	r0, r4
   d70a2:	bd10      	pop	{r4, pc}
   d70a4:	00000000 	.word	0x00000000

000d70a8 <memcpy>:
   d70a8:	b510      	push	{r4, lr}
   d70aa:	1e43      	subs	r3, r0, #1
   d70ac:	440a      	add	r2, r1
   d70ae:	4291      	cmp	r1, r2
   d70b0:	d004      	beq.n	d70bc <memcpy+0x14>
   d70b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d70b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d70ba:	e7f8      	b.n	d70ae <memcpy+0x6>
   d70bc:	bd10      	pop	{r4, pc}

000d70be <memset>:
   d70be:	4402      	add	r2, r0
   d70c0:	4603      	mov	r3, r0
   d70c2:	4293      	cmp	r3, r2
   d70c4:	d002      	beq.n	d70cc <memset+0xe>
   d70c6:	f803 1b01 	strb.w	r1, [r3], #1
   d70ca:	e7fa      	b.n	d70c2 <memset+0x4>
   d70cc:	4770      	bx	lr
	...

000d70d0 <srand>:
   d70d0:	b538      	push	{r3, r4, r5, lr}
   d70d2:	4b12      	ldr	r3, [pc, #72]	; (d711c <srand+0x4c>)
   d70d4:	681c      	ldr	r4, [r3, #0]
   d70d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d70d8:	4605      	mov	r5, r0
   d70da:	b9d3      	cbnz	r3, d7112 <srand+0x42>
   d70dc:	2018      	movs	r0, #24
   d70de:	f7fe fbc3 	bl	d5868 <malloc>
   d70e2:	f243 330e 	movw	r3, #13070	; 0x330e
   d70e6:	63a0      	str	r0, [r4, #56]	; 0x38
   d70e8:	8003      	strh	r3, [r0, #0]
   d70ea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d70ee:	8043      	strh	r3, [r0, #2]
   d70f0:	f241 2334 	movw	r3, #4660	; 0x1234
   d70f4:	8083      	strh	r3, [r0, #4]
   d70f6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d70fa:	80c3      	strh	r3, [r0, #6]
   d70fc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7100:	8103      	strh	r3, [r0, #8]
   d7102:	2305      	movs	r3, #5
   d7104:	8143      	strh	r3, [r0, #10]
   d7106:	230b      	movs	r3, #11
   d7108:	8183      	strh	r3, [r0, #12]
   d710a:	2201      	movs	r2, #1
   d710c:	2300      	movs	r3, #0
   d710e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7112:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7114:	2200      	movs	r2, #0
   d7116:	611d      	str	r5, [r3, #16]
   d7118:	615a      	str	r2, [r3, #20]
   d711a:	bd38      	pop	{r3, r4, r5, pc}
   d711c:	2003e33c 	.word	0x2003e33c

000d7120 <strdup>:
   d7120:	4b02      	ldr	r3, [pc, #8]	; (d712c <strdup+0xc>)
   d7122:	4601      	mov	r1, r0
   d7124:	6818      	ldr	r0, [r3, #0]
   d7126:	f000 b803 	b.w	d7130 <_strdup_r>
   d712a:	bf00      	nop
   d712c:	2003e33c 	.word	0x2003e33c

000d7130 <_strdup_r>:
   d7130:	b570      	push	{r4, r5, r6, lr}
   d7132:	4606      	mov	r6, r0
   d7134:	4608      	mov	r0, r1
   d7136:	460c      	mov	r4, r1
   d7138:	f000 f80d 	bl	d7156 <strlen>
   d713c:	1c45      	adds	r5, r0, #1
   d713e:	4629      	mov	r1, r5
   d7140:	4630      	mov	r0, r6
   d7142:	f7fe fbb9 	bl	d58b8 <_malloc_r>
   d7146:	4606      	mov	r6, r0
   d7148:	b118      	cbz	r0, d7152 <_strdup_r+0x22>
   d714a:	462a      	mov	r2, r5
   d714c:	4621      	mov	r1, r4
   d714e:	f7ff ffab 	bl	d70a8 <memcpy>
   d7152:	4630      	mov	r0, r6
   d7154:	bd70      	pop	{r4, r5, r6, pc}

000d7156 <strlen>:
   d7156:	4603      	mov	r3, r0
   d7158:	f813 2b01 	ldrb.w	r2, [r3], #1
   d715c:	2a00      	cmp	r2, #0
   d715e:	d1fb      	bne.n	d7158 <strlen+0x2>
   d7160:	1a18      	subs	r0, r3, r0
   d7162:	3801      	subs	r0, #1
   d7164:	4770      	bx	lr

000d7166 <link_code_end>:
	...

000d7168 <dynalib_user>:
   d7168:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7178:	0000 0000                                   ....

000d717c <_ZTV16JsonWriterStaticILj256EE>:
	...
   d7184:	40cd 000d 40e1 000d 2020 7700 6f72 676e     .@...@..  .wrong
   d7194:	6320 6568 6b63 7553 216d 2121 0021 2d2d      checkSum!!!!.--
   d71a4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d71b4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d71c4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d71d4:	2d2d 2d2d 2d2d 2d2d 5300 7265 6169 206c     --------.Serial 
   d71e4:	7473 7261 0074 4d48 3333 5830 6920 696e     start.HM330X ini
   d71f4:	2074 6166 6c69 6465 2121 0021 7544 7473     t failed!!!.Dust
   d7204:	5220 6165 6964 676e 5000 314d 5000 324d      Reading.PM1.PM2
   d7214:	0035 4d50 3031 5000 314d 302e 003a 4d50     5.PM10.PM1.0:.PM
   d7224:	2e32 3a35 5000 314d 3a30 2500 0064 7544     2.5:.PM10:.%d.Du
   d7234:	7473 0031 7544 7473 3532 4400 7375 3174     st1.Dust25.Dust1
   d7244:	0030 7544 7473 6552 6461 6e69 7367 4800     0.DustReadings.H
   d7254:	334d 3033 2058 6572 6461 7220 7365 6c75     M330X read resul
   d7264:	2074 6166 6c69 6465 2121 0021 7453 7261     t failed!!!.Star
   d7274:	6974 676e 4420 7369 6c70 7961 5000 6972     ting Display.Pri
   d7284:	746e 6e69 2067 6f43 636e 6e65 7274 7461     nting Concentrat
   d7294:	6f69 736e 5000 324d 352e 4420 7461 0061     ions.PM2.5 Data.
   d72a4:	6573 736e 726f 6e20 6d75 203a 5000 314d     sensor num: .PM1
   d72b4:	302e 6320 6e6f 6563 746e 6172 6974 6e6f     .0 concentration
   d72c4:	4328 3d46 2c31 7453 6e61 6164 6472 7020     (CF=1,Standard p
   d72d4:	7261 6974 7563 616c 6574 6d20 7461 6574     articulate matte
   d72e4:	2c72 6e75 7469 753a 2f67 336d 3a29 0020     r,unit:ug/m3): .
   d72f4:	4d50 2e32 2035 6f63 636e 6e65 7274 7461     PM2.5 concentrat
   d7304:	6f69 286e 4643 313d 532c 6174 646e 7261     ion(CF=1,Standar
   d7314:	2064 6170 7472 6369 6c75 7461 2065 616d     d particulate ma
   d7324:	7474 7265 752c 696e 3a74 6775 6d2f 2933     tter,unit:ug/m3)
   d7334:	203a 5000 314d 2030 6f63 636e 6e65 7274     : .PM10 concentr
   d7344:	7461 6f69 286e 4643 313d 532c 6174 646e     ation(CF=1,Stand
   d7354:	7261 2064 6170 7472 6369 6c75 7461 2065     ard particulate 
   d7364:	616d 7474 7265 752c 696e 3a74 6775 6d2f     matter,unit:ug/m
   d7374:	2933 203a 5000 314d 302e 6320 6e6f 6563     3): .PM1.0 conce
   d7384:	746e 6172 6974 6e6f 4128 6d74 736f 6870     ntration(Atmosph
   d7394:	7265 6369 6520 766e 7269 6e6f 656d 746e     eric environment
   d73a4:	752c 696e 3a74 6775 6d2f 2933 203a 5000     ,unit:ug/m3): .P
   d73b4:	324d 352e 6320 6e6f 6563 746e 6172 6974     M2.5 concentrati
   d73c4:	6e6f 4128 6d74 736f 6870 7265 6369 6520     on(Atmospheric e
   d73d4:	766e 7269 6e6f 656d 746e 752c 696e 3a74     nvironment,unit:
   d73e4:	6775 6d2f 2933 203a 5000 314d 2030 6f63     ug/m3): .PM10 co
   d73f4:	636e 6e65 7274 7461 6f69 286e 7441 6f6d     ncentration(Atmo
   d7404:	7073 6568 6972 2063 6e65 6976 6f72 6d6e     spheric environm
   d7414:	6e65 2c74 6e75 7469 753a 2f67 336d 3a29     ent,unit:ug/m3):
   d7424:	0020 0000                                    ...

000d7428 <_ZTV16Adafruit_SSD1306>:
	...
   d7430:	40c9 000d 4585 000d 501d 000d 5cc5 000d     .@...E...P...\..
   d7440:	4919 000d 4d1d 000d 47a1 000d 462d 000d     .I...M...G..-F..
   d7450:	4ddd 000d 4e73 000d 4eab 000d 4ec7 000d     .M..sN...N...N..

000d7460 <_ZTV12Adafruit_GFX>:
	...
   d7470:	501d 000d 5cc5 000d 40a5 000d 4d1d 000d     .P...\...@...M..
   d7480:	4e3d 000d 4e59 000d 4ddd 000d 4e73 000d     =N..YN...M..sN..
   d7490:	4eab 000d 4ec7 000d                         .N...N..

000d7498 <_ZL4font>:
   d7498:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d74a8:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d74b8:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d74c8:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d74d8:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d74e8:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d74f8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d7508:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d7518:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d7528:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d7538:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d7548:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d7558:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d7568:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d7578:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d7588:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d7598:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d75a8:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d75b8:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d75c8:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d75d8:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d75e8:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d75f8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d7608:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d7618:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d7628:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d7638:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d7648:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d7658:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d7668:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d7678:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d7688:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d7698:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d76a8:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d76b8:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d76c8:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d76d8:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d76e8:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d76f8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7708:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d7718:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7728:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   d7738:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7748:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7758:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   d7768:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d7778:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   d7788:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   d7798:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   d77a8:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d77b8:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d77c8:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d77d8:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d77e8:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d77f8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7808:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   d7818:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   d7828:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   d7838:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   d7848:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   d7858:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   d7868:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   d7878:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   d7888:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   d7898:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   d78a8:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   d78b8:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   d78c8:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   d78d8:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   d78e8:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   d78f8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   d7908:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   d7918:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   d7928:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   d7938:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   d7948:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   d7958:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   d7968:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   d7978:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   d7988:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000d7994 <_ZTV10JsonBuffer>:
	...
   d799c:	5165 000d 5181 000d                         eQ...Q..

000d79a4 <_ZTV10JsonWriter>:
	...
   d79ac:	5195 000d 51a9 000d 6c25 0075 3025 7834     .Q...Q..%lu.%04x
   d79bc:	5c00 2575 3430 0058 7274 6575 6600 6c61     .\u%04X.true.fal
   d79cc:	6573 2500 2a2e 0066 6625 2500 2a2e 666c     se.%.*f.%f.%.*lf
   d79dc:	2500 666c 0000 0000                         .%lf....

000d79e4 <_ZTVN5spark13EthernetClassE>:
	...
   d79ec:	5927 000d 591d 000d 5913 000d 5909 000d     'Y...Y...Y...Y..
   d79fc:	58fd 000d 58f1 000d 58e5 000d 58dd 000d     .X...X...X...X..
   d7a0c:	58d3 000d 58c9 000d 6b35 000d               .X...X..5k..

000d7a18 <_ZTV8SPIClass>:
	...
   d7a20:	5945 000d 5947 000d                         EY..GY..

000d7a28 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7a28:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d7a38:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d7a48:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d7a58:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d7a68:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d7a78:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d7a88:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d7a98:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d7aa8:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d7ab8:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d7ac8:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d7ad8:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d7ae8:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d7af8:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   d7b08:	6c61 006c 005a 2b25 3330 3a64 3025 7532     all.Z.%+03d:%02u
   d7b18:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d7b28:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d7b38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7b40:	5f21 000d 5f27 000d 5f6b 000d 5f35 000d     !_..'_..k_..5_..
   d7b50:	5f23 000d                                   #_..

000d7b54 <_ZTV9IPAddress>:
	...
   d7b5c:	64b9 000d 64a9 000d 64ab 000d               .d...d...d..

000d7b68 <_ZTV9USBSerial>:
	...
   d7b70:	6591 000d 65e1 000d 65ef 000d 5cc5 000d     .e...e...e...\..
   d7b80:	65cd 000d 6593 000d 65a9 000d 65db 000d     .e...e...e...e..
   d7b90:	65bf 000d 658d 000d                         .e...e..

000d7b98 <_ZTV11USARTSerial>:
	...
   d7ba0:	669d 000d 66ed 000d 66fb 000d 5cc5 000d     .f...f...f...\..
   d7bb0:	66b1 000d 66d3 000d 66bf 000d 66e7 000d     .f...f...f...f..
   d7bc0:	669f 000d 66a3 000d                         .f...f..

000d7bc8 <_ZTV7TwoWire>:
	...
   d7bd0:	67c9 000d 6813 000d 67eb 000d 67cb 000d     .g...h...g...g..
   d7be0:	67f3 000d 67fb 000d 6803 000d 680b 000d     .g...g...h...h..

000d7bf0 <_ZTVN5spark9MeshClassE>:
	...
   d7bf8:	6935 000d 692b 000d 6921 000d 6917 000d     5i..+i..!i...i..
   d7c08:	690b 000d 68ff 000d 68f3 000d 68eb 000d     .i...h...h...h..
   d7c18:	68e1 000d 68d7 000d 6b35 000d               .h...h..5k..

000d7c24 <_ZTVN5spark9WiFiClassE>:
	...
   d7c2c:	6aaf 000d 6aa5 000d 6a9b 000d 6a51 000d     .j...j...j..Qj..
   d7c3c:	6a8f 000d 6a83 000d 6a77 000d 6a6f 000d     .j...j..wj..oj..
   d7c4c:	6a65 000d 6a5b 000d 6b35 000d               ej..[j..5k..

000d7c58 <_ZTVN5spark12NetworkClassE>:
	...
   d7c60:	6acd 000d 6ad7 000d 6ae1 000d 6aeb 000d     .j...j...j...j..
   d7c70:	6af5 000d 6b01 000d 6b0d 000d 6b19 000d     .j...k...k...k..
   d7c80:	6b21 000d 6b2b 000d 6b35 000d               !k..+k..5k..

000d7c8c <_ZSt7nothrow>:
   d7c8c:	0000 0000                                   ....

000d7c90 <__sf_fake_stdin>:
	...

000d7cb0 <__sf_fake_stdout>:
	...

000d7cd0 <__sf_fake_stderr>:
	...
   d7cf0:	0043                                        C.

000d7cf2 <link_const_variable_data_end>:
	...

000d7cf4 <link_constructors_location>:
   d7cf4:	000d4595 	.word	0x000d4595
   d7cf8:	000d4d19 	.word	0x000d4d19
   d7cfc:	000d50ad 	.word	0x000d50ad
   d7d00:	000d50e5 	.word	0x000d50e5
   d7d04:	000d515f 	.word	0x000d515f
   d7d08:	000d53eb 	.word	0x000d53eb
   d7d0c:	000d5931 	.word	0x000d5931
   d7d10:	000d5b09 	.word	0x000d5b09
   d7d14:	000d5c9d 	.word	0x000d5c9d
   d7d18:	000d5d8d 	.word	0x000d5d8d
   d7d1c:	000d5d9d 	.word	0x000d5d9d
   d7d20:	000d5df5 	.word	0x000d5df5
   d7d24:	000d6a01 	.word	0x000d6a01
   d7d28:	000d6ab9 	.word	0x000d6ab9
   d7d2c:	000d6c01 	.word	0x000d6c01
   d7d30:	000d6dfd 	.word	0x000d6dfd
   d7d34:	000d6e81 	.word	0x000d6e81
   d7d38:	000d6f45 	.word	0x000d6f45
   d7d3c:	000d7009 	.word	0x000d7009
